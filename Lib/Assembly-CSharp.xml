<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Assembly-CSharp</name>
  </assembly>
  <members>
    <member name="T:AtkResist">
      <summary>属性耐性を表します。</summary>
    </member>
    <member name="F:AtkResist.Endure">
      <summary>耐性 (0.25倍)</summary>
    </member>
    <member name="F:AtkResist.Immune">
      <summary>免疫 (0倍)</summary>
    </member>
    <member name="F:AtkResist.None">
      <summary>未定義</summary>
    </member>
    <member name="F:AtkResist.Normal">
      <summary>普通 (1倍)</summary>
    </member>
    <member name="F:AtkResist.Resist">
      <summary>抵抗 (0.5倍)</summary>
    </member>
    <member name="F:AtkResist.Vulnerable">
      <summary>脆弱 (2倍)</summary>
    </member>
    <member name="F:AtkResist.Weak">
      <summary>弱点 (1.5倍)</summary>
    </member>
    <member name="T:BattleAllyCardDetail">
      <summary>デッキおよび手札の詳細を表します。</summary>
    </member>
    <member name="M:BattleAllyCardDetail.#ctor(BattleUnitModel)">
      <summary></summary>
      <param name="self"></param>
    </member>
    <member name="M:BattleAllyCardDetail.AddCardToDeck(System.Collections.Generic.List{BattleDiceCardModel})">
      <summary></summary>
      <param name="cards"></param>
    </member>
    <member name="M:BattleAllyCardDetail.AddCardToHand(BattleDiceCardModel,System.Boolean)">
      <summary>指定したバトル ページを手札に追加します。</summary>
      <param name="card">追加するバトル ページ。</param>
      <param name="front">手札の先頭に追加することを示す値。既定は false (手札の末尾) です。</param>
    </member>
    <member name="M:BattleAllyCardDetail.AddNewCard(System.Int32,System.Boolean)">
      <summary>指定したバトル ページ ID に一致するバトル ページを新規作成し、手札に追加します。</summary>
      <param name="cardId">追加するバトル ページのバトル ページ ID。</param>
      <param name="front">手札の先頭に追加することを示す値。既定は false (手札の末尾) です。</param>
      <returns>追加したバトル ページ。</returns>
    </member>
    <member name="M:BattleAllyCardDetail.AddNewCard(LorId,System.Boolean)">
      <summary></summary>
      <param name="cardId"></param>
      <param name="front"></param>
      <returns></returns>
    </member>
    <member name="M:BattleAllyCardDetail.AddNewCardToDeck(System.Int32,System.Boolean)">
      <summary></summary>
      <param name="cardId"></param>
      <param name="front"></param>
      <returns></returns>
    </member>
    <member name="M:BattleAllyCardDetail.AddNewCardToDeck(LorId,System.Boolean)">
      <summary></summary>
      <param name="cardId"></param>
      <param name="front"></param>
      <returns></returns>
    </member>
    <member name="M:BattleAllyCardDetail.AddNewCardToDiscarded(System.Int32)">
      <summary></summary>
      <param name="cardId"></param>
      <returns></returns>
    </member>
    <member name="M:BattleAllyCardDetail.AddNewCardToDiscarded(LorId)">
      <summary></summary>
      <param name="cardId"></param>
      <returns></returns>
    </member>
    <member name="M:BattleAllyCardDetail.AddSoulCard(System.Int32)">
      <summary></summary>
      <param name="emotionLevel"></param>
    </member>
    <member name="M:BattleAllyCardDetail.AddTempCard(System.Int32)">
      <summary></summary>
      <param name="cardId"></param>
      <returns></returns>
    </member>
    <member name="M:BattleAllyCardDetail.AddTempCard(LorId)">
      <summary></summary>
      <param name="cardId"></param>
      <returns></returns>
    </member>
    <member name="M:BattleAllyCardDetail.DiscardACardByAbility(BattleDiceCardModel)">
      <summary></summary>
      <param name="card"></param>
    </member>
    <member name="M:BattleAllyCardDetail.DiscardACardByAbility(System.Collections.Generic.List{BattleDiceCardModel})">
      <summary></summary>
      <param name="cardList"></param>
    </member>
    <member name="M:BattleAllyCardDetail.DiscardACardHighest">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleAllyCardDetail.DiscardACardLowest">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleAllyCardDetail.DisCardACardRandom">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleAllyCardDetail.DiscardACardRandomlyByAbility(System.Int32)">
      <summary></summary>
      <param name="num"></param>
    </member>
    <member name="M:BattleAllyCardDetail.DiscardCardsInUse">
      <summary></summary>
    </member>
    <member name="M:BattleAllyCardDetail.DiscardInHand(System.Int32)">
      <summary></summary>
      <param name="num"></param>
    </member>
    <member name="M:BattleAllyCardDetail.DrawCards(System.Int32)">
      <summary></summary>
      <param name="count"></param>
    </member>
    <member name="M:BattleAllyCardDetail.DrawCardsAllSpecific(LorId,BattleDiceCardModel)">
      <summary></summary>
      <param name="cardId"></param>
      <param name="exclude"></param>
    </member>
    <member name="M:BattleAllyCardDetail.ExceptHighlanderID(LorId)">
      <summary></summary>
      <param name="cardId"></param>
      <returns></returns>
    </member>
    <member name="M:BattleAllyCardDetail.ExhaustACard(BattleDiceCardModel)">
      <summary></summary>
      <param name="card"></param>
    </member>
    <member name="M:BattleAllyCardDetail.ExhaustACardAnywhere(BattleDiceCardModel)">
      <summary></summary>
      <param name="card"></param>
    </member>
    <member name="M:BattleAllyCardDetail.ExhaustAllCards">
      <summary></summary>
    </member>
    <member name="M:BattleAllyCardDetail.ExhaustAllCardsInHand">
      <summary></summary>
    </member>
    <member name="M:BattleAllyCardDetail.ExhaustCard(System.Int32)">
      <summary></summary>
      <param name="id"></param>
    </member>
    <member name="M:BattleAllyCardDetail.ExhaustCard(LorId)">
      <summary></summary>
      <param name="id"></param>
    </member>
    <member name="M:BattleAllyCardDetail.ExhaustCardInDeck(LorId)">
      <summary></summary>
      <param name="id"></param>
      <returns></returns>
    </member>
    <member name="M:BattleAllyCardDetail.ExhaustCardInHand(System.Int32)">
      <summary></summary>
      <param name="id"></param>
      <returns></returns>
    </member>
    <member name="M:BattleAllyCardDetail.ExhaustCardInHand(LorId)">
      <summary></summary>
      <param name="id"></param>
      <returns></returns>
    </member>
    <member name="M:BattleAllyCardDetail.ExhaustCardInHand(BattleDiceCardModel)">
      <summary></summary>
      <param name="card"></param>
      <returns></returns>
    </member>
    <member name="M:BattleAllyCardDetail.ExhaustRandomCardInDeck">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleAllyCardDetail.ExhaustRandomCardInHand">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleAllyCardDetail.Exsist6CardsInHand_andCopy">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleAllyCardDetail.GetAllDeck">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleAllyCardDetail.GetDeck">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleAllyCardDetail.GetDiscarded">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleAllyCardDetail.GetHand">
      <summary>自身の手札を全て取得します。</summary>
      <returns>手札として所有しているバトル ページのリスト。</returns>
    </member>
    <member name="M:BattleAllyCardDetail.GetRandomCardInHand(System.Predicate{BattleDiceCardModel})">
      <summary></summary>
      <param name="condition"></param>
      <returns></returns>
    </member>
    <member name="M:BattleAllyCardDetail.GetUse">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleAllyCardDetail.Init(System.Collections.Generic.List{LOR_DiceSystem.DiceCardXmlInfo})">
      <summary>指定したデッキ情報でインスタンスを初期化します。デッキはシャッフルされた状態になります。</summary>
      <param name="deck">バトル ページのリストで表される、使用するデッキ情報。</param>
    </member>
    <member name="M:BattleAllyCardDetail.IsHighlander">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleAllyCardDetail.OnBreakState">
      <summary></summary>
    </member>
    <member name="M:BattleAllyCardDetail.OnDrawCard">
      <summary></summary>
    </member>
    <member name="M:BattleAllyCardDetail.OnLoseParrying(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleAllyCardDetail.OnRoundEnd">
      <summary>幕の終了時に呼び出されます。</summary>
    </member>
    <member name="M:BattleAllyCardDetail.OnRoundEnd_before">
      <summary></summary>
    </member>
    <member name="M:BattleAllyCardDetail.OnRoundStart">
      <summary>幕の開始時に呼び出されます。</summary>
    </member>
    <member name="M:BattleAllyCardDetail.OnUseCard(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="curCard"></param>
    </member>
    <member name="M:BattleAllyCardDetail.OnWinParrying(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleAllyCardDetail.PlayTurnAutoForEnemy(System.Int32,System.Int32)">
      <summary></summary>
      <param name="currentDiceSlotIdx"></param>
      <param name="speed"></param>
    </member>
    <member name="M:BattleAllyCardDetail.PlayTurnAutoForPlayer(System.Int32)">
      <summary></summary>
      <param name="idx"></param>
    </member>
    <member name="M:BattleAllyCardDetail.ReturnAllToDeck">
      <summary></summary>
    </member>
    <member name="M:BattleAllyCardDetail.ReturnCardInHandToDeck(BattleDiceCardModel)">
      <summary></summary>
      <param name="card"></param>
      <returns></returns>
    </member>
    <member name="M:BattleAllyCardDetail.ReturnCardToHand(BattleDiceCardModel)">
      <summary></summary>
      <param name="appliedCard"></param>
    </member>
    <member name="M:BattleAllyCardDetail.SetMaxDrawHand(System.Int32)">
      <summary></summary>
      <param name="handCount"></param>
    </member>
    <member name="M:BattleAllyCardDetail.SetMaxHand(System.Int32)">
      <summary></summary>
      <param name="handCount"></param>
    </member>
    <member name="M:BattleAllyCardDetail.Shuffle">
      <summary>デッキをシャッフルします。</summary>
    </member>
    <member name="M:BattleAllyCardDetail.SpendCard(BattleDiceCardModel)">
      <summary></summary>
      <param name="card"></param>
      <returns></returns>
    </member>
    <member name="M:BattleAllyCardDetail.UseCard(BattleDiceCardModel)">
      <summary></summary>
      <param name="card"></param>
    </member>
    <member name="P:BattleAllyCardDetail.maxHandCount">
      <summary></summary>
    </member>
    <member name="T:BattleCardTotalResult">
      <summary>バトル ページによって適用された効果の結果を格納します。</summary>
    </member>
    <member name="F:BattleCardTotalResult.endCardActionEvent">
      <summary></summary>
    </member>
    <member name="F:BattleCardTotalResult.playingCard">
      <summary></summary>
    </member>
    <member name="F:BattleCardTotalResult.prevBehaviour">
      <summary></summary>
    </member>
    <member name="F:BattleCardTotalResult.useCardEvent">
      <summary></summary>
    </member>
    <member name="F:BattleCardTotalResult.usedCard">
      <summary></summary>
    </member>
    <member name="F:BattleCardTotalResult.usedDiceList">
      <summary></summary>
    </member>
    <member name="M:BattleCardTotalResult.#ctor(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="playingCard"></param>
    </member>
    <member name="M:BattleCardTotalResult.AddBufEffect(System.String)">
      <summary></summary>
      <param name="src"></param>
    </member>
    <member name="M:BattleCardTotalResult.AddEmotionCoin(EmotionCoinType,System.Int32)">
      <summary></summary>
      <param name="coinType"></param>
      <param name="count"></param>
    </member>
    <member name="M:BattleCardTotalResult.ApplyCreatureEffect(Battle.CreatureEffect.CreatureEffect)">
      <summary></summary>
      <param name="effect"></param>
    </member>
    <member name="M:BattleCardTotalResult.CompareDiceBehavioursUI(System.Collections.Generic.List{BattleDiceBehaviourUI},CompareBehaviourUIType)">
      <summary></summary>
      <param name="behaviours"></param>
      <param name="type"></param>
    </member>
    <member name="M:BattleCardTotalResult.GetBehavioursDiceState(CompareBehaviourUIType)">
      <summary></summary>
      <param name="type"></param>
      <returns></returns>
    </member>
    <member name="M:BattleCardTotalResult.InitNextBehaviour">
      <summary></summary>
    </member>
    <member name="M:BattleCardTotalResult.SetAfterActionEvent(BattleCardBehaviourResult.BehaviourEvent)">
      <summary></summary>
      <param name="e"></param>
    </member>
    <member name="M:BattleCardTotalResult.SetAttackEffectFilter(System.Type)">
      <summary></summary>
      <param name="filter"></param>
    </member>
    <member name="M:BattleCardTotalResult.SetBehaviour(BattleDiceBehavior)">
      <summary></summary>
      <param name="behaviour"></param>
    </member>
    <member name="M:BattleCardTotalResult.SetBehaviourDiceResultUI(CompareBehaviourUIType)">
      <summary></summary>
      <param name="type"></param>
    </member>
    <member name="M:BattleCardTotalResult.SetBehaviourResult(DiceBehaviourResultData)">
      <summary></summary>
      <param name="result"></param>
    </member>
    <member name="M:BattleCardTotalResult.SetBreakDmgGiven(System.Int32)">
      <summary></summary>
      <param name="breakDmg"></param>
    </member>
    <member name="M:BattleCardTotalResult.SetBreakDmgTaken(System.Int32,LOR_DiceSystem.BehaviourDetail,AtkResist)">
      <summary></summary>
      <param name="breakDmg"></param>
      <param name="detail"></param>
      <param name="atkResist"></param>
    </member>
    <member name="M:BattleCardTotalResult.SetBreakState(System.Boolean)">
      <summary></summary>
      <param name="isBreaked"></param>
    </member>
    <member name="M:BattleCardTotalResult.SetBufs(BattleUnitBuf)">
      <summary></summary>
      <param name="buf"></param>
    </member>
    <member name="M:BattleCardTotalResult.SetCreatureAbilityEffect(System.String,System.Single)">
      <summary></summary>
      <param name="resPath"></param>
      <param name="time"></param>
    </member>
    <member name="M:BattleCardTotalResult.SetCreatureEffectSound(System.String)">
      <summary></summary>
      <param name="src"></param>
    </member>
    <member name="M:BattleCardTotalResult.SetCurrentBreakGauge(System.Int32)">
      <summary></summary>
      <param name="breakGauge"></param>
    </member>
    <member name="M:BattleCardTotalResult.SetCurrentBuf(BattleBufUIDataList)">
      <summary></summary>
      <param name="bufDataList"></param>
    </member>
    <member name="M:BattleCardTotalResult.SetCurrentHp(System.Single)">
      <summary></summary>
      <param name="curHp"></param>
    </member>
    <member name="M:BattleCardTotalResult.SetDamageGiven(System.Int32)">
      <summary></summary>
      <param name="dmg"></param>
    </member>
    <member name="M:BattleCardTotalResult.SetDamageTaken(System.Int32,System.Int32,LOR_DiceSystem.BehaviourDetail,AtkResist)">
      <summary></summary>
      <param name="dmg"></param>
      <param name="maxValue"></param>
      <param name="detail"></param>
      <param name="atkResist"></param>
    </member>
    <member name="M:BattleCardTotalResult.SetDeathState(System.Boolean)">
      <summary></summary>
      <param name="isDead"></param>
    </member>
    <member name="M:BattleCardTotalResult.SetDiceBehaviourAbility(System.Boolean,BattleDiceBehavior,BattleDiceCardModel)">
      <summary></summary>
      <param name="activateByResult"></param>
      <param name="diceBehaviour"></param>
      <param name="cardModel"></param>
    </member>
    <member name="M:BattleCardTotalResult.SetDiceDestroyed(System.Boolean)">
      <summary></summary>
      <param name="b"></param>
    </member>
    <member name="M:BattleCardTotalResult.SetEmotionAbility(BattleEmotionCardModel)">
      <summary></summary>
      <param name="emotionPassive"></param>
    </member>
    <member name="M:BattleCardTotalResult.SetEmotionAbility(System.Boolean,BattleEmotionCardModel,System.Int32,ResultOption,System.Int32[])">
      <summary></summary>
      <param name="activateByResult"></param>
      <param name="emotionPassive"></param>
      <param name="index"></param>
      <param name="option"></param>
      <param name="param"></param>
    </member>
    <member name="M:BattleCardTotalResult.SetEmotionAbilityEffect(System.String)">
      <summary></summary>
      <param name="resPath"></param>
    </member>
    <member name="M:BattleCardTotalResult.SetEndCardActionEvent(BattleCardBehaviourResult.BehaviourEvent)">
      <summary></summary>
      <param name="e"></param>
    </member>
    <member name="M:BattleCardTotalResult.SetGift(GiftModel)">
      <summary></summary>
      <param name="gift"></param>
    </member>
    <member name="M:BattleCardTotalResult.SetIsBlocked(System.Boolean)">
      <summary></summary>
      <param name="blocked"></param>
    </member>
    <member name="M:BattleCardTotalResult.SetNewBufs(BattleUnitBuf)">
      <summary></summary>
      <param name="buf"></param>
    </member>
    <member name="M:BattleCardTotalResult.SetNewCreatureAbilityEffect(System.String,System.Single)">
      <summary></summary>
      <param name="resPath"></param>
      <param name="time"></param>
    </member>
    <member name="M:BattleCardTotalResult.SetParam(System.Int32)">
      <summary></summary>
      <param name="param"></param>
    </member>
    <member name="M:BattleCardTotalResult.SetPassiveAbility(PassiveAbilityBase)">
      <summary>指定したパッシブを適用された効果として追加します。</summary>
      <param name="passive">追加するパッシブ。</param>
    </member>
    <member name="M:BattleCardTotalResult.SetPassiveAbilityDesc(System.String)">
      <summary></summary>
      <param name="desc"></param>
    </member>
    <member name="M:BattleCardTotalResult.SetPrintDamagedEffectEvent(BattleCardBehaviourResult.BehaviourEvent)">
      <summary></summary>
      <param name="e"></param>
    </member>
    <member name="M:BattleCardTotalResult.SetPrintEffectEvent(BattleCardBehaviourResult.BehaviourEvent)">
      <summary></summary>
      <param name="e"></param>
    </member>
    <member name="M:BattleCardTotalResult.SetRecoveredBp(System.Int32)">
      <summary></summary>
      <param name="amount"></param>
    </member>
    <member name="M:BattleCardTotalResult.SetRecoveredHp(System.Int32)">
      <summary></summary>
      <param name="amount"></param>
    </member>
    <member name="M:BattleCardTotalResult.SetRecoveredLight(System.Int32)">
      <summary></summary>
      <param name="amount"></param>
    </member>
    <member name="M:BattleCardTotalResult.SetResultDiceFace(System.Int32,System.Int32)">
      <summary></summary>
      <param name="min"></param>
      <param name="face"></param>
    </member>
    <member name="M:BattleCardTotalResult.SetResultDiceValue(System.Int32)">
      <summary></summary>
      <param name="value"></param>
    </member>
    <member name="M:BattleCardTotalResult.SetRolldiceEvent(BattleCardBehaviourResult.BehaviourEvent)">
      <summary></summary>
      <param name="e"></param>
    </member>
    <member name="M:BattleCardTotalResult.SetSkip(DiceUITiming)">
      <summary></summary>
      <param name="timing"></param>
    </member>
    <member name="M:BattleCardTotalResult.SetSucceedAtkEvent(BattleCardBehaviourResult.BehaviourEvent)">
      <summary></summary>
      <param name="e"></param>
    </member>
    <member name="M:BattleCardTotalResult.SetSucceedDefEvent(BattleCardBehaviourResult.BehaviourEvent)">
      <summary></summary>
      <param name="e"></param>
    </member>
    <member name="M:BattleCardTotalResult.SetTakeDamagedEvent(BattleCardBehaviourResult.BehaviourEvent)">
      <summary></summary>
      <param name="e"></param>
    </member>
    <member name="M:BattleCardTotalResult.SetUseCardEvent(BattleCardBehaviourResult.BehaviourEvent)">
      <summary></summary>
      <param name="e"></param>
    </member>
    <member name="M:BattleCardTotalResult.SetVanillaDiceFace(System.Int32,System.Int32)">
      <summary></summary>
      <param name="min"></param>
      <param name="max"></param>
    </member>
    <member name="M:BattleCardTotalResult.SetVanillaDiceValue(System.Int32)">
      <summary></summary>
      <param name="value"></param>
    </member>
    <member name="P:BattleCardTotalResult.BehaviourResultList">
      <summary></summary>
    </member>
    <member name="P:BattleCardTotalResult.BehaviourResultQueue">
      <summary></summary>
    </member>
    <member name="P:BattleCardTotalResult.CurbehaviourResult">
      <summary></summary>
    </member>
    <member name="T:BattleDiceBehavior">
      <summary>バトル ダイスの振る舞いを操作する機能を提供します。</summary>
    </member>
    <member name="F:BattleDiceBehavior._damageReductionByGuard">
      <summary></summary>
    </member>
    <member name="F:BattleDiceBehavior._diceDestroyed">
      <summary></summary>
    </member>
    <member name="F:BattleDiceBehavior._diceResultValue">
      <summary></summary>
    </member>
    <member name="F:BattleDiceBehavior._flags">
      <summary></summary>
    </member>
    <member name="F:BattleDiceBehavior._ignoreKnockback">
      <summary></summary>
    </member>
    <member name="F:BattleDiceBehavior._isParrying">
      <summary></summary>
    </member>
    <member name="F:BattleDiceBehavior._targetDice">
      <summary></summary>
    </member>
    <member name="F:BattleDiceBehavior.abilityList">
      <summary>このバトル ダイスに付与された効果のリスト</summary>
    </member>
    <member name="F:BattleDiceBehavior.behaviourInCard">
      <summary></summary>
    </member>
    <member name="F:BattleDiceBehavior.breakState">
      <summary></summary>
    </member>
    <member name="F:BattleDiceBehavior.card">
      <summary>このバトル ダイスを所有するバトル ページ</summary>
    </member>
    <member name="F:BattleDiceBehavior.destroyedTiming">
      <summary></summary>
    </member>
    <member name="F:BattleDiceBehavior.forbiddenBonusDice">
      <summary></summary>
    </member>
    <member name="F:BattleDiceBehavior.isBonusAttack">
      <summary></summary>
    </member>
    <member name="F:BattleDiceBehavior.isBonusEvasion">
      <summary></summary>
    </member>
    <member name="F:BattleDiceBehavior.isUsed">
      <summary></summary>
    </member>
    <member name="F:BattleDiceBehavior.passingEvasion">
      <summary></summary>
    </member>
    <member name="F:BattleDiceBehavior.winAgainstFarAtk">
      <summary></summary>
    </member>
    <member name="M:BattleDiceBehavior.#ctor">
      <summary></summary>
    </member>
    <member name="M:BattleDiceBehavior.AddAbility(DiceCardAbilityBase)">
      <summary></summary>
      <param name="ability"></param>
    </member>
    <member name="M:BattleDiceBehavior.AddDiceFace(System.Int32)">
      <summary></summary>
      <param name="value"></param>
    </member>
    <member name="M:BattleDiceBehavior.AddFlag(DiceFlag)">
      <summary></summary>
      <param name="flag"></param>
    </member>
    <member name="M:BattleDiceBehavior.ApplyDiceStatBonus(DiceStatBonus)">
      <summary>指定したボーナス値をバトル ダイスに適用します。</summary>
      <param name="bonus">バトル ダイスに適用するボーナス値。</param>
    </member>
    <member name="M:BattleDiceBehavior.BeforeRollDice(BattleDiceBehavior)">
      <summary></summary>
      <param name="targetDice"></param>
    </member>
    <member name="M:BattleDiceBehavior.CheckUsedBehaviourState">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceBehavior.CopyAbilityAndStat(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleDiceBehavior.DestroyDice(DiceUITiming)">
      <summary></summary>
      <param name="timing"></param>
    </member>
    <member name="M:BattleDiceBehavior.GetDiceMax">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceBehavior.GetDiceMin">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceBehavior.GetDiceVanillaMax">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceBehavior.GetDiceVanillaMin">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceBehavior.GetScope">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceBehavior.GiveDamage(BattleUnitModel)">
      <summary></summary>
      <param name="target"></param>
    </member>
    <member name="M:BattleDiceBehavior.GiveDeflectDamage(BattleDiceBehavior)">
      <summary></summary>
      <param name="targetDice"></param>
    </member>
    <member name="M:BattleDiceBehavior.HasFlag(DiceFlag)">
      <summary></summary>
      <param name="flag"></param>
      <returns></returns>
    </member>
    <member name="M:BattleDiceBehavior.IsParrying">
      <summary>マッチ状態である事を示します。</summary>
      <returns>マッチ状態の場合は true、そうでない場合、つまり一方攻撃状態の場合は false を返します。</returns>
    </member>
    <member name="M:BattleDiceBehavior.OnEndFarAreaBehaviourAtk(System.Collections.Generic.List{BattleUnitModel},System.Collections.Generic.List{BattleUnitModel})">
      <summary></summary>
      <param name="damagedList"></param>
      <param name="defensedList"></param>
    </member>
    <member name="M:BattleDiceBehavior.OnEventDiceAbility(DiceCardAbilityBase.DiceCardPassiveType,BattleUnitModel)">
      <summary></summary>
      <param name="dicePassiveType"></param>
      <param name="target"></param>
    </member>
    <member name="M:BattleDiceBehavior.RollDice">
      <summary></summary>
    </member>
    <member name="M:BattleDiceBehavior.SetBlocked(System.Boolean)">
      <summary></summary>
      <param name="b"></param>
    </member>
    <member name="M:BattleDiceBehavior.SetDamageRedution(System.Int32)">
      <summary></summary>
      <param name="value"></param>
    </member>
    <member name="M:BattleDiceBehavior.SetDiceEffect(DiceEffectType)">
      <summary></summary>
      <param name="type"></param>
    </member>
    <member name="M:BattleDiceBehavior.SetIndex(System.Int32)">
      <summary></summary>
      <param name="index"></param>
    </member>
    <member name="M:BattleDiceBehavior.UpdateDiceFinalValue">
      <summary></summary>
    </member>
    <member name="P:BattleDiceBehavior.BreakAdder">
      <summary></summary>
    </member>
    <member name="P:BattleDiceBehavior.DamageAdder">
      <summary></summary>
    </member>
    <member name="P:BattleDiceBehavior.Detail">
      <summary>バトル ダイスの振る舞いの詳細を取得します。</summary>
    </member>
    <member name="P:BattleDiceBehavior.DiceDestroyed">
      <summary></summary>
    </member>
    <member name="P:BattleDiceBehavior.DiceFaceAdder">
      <summary></summary>
    </member>
    <member name="P:BattleDiceBehavior.DiceResultDamage">
      <summary></summary>
    </member>
    <member name="P:BattleDiceBehavior.DiceResultValue">
      <summary>威力のボーナス値が適用された後のダイス値を取得します。</summary>
    </member>
    <member name="P:BattleDiceBehavior.DiceVanillaValue">
      <summary>威力のボーナス値が適用される前のダイス値を取得します。</summary>
    </member>
    <member name="P:BattleDiceBehavior.EffectType">
      <summary></summary>
    </member>
    <member name="P:BattleDiceBehavior.GuardBreakAdder">
      <summary></summary>
    </member>
    <member name="P:BattleDiceBehavior.GuardBreakMultiplier">
      <summary></summary>
    </member>
    <member name="P:BattleDiceBehavior.Index">
      <summary></summary>
    </member>
    <member name="P:BattleDiceBehavior.IsBlocked">
      <summary></summary>
    </member>
    <member name="P:BattleDiceBehavior.owner">
      <summary>バトル ダイスの振る舞いの所有キャラクターを取得します。</summary>
    </member>
    <member name="P:BattleDiceBehavior.PowerAdder">
      <summary></summary>
    </member>
    <member name="P:BattleDiceBehavior.TargetDice">
      <summary></summary>
    </member>
    <member name="P:BattleDiceBehavior.Type">
      <summary></summary>
    </member>
    <member name="T:BattleDiceCardBuf">
      <summary>バトル ページに付与する状態を表します。</summary>
    </member>
    <member name="F:BattleDiceCardBuf._card">
      <summary></summary>
    </member>
    <member name="F:BattleDiceCardBuf._priority">
      <summary></summary>
    </member>
    <member name="F:BattleDiceCardBuf._stack">
      <summary></summary>
    </member>
    <member name="M:BattleDiceCardBuf.#ctor">
      <summary></summary>
    </member>
    <member name="M:BattleDiceCardBuf.Destroy">
      <summary>次の幕からこのバトル ページ状態を破棄します。</summary>
    </member>
    <member name="M:BattleDiceCardBuf.GetBufIcon">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardBuf.GetCost(System.Int32)">
      <summary></summary>
      <param name="oldCost"></param>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardBuf.Init(BattleDiceCardModel)">
      <summary></summary>
      <param name="card"></param>
    </member>
    <member name="M:BattleDiceCardBuf.IsDestroyed">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardBuf.OnAddKeywordBufByCard(BattleUnitBuf,System.Int32)">
      <summary></summary>
      <param name="cardBuf"></param>
      <param name="stack"></param>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardBuf.OnDiscard(BattleUnitModel,BattleDiceCardModel)">
      <summary></summary>
      <param name="owner"></param>
      <param name="card"></param>
    </member>
    <member name="M:BattleDiceCardBuf.OnDrawCard">
      <summary></summary>
    </member>
    <member name="M:BattleDiceCardBuf.OnGiveKeywordBufByCard(BattleUnitBuf,System.Int32,BattleUnitModel)">
      <summary></summary>
      <param name="cardBuf"></param>
      <param name="stack"></param>
      <param name="target"></param>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardBuf.OnRoundEnd">
      <summary>幕の終了時に呼び出されます。</summary>
    </member>
    <member name="M:BattleDiceCardBuf.OnRoundStart">
      <summary>幕の開始時に呼び出されます。</summary>
    </member>
    <member name="M:BattleDiceCardBuf.OnUseCard(BattleUnitModel)">
      <summary>バトル ページが使用される時に呼び出されます。</summary>
      <param name="owner">使用されるバトル ページの所有キャラクター。</param>
    </member>
    <member name="M:BattleDiceCardBuf.OnUseCard(BattleUnitModel,BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="owner"></param>
      <param name="playingCard"></param>
    </member>
    <member name="P:BattleDiceCardBuf.bufActivatedText">
      <summary></summary>
    </member>
    <member name="P:BattleDiceCardBuf.bufType">
      <summary></summary>
    </member>
    <member name="P:BattleDiceCardBuf.keywordIconId">
      <summary>アイコン表示用のキーワードを取得します。</summary>
    </member>
    <member name="P:BattleDiceCardBuf.keywordId">
      <summary>ヘルプ メッセージ用のキーワードを取得します。_EffectTexts.txt の ID では「"CardBuf_" + キーワード名」とする必要があります。</summary>
    </member>
    <member name="P:BattleDiceCardBuf.paramInBufDesc">
      <summary>ヘルプ メッセージに含まれる書式指定文字列 ({0}) に渡す数値を取得します。</summary>
    </member>
    <member name="P:BattleDiceCardBuf.Priority">
      <summary></summary>
    </member>
    <member name="P:BattleDiceCardBuf.Stack">
      <summary></summary>
    </member>
    <member name="T:BattleDiceCardModel">
      <summary>バトル ページを表します。</summary>
    </member>
    <member name="F:BattleDiceCardModel.costSpended">
      <summary></summary>
    </member>
    <member name="F:BattleDiceCardModel.exhaust">
      <summary></summary>
    </member>
    <member name="F:BattleDiceCardModel.isCopiedCard">
      <summary></summary>
    </member>
    <member name="F:BattleDiceCardModel.owner">
      <summary>バトル ページの所有キャラクター</summary>
    </member>
    <member name="F:BattleDiceCardModel.temporary">
      <summary></summary>
    </member>
    <member name="M:BattleDiceCardModel.#ctor">
      <summary></summary>
    </member>
    <member name="M:BattleDiceCardModel.AddBuf(BattleDiceCardBuf)">
      <summary>指定したバトル ページ状態をバトル ページに追加し、初期化処理を呼び出します。</summary>
      <param name="buf">バトル ページに追加し、初期化処理を呼び出すバトル ページ状態。</param>
    </member>
    <member name="M:BattleDiceCardModel.AddBufWithoutDuplication(BattleDiceCardBuf)">
      <summary></summary>
      <param name="buf"></param>
    </member>
    <member name="M:BattleDiceCardModel.AddCoolTime(System.Single)">
      <summary></summary>
      <param name="value"></param>
    </member>
    <member name="M:BattleDiceCardModel.AddCost(System.Int32)">
      <summary>指定した値だけコスト補正値を加算します。</summary>
      <param name="cost">加算する値。</param>
    </member>
    <member name="M:BattleDiceCardModel.CanAddedEgoCard">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.ChangeFarToNearForMyo">
      <summary></summary>
    </member>
    <member name="M:BattleDiceCardModel.CheckDestroyedBuf">
      <summary></summary>
    </member>
    <member name="M:BattleDiceCardModel.CopySelf">
      <summary></summary>
    </member>
    <member name="M:BattleDiceCardModel.CreateDiceCardBehaviorList">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.CreateDiceCardSelfAbilityScript">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.CreatePlayingCard(LOR_DiceSystem.DiceCardXmlInfo)">
      <summary>指定したバトル ページの XML データからバトル ページのインスタンスを生成します。</summary>
      <param name="cardInfo">生成するバトル ページの XML データ。</param>
      <returns>バトル ページのインスタンス。</returns>
    </member>
    <member name="M:BattleDiceCardModel.GetAddedIcon(System.Int32)">
      <summary></summary>
      <param name="idx"></param>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.GetArtworkSrc">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.GetBehaviourList">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.GetBufList">
      <summary>付与されたバトル ページ状態リストを取得します。</summary>
      <returns>バトル ページ状態リスト。</returns>
    </member>
    <member name="M:BattleDiceCardModel.GetBufWithMostPriority">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.GetCategory">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.GetCost">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.GetGrade">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.GetID">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.GetMap">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.GetName">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.GetOriginCost">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.GetPriority(System.Int32)">
      <summary></summary>
      <param name="speed"></param>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.GetPriorityAdder">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.GetRarity">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.GetSkin">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.GetSkinHeight">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.GetSkinType">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.GetSpec">
      <summary>バトル ページのスペックを取得します。</summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.GetTextId">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.HasBuf``1">
      <summary>指定した型のバトル ページ状態がバトル ページに付与されている事を判定します。</summary>
      <typeparam name="T">付与されている事を判定するバトル ページ状態の型。</typeparam>
      <returns>指定した型のバトル ページ状態が付与されている場合は true、そうでない場合は false を返します。</returns>
    </member>
    <member name="M:BattleDiceCardModel.IsExhaustOnUse">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.IsOnlyAllyUnit">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.IsTargetableAllUnit">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.IsTargetableSelf">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.IsValidTarget(BattleUnitModel,BattleDiceCardModel,BattleUnitModel)">
      <summary></summary>
      <param name="unit"></param>
      <param name="self"></param>
      <param name="targetUnit"></param>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.OnAddKeywordBufByCard(BattleUnitBuf,System.Int32)">
      <summary></summary>
      <param name="targetBuf"></param>
      <param name="stack"></param>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.OnBreakState_inHand(BattleUnitModel)">
      <summary></summary>
      <param name="unit"></param>
    </member>
    <member name="M:BattleDiceCardModel.OnDiscard(BattleUnitModel,BattleDiceCardModel)">
      <summary></summary>
      <param name="owner"></param>
      <param name="card"></param>
    </member>
    <member name="M:BattleDiceCardModel.OnDrawCard">
      <summary></summary>
    </member>
    <member name="M:BattleDiceCardModel.OnGiveKeywordBufByCard(BattleUnitBuf,System.Int32,BattleUnitModel)">
      <summary></summary>
      <param name="targetBuf"></param>
      <param name="stack"></param>
      <param name="target"></param>
      <returns></returns>
    </member>
    <member name="M:BattleDiceCardModel.OnLoseParrying_inHand(BattleUnitModel,BattleDiceBehavior)">
      <summary></summary>
      <param name="unit"></param>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleDiceCardModel.OnRoundEnd(BattleUnitModel)">
      <summary></summary>
      <param name="unit"></param>
    </member>
    <member name="M:BattleDiceCardModel.OnRoundEnd">
      <summary>幕の終了時に呼び出されます。</summary>
    </member>
    <member name="M:BattleDiceCardModel.OnRoundEnd_inHand(BattleUnitModel)">
      <summary></summary>
      <param name="unit"></param>
    </member>
    <member name="M:BattleDiceCardModel.OnRoundStart">
      <summary>幕の開始時に呼び出されます。</summary>
    </member>
    <member name="M:BattleDiceCardModel.OnRoundStart_inHand(BattleUnitModel)">
      <summary>幕の開始時、バトル ページが手札にある場合に呼び出されます。</summary>
      <param name="unit">バトル ページを所有するキャラクター。</param>
    </member>
    <member name="M:BattleDiceCardModel.OnUseCard(BattleUnitModel,BattlePlayingCardDataInUnitModel)">
      <summary>バトル ページが使用される時に呼び出されます。</summary>
      <param name="owner">使用されるバトル ページの所有キャラクター。</param>
      <param name="playingCard"></param>
    </member>
    <member name="M:BattleDiceCardModel.OnUseOtherCard_inHand(BattleUnitModel,BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="unit"></param>
      <param name="curCard"></param>
    </member>
    <member name="M:BattleDiceCardModel.OnWinParrying_inHand(BattleUnitModel,BattleDiceBehavior)">
      <summary></summary>
      <param name="unit"></param>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleDiceCardModel.RemoveAddedIcon(System.String,System.Int32)">
      <summary></summary>
      <param name="resName"></param>
      <param name="priority"></param>
    </member>
    <member name="M:BattleDiceCardModel.RemoveBuf(BattleDiceCardBuf)">
      <summary></summary>
      <param name="buf"></param>
    </member>
    <member name="M:BattleDiceCardModel.RemoveBuf``1">
      <summary></summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:BattleDiceCardModel.ReserveExhaust">
      <summary></summary>
    </member>
    <member name="M:BattleDiceCardModel.ResetCoolTime">
      <summary></summary>
    </member>
    <member name="M:BattleDiceCardModel.ResetToOriginalData">
      <summary></summary>
    </member>
    <member name="M:BattleDiceCardModel.SetAddedIcon(System.String,System.Int32)">
      <summary></summary>
      <param name="resName"></param>
      <param name="priority"></param>
    </member>
    <member name="M:BattleDiceCardModel.SetCostToZero(System.Boolean)">
      <summary>補正前コストを 0 にする事を示す値を設定します。補正前コストとは、バトル ページ状態、幻想体ページ、状態、バトル ページ効果およびバトル ページのコスト補正値によるコスト補正計算をする前のコストを指します。</summary>
      <param name="zero">補正前コストを 0 にする場合は true、本来の補正前コストのままの場合は false。</param>
    </member>
    <member name="M:BattleDiceCardModel.SetCurrentCost(System.Int32)">
      <summary></summary>
      <param name="cost"></param>
    </member>
    <member name="M:BattleDiceCardModel.SetCurrentCostMax">
      <summary></summary>
    </member>
    <member name="M:BattleDiceCardModel.SetMaxCooltime">
      <summary></summary>
    </member>
    <member name="M:BattleDiceCardModel.SetPriorityAdder(System.Int32)">
      <summary>指定した値でバトル ページの使用優先度を設定します。</summary>
      <param name="v">設定する使用優先度。</param>
    </member>
    <member name="P:BattleDiceCardModel.CurCost">
      <summary></summary>
    </member>
    <member name="P:BattleDiceCardModel.CurrentCooltimeValue">
      <summary></summary>
    </member>
    <member name="P:BattleDiceCardModel.MaxCooltimeValue">
      <summary></summary>
    </member>
    <member name="P:BattleDiceCardModel.XmlData">
      <summary></summary>
    </member>
    <member name="T:BattleObjectManager">
      <summary>キャラクターなどのオブジェクトを管理します。</summary>
    </member>
    <member name="M:BattleObjectManager.#ctor">
      <summary></summary>
    </member>
    <member name="M:BattleObjectManager.Clear">
      <summary></summary>
    </member>
    <member name="M:BattleObjectManager.CreateDefaultUnit(Faction)">
      <summary></summary>
      <param name="faction"></param>
      <returns></returns>
    </member>
    <member name="M:BattleObjectManager.ExistsUnit(System.Predicate{BattleUnitModel})">
      <summary></summary>
      <param name="match"></param>
      <returns></returns>
    </member>
    <member name="M:BattleObjectManager.GetAccumulatedEmotionCoinAvr(Faction)">
      <summary></summary>
      <param name="faction"></param>
      <returns></returns>
    </member>
    <member name="M:BattleObjectManager.GetAccumulatedEmotionCoinSum(Faction)">
      <summary></summary>
      <param name="faction"></param>
      <returns></returns>
    </member>
    <member name="M:BattleObjectManager.GetAliveList(System.Boolean)">
      <summary>敵味方を含めた現在の生存キャラクターを取得します。</summary>
      <param name="includeKnockout">ノックアウト状態のキャラクターを生存キャラクターとして含めることを示す値。</param>
      <returns>敵味方を含めた現在の生存キャラクターのコレクション。</returns>
    </member>
    <member name="M:BattleObjectManager.GetAliveList(Faction)">
      <summary>指定した派閥に所属する現在の生存キャラクターを取得します。</summary>
      <param name="faction">取得する敵または味方の派閥。</param>
      <returns>指定した派閥に所属する現在の生存キャラクターのコレクション。</returns>
    </member>
    <member name="M:BattleObjectManager.GetAliveList_opponent(Faction)">
      <summary>指定した派閥の相手側の派閥に所属する現在の生存キャラクターを取得します。</summary>
      <param name="faction">取得する敵または味方の派閥。</param>
      <returns>指定した派閥の相手側の派閥に所属する現在の生存キャラクターのコレクション</returns>
    </member>
    <member name="M:BattleObjectManager.GetAliveList_random(Faction,System.Int32)">
      <summary></summary>
      <param name="faction"></param>
      <param name="count"></param>
      <returns></returns>
    </member>
    <member name="M:BattleObjectManager.GetAliveListExceptFaction(Faction)">
      <summary></summary>
      <param name="faction"></param>
      <returns></returns>
    </member>
    <member name="M:BattleObjectManager.GetAliveListWithAvailable(Faction)">
      <summary></summary>
      <param name="faction"></param>
      <returns></returns>
    </member>
    <member name="M:BattleObjectManager.GetAverageHP">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleObjectManager.GetAverageHP(Faction)">
      <summary></summary>
      <param name="faction"></param>
      <returns></returns>
    </member>
    <member name="M:BattleObjectManager.GetEmotionGaugeMax">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleObjectManager.GetFarOppositeTarget(BattleUnitModel)">
      <summary></summary>
      <param name="actor"></param>
      <returns></returns>
    </member>
    <member name="M:BattleObjectManager.GetFriendlyAllList(Faction)">
      <summary></summary>
      <param name="faction"></param>
      <returns></returns>
    </member>
    <member name="M:BattleObjectManager.GetLevelUpList(Faction)">
      <summary></summary>
      <param name="faction"></param>
      <returns></returns>
    </member>
    <member name="M:BattleObjectManager.GetList">
      <summary>敵味方を含めたこの舞台での参加キャラクターを取得します。キャラクターの生存状態は問いません。</summary>
      <returns>敵味方を含めたこの舞台での参加キャラクターのコレクション。</returns>
    </member>
    <member name="M:BattleObjectManager.GetList(Faction)">
      <summary>指定した派閥に所属するこの舞台での参加キャラクターを取得します。キャラクターの生存状態は問いません。</summary>
      <param name="faction">取得する敵または味方の派閥。</param>
      <returns>指定した派閥に所属するこの舞台での参加キャラクターのコレクション。</returns>
    </member>
    <member name="M:BattleObjectManager.GetList(System.Predicate{BattleUnitModel})">
      <summary></summary>
      <param name="match"></param>
      <returns></returns>
    </member>
    <member name="M:BattleObjectManager.GetNearOppositeTarget(BattleUnitModel)">
      <summary></summary>
      <param name="actor"></param>
      <returns></returns>
    </member>
    <member name="M:BattleObjectManager.GetNearRandomTarget(BattleUnitModel)">
      <summary></summary>
      <param name="actor"></param>
      <returns></returns>
    </member>
    <member name="M:BattleObjectManager.GetRandomTarget">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleObjectManager.GetRandomTarget(Faction)">
      <summary></summary>
      <param name="faction"></param>
      <returns></returns>
    </member>
    <member name="M:BattleObjectManager.GetTargetByCard(BattleUnitModel,BattleDiceCardModel,System.Int32,System.Boolean)">
      <summary>指定した行動キャラクターが使用する指定したバトル ページから対象キャラクターを取得します。</summary>
      <param name="actor">行動キャラクター。</param>
      <param name="card">行動キャラクターが使用するバトル ページ。</param>
      <param name="idx">使用するバトル ページがセットされた速度ダイス スロット番号。</param>
      <param name="teamkill">対象キャラクターの候補に</param>
      <returns>使用するバトル ページの対象キャラクター。</returns>
    </member>
    <member name="M:BattleObjectManager.GetTargetByCardForPlayer(BattleUnitModel,BattleDiceCardModel,System.Int32,System.Boolean)">
      <summary></summary>
      <param name="actor"></param>
      <param name="card"></param>
      <param name="idx"></param>
      <param name="teamkill"></param>
      <returns></returns>
    </member>
    <member name="M:BattleObjectManager.GetTargetByIndex(System.Int32)">
      <summary></summary>
      <param name="index"></param>
      <returns></returns>
    </member>
    <member name="M:BattleObjectManager.GetTotalHP">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleObjectManager.GetUnitWithIndex(Faction,System.Int32)">
      <summary></summary>
      <param name="faction"></param>
      <param name="index"></param>
      <returns></returns>
    </member>
    <member name="M:BattleObjectManager.Init_only">
      <summary></summary>
    </member>
    <member name="M:BattleObjectManager.InitBehaviorTree(BattleUnitModel)">
      <summary></summary>
      <param name="model"></param>
    </member>
    <member name="M:BattleObjectManager.InitUI">
      <summary></summary>
    </member>
    <member name="M:BattleObjectManager.OnFixedUpdate(System.Single)">
      <summary></summary>
      <param name="deltaTime"></param>
    </member>
    <member name="M:BattleObjectManager.OnUpdate">
      <summary></summary>
    </member>
    <member name="M:BattleObjectManager.RegisterUnit(BattleUnitModel)">
      <summary></summary>
      <param name="unit"></param>
    </member>
    <member name="M:BattleObjectManager.UnregisterUnit(BattleUnitModel)">
      <summary></summary>
      <param name="unit"></param>
    </member>
    <member name="M:BattleObjectManager.UnregisterUnitByIndex(Faction,System.Int32)">
      <summary></summary>
      <param name="faction"></param>
      <param name="index"></param>
    </member>
    <member name="P:BattleObjectManager.instance">
      <summary>このクラスの既定のインスタンスを取得します。</summary>
    </member>
    <member name="T:BattlePlayingCardDataInUnitModel">
      <summary>キャラクターが戦闘で使用する時のバトル ページのデータを表します。</summary>
    </member>
    <member name="F:BattlePlayingCardDataInUnitModel.card">
      <summary>バトル ページ</summary>
    </member>
    <member name="F:BattlePlayingCardDataInUnitModel.cardAbility">
      <summary>バトル ページ効果</summary>
    </member>
    <member name="F:BattlePlayingCardDataInUnitModel.cardBehaviorQueue">
      <summary>ストックされているバトル ダイスの振る舞いのキュー</summary>
    </member>
    <member name="F:BattlePlayingCardDataInUnitModel.currentBehavior">
      <summary>現在のバトル ダイスの振る舞い</summary>
    </member>
    <member name="F:BattlePlayingCardDataInUnitModel.currentBehaviorUI">
      <summary></summary>
    </member>
    <member name="F:BattlePlayingCardDataInUnitModel.earlyTarget">
      <summary>初期選択されたバトル ページの対象キャラクター</summary>
    </member>
    <member name="F:BattlePlayingCardDataInUnitModel.earlyTargetOrder">
      <summary>初期選択されたバトル ページの対象キャラクターの速度ダイス スロット番号</summary>
    </member>
    <member name="F:BattlePlayingCardDataInUnitModel.emotionMultiplier">
      <summary></summary>
    </member>
    <member name="F:BattlePlayingCardDataInUnitModel.ignorePower">
      <summary>威力の影響を受けないことを示す値</summary>
    </member>
    <member name="F:BattlePlayingCardDataInUnitModel.isFirstAction">
      <summary></summary>
    </member>
    <member name="F:BattlePlayingCardDataInUnitModel.isKeepedCard">
      <summary></summary>
    </member>
    <member name="F:BattlePlayingCardDataInUnitModel.owner">
      <summary>バトル ページの所有キャラクター</summary>
    </member>
    <member name="F:BattlePlayingCardDataInUnitModel.slotOrder">
      <summary></summary>
    </member>
    <member name="F:BattlePlayingCardDataInUnitModel.speedDiceResultValue">
      <summary></summary>
    </member>
    <member name="F:BattlePlayingCardDataInUnitModel.subTargets">
      <summary></summary>
    </member>
    <member name="F:BattlePlayingCardDataInUnitModel.target">
      <summary>バトル ページの対象キャラクター</summary>
    </member>
    <member name="F:BattlePlayingCardDataInUnitModel.targetSlotOrder">
      <summary></summary>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.#ctor">
      <summary></summary>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.ActivateActionStart">
      <summary></summary>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.ActivateAttackActionUpdate(System.Single)">
      <summary></summary>
      <param name="deltaTime"></param>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.AddCurBehaviorToQueueFirst">
      <summary></summary>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.AddDice(BattleDiceBehavior)">
      <summary></summary>
      <param name="diceBehavior"></param>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.AddDiceAdder(System.Predicate{DiceMatch},System.Int32)">
      <summary></summary>
      <param name="match"></param>
      <param name="adder"></param>
      <returns></returns>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.AddDiceFace(System.Predicate{DiceMatch},System.Int32)">
      <summary></summary>
      <param name="match"></param>
      <param name="adder"></param>
      <returns></returns>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.AddDiceFront(BattleDiceBehavior)">
      <summary></summary>
      <param name="diceBehavior"></param>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.AddDiceMaxValue(System.Predicate{DiceMatch},System.Int32)">
      <summary></summary>
      <param name="match"></param>
      <param name="adder"></param>
      <returns></returns>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.AddExcludedDices(System.Collections.Generic.List{System.Int32})">
      <summary></summary>
      <param name="excludedIndies"></param>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.AfterAction">
      <summary></summary>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.ApplyDiceAbility(System.Predicate{DiceMatch},DiceCardAbilityBase)">
      <summary></summary>
      <param name="match"></param>
      <param name="ability"></param>
      <returns></returns>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.ApplyDiceStatBonus(System.Predicate{DiceMatch},DiceStatBonus)">
      <summary>指定したマッチ状態のバトル ダイスに対して、指定したボーナス値を適用します。</summary>
      <param name="match">ボーナス値を適用するバトル ダイスのマッチ状態。</param>
      <param name="bonus">バトル ダイスに適用するボーナス値。</param>
      <returns>ボーナスが適用されたバトル ダイスの数。</returns>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.BeforeGiveDamage(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.BeforeRollDice(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.ChangeSubTargetToMainTarget">
      <summary></summary>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.CopyDiceBehaviour(BattleDiceBehavior)">
      <summary></summary>
      <param name="battleDiceBehavior"></param>
      <returns></returns>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.DequeueAbility">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.DequeueAbilityTest">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.DestroyDice(System.Predicate{DiceMatch},DiceUITiming)">
      <summary></summary>
      <param name="match"></param>
      <param name="timing"></param>
      <returns></returns>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.DestroyDice(System.Comparison{DiceMatch},DiceUITiming)">
      <summary></summary>
      <param name="comparison"></param>
      <param name="timing"></param>
      <returns></returns>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.DestroyPlayingCard">
      <summary></summary>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.FindOne(System.Comparison{DiceMatch},BattlePlayingCardDataInUnitModel.ForeachAction)">
      <summary></summary>
      <param name="comparison"></param>
      <param name="action"></param>
      <returns></returns>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.ForeachQueue(System.Predicate{DiceMatch},BattlePlayingCardDataInUnitModel.ForeachAction)">
      <summary></summary>
      <param name="match"></param>
      <param name="action"></param>
      <returns></returns>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.GetCardAffection">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.GetDiceBehaviorList">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.GetDiceBehaviourXmlList">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.GetOriginalDiceBehaviorList">
      <summary>オリジナルのバトル ダイスに対するビヘイビア (振る舞いを操作するオブジェクト) のリストを取得します。</summary>
      <returns>バトル ダイスに対するビヘイビアのリスト</returns>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.GetRemainingAbilityCount">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.NextDice">
      <summary>ストックされているバトル ダイスの振る舞いのキューから次に使用するバトル ダイスを <see cref="F:BattlePlayingCardDataInUnitModel.currentBehavior" /> に設定します。</summary>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.OnActivateResonance">
      <summary></summary>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.OnDefenseWithoutParryingWin">
      <summary></summary>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.OnDrawParrying">
      <summary></summary>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.OnEndAreaAttack">
      <summary></summary>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.OnEndBattle">
      <summary></summary>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.OnLoseParrying">
      <summary></summary>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.OnRollDice(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.OnStandbyBehaviour">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.OnStartBattle">
      <summary></summary>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.OnStartBattleAfterCreateBehaviour">
      <summary></summary>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.OnStartOneSideAction">
      <summary></summary>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.OnStartParrying">
      <summary></summary>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.OnSucceedAreaAttack(BattleUnitModel)">
      <summary></summary>
      <param name="target"></param>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.OnSucceedAtkEvent">
      <summary></summary>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.OnSucceedAttack(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.OnSucceedDefEvent">
      <summary></summary>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.OnUseCard">
      <summary>バトル ページが使用される時に呼び出されます。</summary>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.OnUseCard_before">
      <summary></summary>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.OnWinParryingAttack">
      <summary></summary>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.OnWinParryingDefense">
      <summary></summary>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.PrepareAction">
      <summary></summary>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.RemoveAllDice">
      <summary></summary>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.ResetCardQueue">
      <summary></summary>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.ResetCardQueueWithoutStandby">
      <summary></summary>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.ResetExcludedDices">
      <summary></summary>
    </member>
    <member name="M:BattlePlayingCardDataInUnitModel.SetDiceEffect(System.Predicate{DiceMatch},DiceEffectType)">
      <summary></summary>
      <param name="match"></param>
      <param name="effectType"></param>
      <returns></returns>
    </member>
    <member name="P:BattlePlayingCardDataInUnitModel.isDestroyed">
      <summary></summary>
    </member>
    <member name="T:BattlePlayingCardSlotDetail">
      <summary>戦闘で使用するバトル ページ枠の詳細を表します。</summary>
    </member>
    <member name="F:BattlePlayingCardSlotDetail.cardAry">
      <summary></summary>
    </member>
    <member name="F:BattlePlayingCardSlotDetail.cardQueue">
      <summary></summary>
    </member>
    <member name="F:BattlePlayingCardSlotDetail.keepCard">
      <summary></summary>
    </member>
    <member name="M:BattlePlayingCardSlotDetail.#ctor(BattleUnitModel)">
      <summary></summary>
      <param name="self"></param>
    </member>
    <member name="M:BattlePlayingCardSlotDetail.AddCard(BattleDiceCardModel,BattleUnitModel,System.Int32,System.Boolean)">
      <summary></summary>
      <param name="card"></param>
      <param name="target"></param>
      <param name="targetSlot"></param>
      <param name="isEnemyAuto"></param>
    </member>
    <member name="M:BattlePlayingCardSlotDetail.ArrangeCardOrder">
      <summary></summary>
    </member>
    <member name="M:BattlePlayingCardSlotDetail.ClearCardAbility">
      <summary></summary>
    </member>
    <member name="M:BattlePlayingCardSlotDetail.DestroyCard(System.Int32)">
      <summary></summary>
      <param name="count"></param>
    </member>
    <member name="M:BattlePlayingCardSlotDetail.DestroyCardAll">
      <summary></summary>
    </member>
    <member name="M:BattlePlayingCardSlotDetail.DestroyCardByIdx(System.Int32)">
      <summary></summary>
      <param name="idx"></param>
    </member>
    <member name="M:BattlePlayingCardSlotDetail.DestroyCardWithoutCurrentAction(System.Int32)">
      <summary></summary>
      <param name="count"></param>
    </member>
    <member name="M:BattlePlayingCardSlotDetail.GetMaxPlayPoint">
      <summary>光の最大値を取得します。</summary>
      <returns>キャラクターのパッシブや状態等によるボーナス値が加味された光の最大値。</returns>
    </member>
    <member name="M:BattlePlayingCardSlotDetail.GetRecoverPlayPoint">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattlePlayingCardSlotDetail.GetStartingPlayPoint">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattlePlayingCardSlotDetail.InitCardSlots(System.Int32)">
      <summary></summary>
      <param name="slotSize"></param>
    </member>
    <member name="M:BattlePlayingCardSlotDetail.LosePlayPoint(System.Int32)">
      <summary></summary>
      <param name="value"></param>
      <returns></returns>
    </member>
    <member name="M:BattlePlayingCardSlotDetail.LoseWhenStartRound(System.Int32)">
      <summary></summary>
      <param name="playPoint"></param>
    </member>
    <member name="M:BattlePlayingCardSlotDetail.OnApplyCard(BattleDiceCardModel)">
      <summary></summary>
      <param name="card"></param>
      <returns></returns>
    </member>
    <member name="M:BattlePlayingCardSlotDetail.OnRoundStart">
      <summary></summary>
    </member>
    <member name="M:BattlePlayingCardSlotDetail.RecoverPlayPoint(System.Int32)">
      <summary></summary>
      <param name="value"></param>
      <returns></returns>
    </member>
    <member name="M:BattlePlayingCardSlotDetail.RecoverPlayPointByCard(System.Int32)">
      <summary></summary>
      <param name="value"></param>
      <returns></returns>
    </member>
    <member name="M:BattlePlayingCardSlotDetail.ReserveCost(System.Int32)">
      <summary></summary>
      <param name="value"></param>
      <returns></returns>
    </member>
    <member name="M:BattlePlayingCardSlotDetail.ResetPlayPoint">
      <summary></summary>
    </member>
    <member name="M:BattlePlayingCardSlotDetail.SetDefaultRecoverPoint(System.Int32)">
      <summary></summary>
      <param name="value"></param>
    </member>
    <member name="M:BattlePlayingCardSlotDetail.SetNextRoundPlayPoint(System.Int32)">
      <summary></summary>
      <param name="pp"></param>
    </member>
    <member name="M:BattlePlayingCardSlotDetail.SetPlayPoint(System.Int32)">
      <summary>光の現在値を設定します。キャラクターの光の最大値や最小値に関係なく、指定した値そのままに設定します。</summary>
      <param name="value">設定する光の現在値。</param>
    </member>
    <member name="M:BattlePlayingCardSlotDetail.SetRecoverPoint(System.Int32)">
      <summary></summary>
      <param name="value"></param>
    </member>
    <member name="M:BattlePlayingCardSlotDetail.SetRecoverPointDefault">
      <summary></summary>
    </member>
    <member name="M:BattlePlayingCardSlotDetail.SpendCost(System.Int32)">
      <summary></summary>
      <param name="value"></param>
      <returns></returns>
    </member>
    <member name="P:BattlePlayingCardSlotDetail.PlayPoint">
      <summary>光の現在値を取得します。</summary>
    </member>
    <member name="P:BattlePlayingCardSlotDetail.ReservedPlayPoint">
      <summary></summary>
    </member>
    <member name="T:BattleUnitBreakDetail">
      <summary>混乱抵抗値の詳細を表します。</summary>
    </member>
    <member name="F:BattleUnitBreakDetail.blockRecoverBreakByEvaision">
      <summary></summary>
    </member>
    <member name="F:BattleUnitBreakDetail.breakGauge">
      <summary>現在の混乱抵抗値</summary>
    </member>
    <member name="F:BattleUnitBreakDetail.breakLife">
      <summary></summary>
    </member>
    <member name="F:BattleUnitBreakDetail.nextTurnBreak">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBreakDetail.#ctor(BattleUnitModel)">
      <summary></summary>
      <param name="self"></param>
    </member>
    <member name="M:BattleUnitBreakDetail.DestroyBreakPoint(BattleUnitModel)">
      <summary></summary>
      <param name="attacker"></param>
    </member>
    <member name="M:BattleUnitBreakDetail.GetDefaultBreakGauge">
      <summary>最大混乱抵抗値を取得します。</summary>
      <returns>キャラクターのパッシブや状態等によるボーナス値や補正率が加味された最大混乱抵抗値。</returns>
    </member>
    <member name="M:BattleUnitBreakDetail.IsBreakLifeZero">
      <summary>現在の混乱抵抗値が 0 である事を判定します。</summary>
      <returns>現在の混乱抵抗値が 0 の場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:BattleUnitBreakDetail.LoseBreakGauge(System.Int32)">
      <summary></summary>
      <param name="value"></param>
    </member>
    <member name="M:BattleUnitBreakDetail.LoseBreakLife(BattleUnitModel)">
      <summary></summary>
      <param name="attacker"></param>
    </member>
    <member name="M:BattleUnitBreakDetail.OnRecoverBreakByEvaision(System.Int32)">
      <summary></summary>
      <param name="value"></param>
    </member>
    <member name="M:BattleUnitBreakDetail.OnRoundEnd">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBreakDetail.OnRoundStart">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBreakDetail.RecoverBreak(System.Int32)">
      <summary>指定した値だけキャラクターの混乱抵抗値を回復します。</summary>
      <param name="value">回復する混乱抵抗値の数値。</param>
    </member>
    <member name="M:BattleUnitBreakDetail.RecoverBreakLife(System.Int32,System.Boolean)">
      <summary></summary>
      <param name="v"></param>
      <param name="ignore"></param>
    </member>
    <member name="M:BattleUnitBreakDetail.RecoverBreakWithoutEffect(System.Int32)">
      <summary></summary>
      <param name="value"></param>
    </member>
    <member name="M:BattleUnitBreakDetail.ResetBreakDefault">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBreakDetail.ResetGauge">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBreakDetail.TakeBreakDamage(System.Int32,DamageType,BattleUnitModel,AtkResist,KeywordBuf)">
      <summary>指定した値だけ混乱ダメージを受けます。</summary>
      <param name="damage">受ける混乱ダメージ量。</param>
      <param name="type">ダメージ元の種類。</param>
      <param name="attacker">攻撃キャラクター。</param>
      <param name="atkResist">混乱ダメージに対する属性耐性。</param>
      <param name="keyword">混乱ダメージ倍率に起因する状態。</param>
    </member>
    <member name="M:BattleUnitBreakDetail.UpdateBreakMax">
      <summary></summary>
    </member>
    <member name="T:BattleUnitBuf">
      <summary>キャラクターに付与する状態を表します。</summary>
    </member>
    <member name="F:BattleUnitBuf._bufIconDictionary">
      <summary></summary>
    </member>
    <member name="F:BattleUnitBuf._owner">
      <summary>状態の所有キャラクター</summary>
    </member>
    <member name="F:BattleUnitBuf.hide">
      <summary>状態アイコンを非表示にする事を示す値</summary>
    </member>
    <member name="F:BattleUnitBuf.stack">
      <summary>状態のスタック数</summary>
    </member>
    <member name="M:BattleUnitBuf.#ctor">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBuf.AfterDiceAction(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitBuf.BeforeGiveDamage(BattleDiceBehavior)">
      <summary>ダメージを与える直前に呼び出されます。</summary>
      <param name="behavior">ダメージを与えようとしているバトル ダイスに対するビヘイビア (振る舞いを操作するオブジェクト)。</param>
    </member>
    <member name="M:BattleUnitBuf.BeforeLoseHPNotDmg(System.Int32)">
      <summary></summary>
      <param name="dmg"></param>
    </member>
    <member name="M:BattleUnitBuf.BeforeRollDice(BattleDiceBehavior)">
      <summary>ダイス ロールの直前に呼び出されます。バトル ダイスに対するボーナス値の指定などはこのメソッドで行います。</summary>
      <param name="behavior">ロールに使用されているバトル ダイスに対するビヘイビア (振る舞いを操作するオブジェクト)。</param>
    </member>
    <member name="M:BattleUnitBuf.BeforeTakeDamage(BattleUnitModel,System.Int32)">
      <summary>ダメージを受ける直前に呼び出されます。</summary>
      <param name="attacker">攻撃キャラクター。攻撃キャラクター以外からのダメージの場合は null。</param>
      <param name="dmg">被ダメージ量。</param>
    </member>
    <member name="M:BattleUnitBuf.BreakDmgFactor(System.Int32,DamageType,KeywordBuf)">
      <summary></summary>
      <param name="dmg"></param>
      <param name="type"></param>
      <param name="keyword"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.CanRecoverBreak(System.Int32)">
      <summary></summary>
      <param name="amount"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.CanRecoverHp(System.Int32)">
      <summary></summary>
      <param name="amount"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.ChangeAttackTarget(BattleDiceCardModel,System.Int32)">
      <summary>指定したバトル ページの対象キャラクターを変更します。</summary>
      <param name="card">対象キャラクターを変更するバトル ページ。</param>
      <param name="currentSlot">バトル ページの速度ダイス スロット番号。</param>
      <returns>変更後の対象キャラクター。対象キャラクターの変更が無い場合は null。</returns>
    </member>
    <member name="M:BattleUnitBuf.ChangeDamage(BattleUnitModel,System.Double)">
      <summary></summary>
      <param name="attacker"></param>
      <param name="dmg"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.ChangeDiceResult(BattleDiceBehavior,System.Int32@)">
      <summary></summary>
      <param name="behavior"></param>
      <param name="diceResult"></param>
    </member>
    <member name="M:BattleUnitBuf.ChangeTargetSlot(BattleDiceCardModel,BattleUnitModel,System.Int32,System.Int32,System.Boolean)">
      <summary></summary>
      <param name="card"></param>
      <param name="target"></param>
      <param name="currentSlot"></param>
      <param name="targetSlot"></param>
      <param name="teamkill"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.Destroy">
      <summary>次の幕からこの状態を破棄します。</summary>
    </member>
    <member name="M:BattleUnitBuf.DirectAttack">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.DmgFactor(System.Int32,DamageType,KeywordBuf)">
      <summary></summary>
      <param name="dmg"></param>
      <param name="type"></param>
      <param name="keyword"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.GetAddTextData">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.GetBreakDamageIncreaseRate">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.GetBreakDamageReduction(LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="behaviourDetail"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.GetBreakDamageReductionRate">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.GetBufIcon">
      <summary>状態アイコンのスプライトを取得します。初回呼び出しでは状態アイコンの読み込みも行います。</summary>
      <returns>状態アイコンのスプライト。 <see cref="P:BattleUnitBuf.Hide" /> プロパティが true の場合は null、状態アイコンの読み込みができなかった場合も null を返します。</returns>
    </member>
    <member name="M:BattleUnitBuf.GetCardCostAdder(BattleDiceCardModel)">
      <summary></summary>
      <param name="card"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.GetDamageIncreaseRate">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.GetDamageReduction(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.GetDamageReductionAll">
      <summary>被ダメージの総軽減量を取得します。</summary>
      <returns>被ダメージの総軽減量。</returns>
    </member>
    <member name="M:BattleUnitBuf.GetDamageReductionRate">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.GetEmotionCoinAdder(System.Int32)">
      <summary></summary>
      <param name="defaultCount"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.GetFixedTarget">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.GetMinHp">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.GetMultiplierOnGiveKeywordBufByCard(BattleUnitBuf,BattleUnitModel)">
      <summary></summary>
      <param name="cardBuf"></param>
      <param name="target"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.GetResistBP(AtkResist,LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="origin"></param>
      <param name="detail"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.GetResistHP(AtkResist,LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="origin"></param>
      <param name="detail"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.GetSpeedDiceAdder(System.Int32)">
      <summary></summary>
      <param name="speedDiceResult"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.GetStatBonus">
      <summary>能力値ボーナスを取得します。</summary>
      <returns>能力値ボーナス。</returns>
    </member>
    <member name="M:BattleUnitBuf.GetUIData">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.Init(BattleUnitModel)">
      <summary>この状態を初期化します。このメソッドは状態リストに追加された時に呼び出されます。</summary>
      <param name="owner">状態の所有キャラクター。</param>
    </member>
    <member name="M:BattleUnitBuf.IsActionable">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.IsAttackDice(LOR_DiceSystem.BehaviourDetail)">
      <summary>指定したバトル ダイスが攻撃ダイスである事を判定します。</summary>
      <param name="diceDetail">判定するバトル ダイスの振る舞いの詳細。</param>
      <returns>指定したバトル ダイスが攻撃ダイスである場合は true、そうでない場合は false を返します。</returns>
    </member>
    <member name="M:BattleUnitBuf.IsCardChoosable(BattleDiceCardModel)">
      <summary></summary>
      <param name="card"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.IsDefenseDice(LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="diceDetail"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.IsDestroyed">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.IsHalfPower">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.IsImmortal">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.IsImmune(KeywordBuf)">
      <summary>指定した状態に対して耐性を持っていて、キャラクターに付与できない事を判定します。また、キャラクターに付与されている場合は効果を発揮しない事を判定します。このメソッドは状態を付与する時に前者として呼び出され、各状態の実装で後者として呼び出されます。</summary>
      <param name="buf">耐性情報を取得する状態。</param>
      <returns>指定した状態に対して耐性である場合は true、そうでない場合は false を返します。</returns>
    </member>
    <member name="M:BattleUnitBuf.IsImmune(BufPositiveType)">
      <summary></summary>
      <param name="posType"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.IsImmune(BattleUnitBuf)">
      <summary>指定した状態に対して耐性を持っていて、キャラクターに付与できない事を判定します。このメソッドは状態を付与する時に呼び出されます。</summary>
      <param name="buf">耐性情報を取得する状態。</param>
      <returns>指定した状態に対してキャラクターに付与できない場合は true、そうでない場合は false を返します。</returns>
    </member>
    <member name="M:BattleUnitBuf.IsImmuneBreakDmg(DamageType)">
      <summary></summary>
      <param name="type"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.IsImmuneDmg(DamageType,KeywordBuf)">
      <summary></summary>
      <param name="type"></param>
      <param name="keyword"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.IsImmuneDmg">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.IsInvincibleBp(BattleUnitModel)">
      <summary></summary>
      <param name="attacker"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.IsInvincibleHp(BattleUnitModel)">
      <summary></summary>
      <param name="attacker"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.IsNullifiedPower">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.IsStraighten">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.IsTargetable">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.IsTargetable(BattleUnitModel)">
      <summary></summary>
      <param name="attacker"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.IsTauntable">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.MaxPlayPointAdder">
      <summary>光の最大値の増加量を取得します。</summary>
      <returns>光の最大値の増加量。</returns>
    </member>
    <member name="M:BattleUnitBuf.NullifyNotTargetable">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.OnAddBuf(System.Int32)">
      <summary>この状態が付与された時に呼び出されます。</summary>
      <param name="addedStack">付与された状態のスタック数。</param>
    </member>
    <member name="M:BattleUnitBuf.OnAfterRollSpeedDice">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBuf.OnBreakState">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBuf.OnDestroyCard(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="card"></param>
    </member>
    <member name="M:BattleUnitBuf.OnDie">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBuf.OnDieForReadybuf">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBuf.OnDieOtherUnit(BattleUnitModel)">
      <summary></summary>
      <param name="unit"></param>
    </member>
    <member name="M:BattleUnitBuf.OnDrawCard">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBuf.OnDrawParrying(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitBuf.OnEndBattle(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="curCard"></param>
    </member>
    <member name="M:BattleUnitBuf.OnEndBattlePhase">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBuf.OnEndOneSideAction(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="curCard"></param>
    </member>
    <member name="M:BattleUnitBuf.OnEndParrying">
      <summary>バトル ページによるマッチが終了した時に呼び出されます。</summary>
    </member>
    <member name="M:BattleUnitBuf.OnFriendTakeDamageByAttack(BattleDiceBehavior,System.Int32)">
      <summary></summary>
      <param name="atkDice"></param>
      <param name="dmg"></param>
    </member>
    <member name="M:BattleUnitBuf.OnGiveKeywordBufByCard(BattleUnitBuf,System.Int32,BattleUnitModel)">
      <summary></summary>
      <param name="cardBuf"></param>
      <param name="stack"></param>
      <param name="target"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.OnHpZero">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBuf.OnKill(BattleUnitModel)">
      <summary></summary>
      <param name="target"></param>
    </member>
    <member name="M:BattleUnitBuf.OnLayerChanged(System.String)">
      <summary></summary>
      <param name="layerName"></param>
    </member>
    <member name="M:BattleUnitBuf.OnLoseHp(System.Int32)">
      <summary></summary>
      <param name="dmg"></param>
    </member>
    <member name="M:BattleUnitBuf.OnLoseParrying(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitBuf.OnPrintEffect(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitBuf.OnRollDice(BattleDiceBehavior)">
      <summary>バトル ダイスを振る時に呼び出されます。</summary>
      <param name="behavior">振るバトル ダイスに対するビヘイビア (振る舞いを操作するオブジェクト)。</param>
    </member>
    <member name="M:BattleUnitBuf.OnRollDiceInRecounter">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBuf.OnRollSpeedDice">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBuf.OnRoundEnd">
      <summary>幕の終了時に呼び出されます。</summary>
    </member>
    <member name="M:BattleUnitBuf.OnRoundEndTheLast">
      <summary>幕の終了時、 <see cref="M:BattleUnitBuf.OnRoundEnd" /> の後に呼び出されます。</summary>
    </member>
    <member name="M:BattleUnitBuf.OnRoundStart">
      <summary>幕の開始時に呼び出されます。</summary>
    </member>
    <member name="M:BattleUnitBuf.OnRoundStartAfter">
      <summary>幕の開始時、 <see cref="M:BattleUnitBuf.OnRoundStart" /> の後に呼び出されます。</summary>
    </member>
    <member name="M:BattleUnitBuf.OnStartOneSideAction(BattlePlayingCardDataInUnitModel)">
      <summary>自分のバトル ページによる一方攻撃を開始する時に呼び出されます。</summary>
      <param name="card">この状態の所有キャラクターが一方攻撃に使用するバトル ページ。</param>
    </member>
    <member name="M:BattleUnitBuf.OnStartParrying(BattlePlayingCardDataInUnitModel)">
      <summary>バトル ページによるマッチが発生する直前に呼び出されます。</summary>
      <param name="card">この状態の所有キャラクターがマッチに使用するバトル ページ。</param>
    </member>
    <member name="M:BattleUnitBuf.OnStartTargetedOneSide(BattlePlayingCardDataInUnitModel)">
      <summary>相手からのバトル ページによる一方攻撃が開始される時に呼び出されます。</summary>
      <param name="attackerCard">攻撃キャラクターが使用するバトル ページ。</param>
    </member>
    <member name="M:BattleUnitBuf.OnSuccessAttack(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitBuf.OnTakeDamageByAttack(BattleDiceBehavior,System.Int32)">
      <summary>攻撃によりダメージを受け、この状態の所有キャラクターが死亡しなかった場合に呼び出されます。</summary>
      <param name="atkDice">攻撃に使用されたバトル ダイスに対するビヘイビア (振る舞いを操作するオブジェクト)。</param>
      <param name="dmg">被ダメージ量。</param>
    </member>
    <member name="M:BattleUnitBuf.OnUseCard(BattlePlayingCardDataInUnitModel)">
      <summary>バトル ページが使用される時に呼び出されます。</summary>
      <param name="card">使用されるバトル ページ。</param>
    </member>
    <member name="M:BattleUnitBuf.OnWinParrying(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitBuf.SpeedDiceBreakedAdder">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.SpeedDiceNumAdder">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBuf.TeamKill">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="P:BattleUnitBuf.bufActivatedName">
      <summary>ローカライズされた効果名を取得します。</summary>
    </member>
    <member name="P:BattleUnitBuf.bufActivatedNameWithStack">
      <summary>ローカライズされた効果名をスタック数付きで取得します。</summary>
    </member>
    <member name="P:BattleUnitBuf.bufActivatedText">
      <summary>ローカライズされた効果の説明を取得します。</summary>
    </member>
    <member name="P:BattleUnitBuf.bufKeywordText">
      <summary></summary>
    </member>
    <member name="P:BattleUnitBuf.bufType">
      <summary>
        <see cref="T:KeywordBuf" /> での値を取得します。</summary>
    </member>
    <member name="P:BattleUnitBuf.Hide">
      <summary>状態アイコンを非表示にする事を示す値を取得します。</summary>
    </member>
    <member name="P:BattleUnitBuf.independentBufIcon">
      <summary></summary>
    </member>
    <member name="P:BattleUnitBuf.isAssimilation">
      <summary>同化状態である事を示す値を取得します。</summary>
    </member>
    <member name="P:BattleUnitBuf.IsControllable">
      <summary></summary>
    </member>
    <member name="P:BattleUnitBuf.keywordIconId">
      <summary>アイコン表示用のキーワードを取得します。</summary>
    </member>
    <member name="P:BattleUnitBuf.keywordId">
      <summary>ヘルプ メッセージ用のキーワードを取得します。</summary>
    </member>
    <member name="P:BattleUnitBuf.paramInBufDesc">
      <summary>ヘルプ メッセージに含まれる書式指定文字列 ({0}) に渡す数値を取得します。</summary>
    </member>
    <member name="P:BattleUnitBuf.positiveType">
      <summary>ポジティブ タイプを取得します。</summary>
    </member>
    <member name="T:BattleUnitBufListDetail">
      <summary>キャラクターに付与された状態リストの詳細を表します。</summary>
    </member>
    <member name="M:BattleUnitBufListDetail.#ctor(BattleUnitModel)">
      <summary></summary>
      <param name="model"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.AddBuf(BattleUnitBuf)">
      <summary>指定した状態をこの幕から付与します。</summary>
      <param name="buf">付与する状態。</param>
    </member>
    <member name="M:BattleUnitBufListDetail.AddBufWithConnection(BattleUnitBuf,BattleUnitModel)">
      <summary></summary>
      <param name="buf"></param>
      <param name="owner"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.AddBufWithoutDuplication(BattleUnitBuf)">
      <summary></summary>
      <param name="buf"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.AddKeywordBufByCard(KeywordBuf,System.Int32,BattleUnitModel)">
      <summary>指定した状態を次の幕から付与します。このメソッドはバトル ページの効果により付与する場合に呼び出します。火傷が指定された場合はこの幕に付与します。</summary>
      <param name="bufType">付与する状態のキーワード。</param>
      <param name="stack">付与する状態の数値。</param>
      <param name="actor">状態を付与したキャラクター。キャラクター以外による付与、または規定値は null。</param>
    </member>
    <member name="M:BattleUnitBufListDetail.AddKeywordBufByEtc(KeywordBuf,System.Int32,BattleUnitModel)">
      <summary>指定した状態を次の幕から付与します。このメソッドはバトル ページ以外の効果により付与する場合に呼び出します。火傷が指定された場合はこの幕に付与します。</summary>
      <param name="bufType">付与する状態のキーワード。</param>
      <param name="stack">付与する状態の数値。</param>
      <param name="actor">状態を付与したキャラクター。キャラクター以外による付与、または規定値は null。</param>
    </member>
    <member name="M:BattleUnitBufListDetail.AddKeywordBufNextNextByCard(KeywordBuf,System.Int32,BattleUnitModel)">
      <summary></summary>
      <param name="bufType"></param>
      <param name="stack"></param>
      <param name="actor"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.AddKeywordBufThisRoundByCard(KeywordBuf,System.Int32,BattleUnitModel)">
      <summary>指定した状態をこの幕から付与します。このメソッドはバトル ページの効果により付与する場合に呼び出します。</summary>
      <param name="bufType">付与する状態のキーワード。</param>
      <param name="stack">付与する状態の数値。</param>
      <param name="actor">状態を付与したキャラクター。キャラクター以外による付与、または規定値は null。</param>
    </member>
    <member name="M:BattleUnitBufListDetail.AddKeywordBufThisRoundByEtc(KeywordBuf,System.Int32,BattleUnitModel)">
      <summary>指定した状態をこの幕から付与します。このメソッドはバトル ページ以外の効果により付与する場合に呼び出します。</summary>
      <param name="bufType">付与する状態のキーワード。</param>
      <param name="stack">付与する状態の数値。</param>
      <param name="actor">状態を付与したキャラクター。キャラクター以外による付与、または規定値は null。</param>
    </member>
    <member name="M:BattleUnitBufListDetail.AddReadyBuf(BattleUnitBuf)">
      <summary>指定した状態を次の幕から付与します。</summary>
      <param name="buf">付与する状態。</param>
    </member>
    <member name="M:BattleUnitBufListDetail.AddReadyReadyBuf(BattleUnitBuf)">
      <summary></summary>
      <param name="buf"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.AfterDiceAction(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.BeforeGiveDamage(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.BeforeLoseHPNotDmg(System.Int32)">
      <summary></summary>
      <param name="dmg"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.BeforeRollDice(BattleDiceBehavior)">
      <summary>ダイス ロールの直前に呼び出されます。</summary>
      <param name="behavior">ロールに使用されているバトル ダイスに対するビヘイビア (振る舞いを操作するオブジェクト)。</param>
    </member>
    <member name="M:BattleUnitBufListDetail.BeforeTakeDamage(BattleUnitModel,System.Int32)">
      <summary>ダメージを受ける直前に呼び出されます。</summary>
      <param name="attacker">攻撃キャラクター。攻撃キャラクター以外からのダメージの場合は null。</param>
      <param name="dmg">被ダメージ量。</param>
    </member>
    <member name="M:BattleUnitBufListDetail.BreakDmgFactor(System.Int32,DamageType,KeywordBuf)">
      <summary></summary>
      <param name="dmg"></param>
      <param name="type"></param>
      <param name="keyword"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.CanAddBuf(BattleUnitBuf)">
      <summary>指定した状態を付与できる事を判定します。</summary>
      <param name="buf">付与できる事を判定する対象の状態。</param>
      <returns>付与できる場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:BattleUnitBufListDetail.CanRecoverBreak(System.Int32)">
      <summary></summary>
      <param name="amount"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.CanRecoverHp(System.Int32)">
      <summary></summary>
      <param name="amount"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.ChangeAttackTarget(BattleDiceCardModel,System.Int32)">
      <summary></summary>
      <param name="card"></param>
      <param name="currentSlot"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.ChangeDamage(BattleUnitModel,System.Double)">
      <summary></summary>
      <param name="attacker"></param>
      <param name="dmg"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.ChangeDiceResult(BattleDiceBehavior,System.Int32@)">
      <summary></summary>
      <param name="behavior"></param>
      <param name="diceResult"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.ChangeTargetSlot(BattleDiceCardModel,BattleUnitModel,System.Int32,System.Int32,System.Boolean)">
      <summary></summary>
      <param name="card"></param>
      <param name="target"></param>
      <param name="currentSlot"></param>
      <param name="targetSlot"></param>
      <param name="teamkill"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.CheckAllBufForAchievement">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.CheckBufCount">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBufListDetail.CheckDestroyedBuf">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBufListDetail.CheckGift(KeywordBuf,System.Int32,BattleUnitModel)">
      <summary></summary>
      <param name="bufType"></param>
      <param name="stack"></param>
      <param name="actor"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.DirectAttack">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.DmgFactor(System.Int32,DamageType,KeywordBuf)">
      <summary></summary>
      <param name="dmg"></param>
      <param name="type"></param>
      <param name="keyword"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetActivatedBuf(KeywordBuf)">
      <summary>指定した状態に一致する、この幕に適用されている状態を取得します。</summary>
      <param name="bufType">取得する状態の種類。</param>
      <returns>指定した状態が存在する場合はその状態、存在しない場合は null を返します。</returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetActivatedBufList">
      <summary>この幕に適用されている状態リストを取得します。</summary>
      <returns>この幕に適用されている状態リスト。</returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetBreakDamageIncreaseRate">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetBreakDamageRate">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetBreakDamageReduction(LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="behaviourDetail"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetBufUIDataList">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetCardCostAdder(BattleDiceCardModel)">
      <summary></summary>
      <param name="card"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetDamageIncreaseRate">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetDamageRate">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetDamageReduction(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetDamageReductionAll">
      <summary>被ダメージの総軽減量を取得します。</summary>
      <returns>被ダメージの総軽減量。</returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetEmotionCoinAdder(System.Int32)">
      <summary></summary>
      <param name="defaultCount"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetFixedTargets">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetKewordBufAllStack(KeywordBuf)">
      <summary></summary>
      <param name="keyword"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetKewordBufStack(KeywordBuf)">
      <summary></summary>
      <param name="keyword"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetMinHp">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetMultiplierOnGiveKeywordBufByCard(BattleUnitBuf,BattleUnitModel)">
      <summary></summary>
      <param name="targetBuf"></param>
      <param name="target"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetNegativeBufTypeCount">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetReadyBuf(KeywordBuf)">
      <summary>指定した状態に一致する、次の幕から適用する状態を取得します。</summary>
      <param name="bufType">取得する状態の種類。</param>
      <returns>指定した状態が存在する場合はその状態、存在しない場合は null を返します。</returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetReadyBufList">
      <summary>次の幕から適用する状態リストを取得します。</summary>
      <returns>次の幕から適用する状態リスト。</returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetReadyReadyBufList">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetResistBP(AtkResist,LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="origin"></param>
      <param name="detail"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetResistHP(AtkResist,LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="origin"></param>
      <param name="detail"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetSpeedDiceAdder(System.Int32)">
      <summary></summary>
      <param name="speedDiceResult"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.GetStatBonus">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.HasAssimilation">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.HasBuf``1">
      <summary>指定した型の状態が、この幕の状態リストの所有キャラクターに付与されている事を判定します。</summary>
      <typeparam name="T">付与されている事を判定する状態の型。</typeparam>
      <returns>指定した型の状態がこの幕に付与されている場合は true、そうでない場合は false を返します。</returns>
    </member>
    <member name="M:BattleUnitBufListDetail.HasStun">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.IsActionable">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.IsCardChoosable(BattleDiceCardModel)">
      <summary></summary>
      <param name="card"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.IsControlable">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.IsHalfPower">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.IsImmortal">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.IsImmune(KeywordBuf)">
      <summary>指定した状態に対して耐性を持っていて、キャラクターに付与できない事を判定します。また、キャラクターに付与されている場合は効果を発揮しない事を判定します。このメソッドは状態を付与する時に前者として呼び出され、各状態の実装で後者として呼び出されます。</summary>
      <param name="buf">耐性情報を取得する状態。</param>
      <returns>指定した状態に対して耐性である場合は true、そうでない場合は false を返します。</returns>
    </member>
    <member name="M:BattleUnitBufListDetail.IsImmune(BufPositiveType)">
      <summary></summary>
      <param name="buf"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.IsImmuneBreakDmg(DamageType)">
      <summary></summary>
      <param name="type"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.IsImmuneDmg(DamageType,KeywordBuf)">
      <summary></summary>
      <param name="type"></param>
      <param name="keyword"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.IsImmuneDmg">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.IsInvincibleBp(BattleUnitModel)">
      <summary></summary>
      <param name="attacker"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.IsInvincibleHp(BattleUnitModel)">
      <summary></summary>
      <param name="attacker"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.IsNullifyPower">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.IsStraighten">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.IsTargetable">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.IsTargetable(BattleUnitModel)">
      <summary></summary>
      <param name="attacker"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.IsTauntable">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.MaxPlayPointAdder">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.NotTargetableRemoved">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.OnAfterRollSpeedDice">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBufListDetail.OnBreakState">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBufListDetail.OnDestroyCard(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="card"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.OnDie">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBufListDetail.OnDieOtherUnit(BattleUnitModel)">
      <summary></summary>
      <param name="unit"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.OnDrawCard">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBufListDetail.OnDrawParrying(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.OnEndBattle(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="curCard"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.OnEndOneSideAction(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="curCard"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.OnEndParrying">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBufListDetail.OnFriendTakeDamageByAttack(BattleDiceBehavior,System.Int32)">
      <summary></summary>
      <param name="atkDice"></param>
      <param name="dmg"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.OnGiveKeywordBufByCard(BattleUnitBuf,System.Int32,BattleUnitModel)">
      <summary></summary>
      <param name="targetBuf"></param>
      <param name="stack"></param>
      <param name="target"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.OnHpZero">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBufListDetail.OnKill(BattleUnitModel)">
      <summary></summary>
      <param name="target"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.OnLayerChanged(System.String)">
      <summary></summary>
      <param name="layerName"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.OnLoseHp(System.Int32)">
      <summary></summary>
      <param name="dmg"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.OnLoseParrying(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.OnRollDice(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.OnRollDiceInReencounter">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBufListDetail.OnRollSpeedDice">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBufListDetail.OnRoundEnd">
      <summary>幕の終了時に呼び出されます。</summary>
    </member>
    <member name="M:BattleUnitBufListDetail.OnRoundEndTheLast">
      <summary>幕の終了時、 <see cref="M:BattleUnitBufListDetail.OnRoundEnd" /> の後に呼び出されます。</summary>
    </member>
    <member name="M:BattleUnitBufListDetail.OnRoundStart">
      <summary>幕の開始時に呼び出されます。</summary>
    </member>
    <member name="M:BattleUnitBufListDetail.OnRoundStartAfter">
      <summary>幕の開始時、 <see cref="M:BattleUnitBufListDetail.OnRoundStart" /> の後に呼び出されます。</summary>
    </member>
    <member name="M:BattleUnitBufListDetail.OnStartOneSideAction(BattlePlayingCardDataInUnitModel)">
      <summary>自分のバトル ページによる一方攻撃を開始する時に呼び出されます。</summary>
      <param name="card">この状態リストの所有キャラクターが一方攻撃に使用するバトル ページ。</param>
    </member>
    <member name="M:BattleUnitBufListDetail.OnStartParrying(BattlePlayingCardDataInUnitModel)">
      <summary>バトル ページによるマッチが発生する直前に呼び出されます。</summary>
      <param name="card">マッチに使用するバトル ページ。</param>
    </member>
    <member name="M:BattleUnitBufListDetail.OnStartTargetedOneSide(BattlePlayingCardDataInUnitModel)">
      <summary>相手からのバトル ページによる一方攻撃が開始される時に呼び出されます。</summary>
      <param name="attackerCard">攻撃キャラクターが使用するバトル ページ。</param>
    </member>
    <member name="M:BattleUnitBufListDetail.OnSuccessAttack(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.OnTakeDamageByAttack(BattleDiceBehavior,System.Int32)">
      <summary>攻撃によりダメージを受け、この状態リストの所有キャラクターが死亡しなかった場合に呼び出されます。</summary>
      <param name="atkDice">攻撃に使用されたバトル ダイスに対するビヘイビア (振る舞いを操作するオブジェクト)。</param>
      <param name="dmg">被ダメージ量。</param>
    </member>
    <member name="M:BattleUnitBufListDetail.OnUseCard(BattlePlayingCardDataInUnitModel)">
      <summary>バトル ページが使用される時に呼び出されます。</summary>
      <param name="card">使用されるバトル ページ。</param>
    </member>
    <member name="M:BattleUnitBufListDetail.OnWinParrying(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.RemoveBuf(BattleUnitBuf)">
      <summary>指定した状態がこの状態リストの所有キャラクターに付与されている場合、最初に出現したものを削除します。</summary>
      <param name="buf">削除する状態オブジェクト。</param>
    </member>
    <member name="M:BattleUnitBufListDetail.RemoveBufAll(System.Type)">
      <summary>指定した型に一致する状態をこの状態リストの所有キャラクターから全て削除します。</summary>
      <param name="buf">削除する状態の型。</param>
    </member>
    <member name="M:BattleUnitBufListDetail.RemoveBufAll(KeywordBuf)">
      <summary>指定したキーワードに一致する状態をこの状態リストの所有キャラクターから全て削除します。</summary>
      <param name="bufType">削除する状態のキーワード。</param>
    </member>
    <member name="M:BattleUnitBufListDetail.RemoveBufAll(BufPositiveType)">
      <summary>指定したポジティブ タイプに一致する状態をこの状態リストの所有キャラクターから全て削除します。</summary>
      <param name="bufPositiveType">削除する状態のポジティブ タイプ。</param>
    </member>
    <member name="M:BattleUnitBufListDetail.RemoveBufAll">
      <summary></summary>
    </member>
    <member name="M:BattleUnitBufListDetail.RemoveReadyBuf(BattleUnitBuf)">
      <summary></summary>
      <param name="buf"></param>
    </member>
    <member name="M:BattleUnitBufListDetail.SpeedDiceBreakAdder">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.SpeedDiceNumAdder">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitBufListDetail.TeamKill">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="T:BattleUnitModel">
      <summary>キャラクターを表します。</summary>
    </member>
    <member name="F:BattleUnitModel.aggroDetail">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.allyCardDetail">
      <summary>デッキおよび手札の詳細</summary>
    </member>
    <member name="F:BattleUnitModel.battleCardResultLog">
      <summary>バトル ページによって適用された効果の結果ログ</summary>
    </member>
    <member name="F:BattleUnitModel.breakDetail">
      <summary>混乱耐性の詳細</summary>
    </member>
    <member name="F:BattleUnitModel.bufListDetail">
      <summary>付与された状態リストの詳細</summary>
    </member>
    <member name="F:BattleUnitModel.cardHistory">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.cardOrder">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.cardSlotDetail">
      <summary>戦闘で使用するバトル ページ枠の詳細</summary>
    </member>
    <member name="F:BattleUnitModel.currentDiceAction">
      <summary>現在使用しているバトル ページのデータ</summary>
    </member>
    <member name="F:BattleUnitModel.currentSpeedDiceIdx">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.direction">
      <summary>向いている方向</summary>
    </member>
    <member name="F:BattleUnitModel.disposed">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.equipment">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.faction">
      <summary>敵または味方の派閥</summary>
    </member>
    <member name="F:BattleUnitModel.forceRetreat">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.formation">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.history">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.ignoreBloodyEffect">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.index">
      <summary>所属する派閥に配置されているキャラクターの順番</summary>
    </member>
    <member name="F:BattleUnitModel.isRegister">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.isTauntable">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.lastAttacker">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.moveDetail">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.passiveDetail">
      <summary>パッシブの詳細</summary>
    </member>
    <member name="F:BattleUnitModel.personalEgoDetail">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.savedCardDetail">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.speedDiceResult">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.stopped">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.targetSetter">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.turnState">
      <summary></summary>
    </member>
    <member name="F:BattleUnitModel.view">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.#ctor(System.Int32)">
      <summary></summary>
      <param name="id"></param>
    </member>
    <member name="M:BattleUnitModel.AfterDiceAction(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitModel.AfterGiveDamage(BattleUnitModel,System.Int32)">
      <summary></summary>
      <param name="target"></param>
      <param name="dmg"></param>
    </member>
    <member name="M:BattleUnitModel.AfterRollSpeedDice">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.AfterTakeDamage(BattleUnitModel,System.Int32)">
      <summary></summary>
      <param name="attacker"></param>
      <param name="dmg"></param>
    </member>
    <member name="M:BattleUnitModel.AllowTargetChanging(BattleUnitModel,System.Int32)">
      <summary></summary>
      <param name="attacker"></param>
      <param name="idx"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.BeforeGiveDamage(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitModel.BeforeLoseHPNotDmg(System.Int32)">
      <summary></summary>
      <param name="dmg"></param>
    </member>
    <member name="M:BattleUnitModel.BeforeRollDice(BattleDiceBehavior)">
      <summary>ダイス ロールの直前に呼び出されます。</summary>
      <param name="behavior">ロールに使用されているバトル ダイスに対するビヘイビア (振る舞いを操作するオブジェクト)。</param>
    </member>
    <member name="M:BattleUnitModel.BeforeTakeBreakDamage(BattleUnitModel,System.Int32)">
      <summary></summary>
      <param name="attacker"></param>
      <param name="dmg"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.BeforeTakeDamage(BattleUnitModel,System.Int32)">
      <summary>ダメージを受ける直前に呼び出されます。</summary>
      <param name="attacker">攻撃キャラクター。攻撃キャラクター以外からのダメージの場合は null。</param>
      <param name="dmg">被ダメージ量。</param>
      <returns>被ダメージを無効化する場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:BattleUnitModel.BreakDmgFactor(System.Int32,DamageType,KeywordBuf)">
      <summary></summary>
      <param name="dmg"></param>
      <param name="type"></param>
      <param name="keyword"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.CanChangeAttackTarget(BattleUnitModel,System.Int32,System.Int32)">
      <summary></summary>
      <param name="target"></param>
      <param name="myIndex"></param>
      <param name="targetIndex"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.CanRecoverBreak(System.Int32)">
      <summary></summary>
      <param name="recoverAmount"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.CanRecoverHp(System.Int32)">
      <summary></summary>
      <param name="recoverAmount"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.ChangeAttackTarget(BattleDiceCardModel,System.Int32)">
      <summary></summary>
      <param name="card"></param>
      <param name="idx"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.ChangeBaseDeck(System.Collections.Generic.List{LOR_DiceSystem.DiceCardXmlInfo},System.Int32)">
      <summary>指定されたデッキ情報で構成され、指定した枚数だけ手札を引いた状態のデッキに切り替えます。</summary>
      <param name="cardList">バトル ページのリストで表される、使用するデッキの情報。</param>
      <param name="drawNum">デッキから手札を引く枚数。</param>
    </member>
    <member name="M:BattleUnitModel.ChangeDamage(BattleUnitModel,System.Double)">
      <summary></summary>
      <param name="attacker"></param>
      <param name="dmg"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.ChangeDeck(System.Int32)">
      <summary>指定したインデックスに対応するデッキに切り替えます。</summary>
      <param name="index">切り替えるデッキのインデックス。</param>
    </member>
    <member name="M:BattleUnitModel.ChangeTargetSlot(BattleDiceCardModel,BattleUnitModel,System.Int32,System.Int32,System.Boolean)">
      <summary></summary>
      <param name="card"></param>
      <param name="target"></param>
      <param name="currentSlot"></param>
      <param name="targetSlot"></param>
      <param name="teamkill"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.ChangeTemporaryDeck(System.Collections.Generic.List{LorId},System.Int32)">
      <summary></summary>
      <param name="cardIdList"></param>
      <param name="drawNum"></param>
    </member>
    <member name="M:BattleUnitModel.CheckCardAvailable(BattleDiceCardModel)">
      <summary></summary>
      <param name="card"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.CheckCardAvailableForPlayer(BattleDiceCardModel)">
      <summary></summary>
      <param name="card"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.CheckGiftOnKill(BattleUnitModel)">
      <summary></summary>
      <param name="target"></param>
    </member>
    <member name="M:BattleUnitModel.CheckGiftOnLoseParrying(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitModel.CheckGiftOnParryingStart(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="card"></param>
    </member>
    <member name="M:BattleUnitModel.CheckGiftOnTakeDamage(System.Int32,DamageType,BattleUnitModel,KeywordBuf)">
      <summary></summary>
      <param name="dmg"></param>
      <param name="type"></param>
      <param name="attacker"></param>
      <param name="keyword"></param>
    </member>
    <member name="M:BattleUnitModel.CheckGiftOnTakeDamageByAttack(BattleDiceBehavior,System.Int32)">
      <summary></summary>
      <param name="atkDice"></param>
      <param name="dmg"></param>
    </member>
    <member name="M:BattleUnitModel.CheckGiftOnWinParrying(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitModel.ConnectBuf(BattleUnitBuf)">
      <summary></summary>
      <param name="buf"></param>
    </member>
    <member name="M:BattleUnitModel.Die(BattleUnitModel,System.Boolean)">
      <summary></summary>
      <param name="attacker"></param>
      <param name="callEvent"></param>
    </member>
    <member name="M:BattleUnitModel.DieFake">
      <summary>キャラクターの体力はそのままで疑似的に死亡させます。死亡しない無敵キャラクターが含まれる舞台を終了させる場合などで使用します。</summary>
    </member>
    <member name="M:BattleUnitModel.DirectAttack">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.DmgFactor(System.Int32,DamageType,KeywordBuf)">
      <summary></summary>
      <param name="dmg"></param>
      <param name="type"></param>
      <param name="keyword"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.Extinct(System.Boolean)">
      <summary></summary>
      <param name="b"></param>
    </member>
    <member name="M:BattleUnitModel.GetBreakDamageIncreaseRate">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.GetBreakDamageRate">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.GetBreakDamageReduction(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.GetBreakDamageReductionAll(System.Int32,DamageType,BattleUnitModel)">
      <summary>被混乱ダメージの総軽減量を取得します。</summary>
      <param name="dmg">軽減前の被混乱ダメージ量。</param>
      <param name="dmgType">ダメージ元の種類。</param>
      <param name="attacker">攻撃キャラクター。</param>
      <returns>被混乱ダメージの総軽減量。</returns>
    </member>
    <member name="M:BattleUnitModel.GetCurrentSpeed">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.GetDamageIncreaseRate">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.GetDamageRate">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.GetDamageReduction(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.GetDamageReductionAll">
      <summary>被ダメージの総軽減量を取得します。</summary>
      <returns>被ダメージの総軽減量。</returns>
    </member>
    <member name="M:BattleUnitModel.GetFixedTargets">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.GetMinHp">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.GetMultiplierOnGiveKeywordBufByCard(BattleUnitBuf,BattleUnitModel)">
      <summary></summary>
      <param name="buf"></param>
      <param name="target"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.GetPriority(BattleDiceCardModel,System.Int32)">
      <summary></summary>
      <param name="card"></param>
      <param name="speed"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.GetResistBP(LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="detail"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.GetResistBP_Text(LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="detail"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.GetResistHP(LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="detail"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.GetResistHP_Text(LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="detail"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.GetSpeed(System.Int32)">
      <summary></summary>
      <param name="idx"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.GetSpeedDiceResult(System.Int32)">
      <summary></summary>
      <param name="index"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.GetTakenGuardBreakDamageAdder(System.Int32)">
      <summary></summary>
      <param name="dmg"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.IsActionable">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.IsAttackable(BattleUnitModel)">
      <summary></summary>
      <param name="target"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.IsBreakLifeZero">
      <summary>混乱耐性が 0 である事を示します。</summary>
      <returns>混乱耐性が 0 の場合は true、そうでない場合は false を返します。</returns>
    </member>
    <member name="M:BattleUnitModel.IsCardChoosable(BattleDiceCardModel)">
      <summary></summary>
      <param name="card"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.IsControlable">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.IsHalfPower">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.IsImmortal">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.IsImmune(KeywordBuf)">
      <summary>指定した状態に対して耐性を持っていて、キャラクターに付与されている場合は効果を発揮しない事を判定します。このメソッドは各状態の実装で呼び出されます。</summary>
      <param name="buf">耐性情報を取得する状態。</param>
      <returns>指定した状態に対して耐性である場合は true、そうでない場合は false を返します。</returns>
    </member>
    <member name="M:BattleUnitModel.IsImmuneBreakDmg(DamageType)">
      <summary></summary>
      <param name="type"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.IsImmuneDmg(DamageType,KeywordBuf)">
      <summary></summary>
      <param name="type"></param>
      <param name="keyword"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.IsImmuneDmg">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.IsInvincibleBp(BattleUnitModel)">
      <summary></summary>
      <param name="attacker"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.IsInvincibleHp(BattleUnitModel)">
      <summary></summary>
      <param name="attacker"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.IsNullifyPower">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.IsStraighten">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.IsTargetable(BattleUnitModel)">
      <summary></summary>
      <param name="attacker"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.IsTargetable_theLast">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.IsTargetableUnit(BattleDiceCardModel,BattleUnitModel,BattleUnitModel,System.Int32)">
      <summary></summary>
      <param name="card"></param>
      <param name="actor"></param>
      <param name="target"></param>
      <param name="targetDiceIdx"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.IsTauntable">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.LoseHp(System.Int32)">
      <summary></summary>
      <param name="value"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.MaxPlayPointAdder">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.OnAddKeywordBufByCard(BattleUnitBuf,System.Int32)">
      <summary></summary>
      <param name="buf"></param>
      <param name="stack"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.OnAddKeywordBufByCardForEvent(KeywordBuf,System.Int32,BufReadyType)">
      <summary></summary>
      <param name="bufType"></param>
      <param name="stack"></param>
      <param name="readyType"></param>
    </member>
    <member name="M:BattleUnitModel.OnApplyCard(BattleDiceCardModel)">
      <summary></summary>
      <param name="card"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.OnBattleEnd">
      <summary>接待の終了時に呼び出されます。</summary>
    </member>
    <member name="M:BattleUnitModel.OnBattleEnd_alive">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.OnBreakGageZero">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.OnBreakState">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.OnCapturedAsTarget(BattleUnitModel)">
      <summary></summary>
      <param name="attacker"></param>
    </member>
    <member name="M:BattleUnitModel.OnCheckEndBattle(System.Boolean@,System.Boolean@)">
      <summary></summary>
      <param name="librarianExists"></param>
      <param name="enemyExists"></param>
    </member>
    <member name="M:BattleUnitModel.OnCreated">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.OnDestroyCard(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="card"></param>
    </member>
    <member name="M:BattleUnitModel.OnDie(System.Boolean)">
      <summary></summary>
      <param name="callEvent"></param>
    </member>
    <member name="M:BattleUnitModel.OnDieOtherUnit(BattleUnitModel)">
      <summary></summary>
      <param name="unit"></param>
    </member>
    <member name="M:BattleUnitModel.OnDiscardByAbility(System.Collections.Generic.List{BattleDiceCardModel})">
      <summary></summary>
      <param name="cards"></param>
    </member>
    <member name="M:BattleUnitModel.OnDrawCard">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.OnDrawParrying(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitModel.OnEndBattle(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="curCard"></param>
    </member>
    <member name="M:BattleUnitModel.OnEndFarAreaPlay">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.OnEndOneSideAction(System.Boolean)">
      <summary></summary>
      <param name="wasAttacker"></param>
    </member>
    <member name="M:BattleUnitModel.OnEndOneSideAction_Before(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="curCard"></param>
    </member>
    <member name="M:BattleUnitModel.OnEndOnSideActionVictim_Before(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="attackerCard"></param>
    </member>
    <member name="M:BattleUnitModel.OnEndParrying">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.OnEndParrying_Before(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="curCard"></param>
    </member>
    <member name="M:BattleUnitModel.OnEnemyRollDice(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitModel.OnFixedUpdate(System.Single)">
      <summary></summary>
      <param name="deltaTime"></param>
    </member>
    <member name="M:BattleUnitModel.OnFixedUpdateInWaitPhase(System.Single)">
      <summary></summary>
      <param name="delta"></param>
    </member>
    <member name="M:BattleUnitModel.OnGainChargeStack">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.OnGiveKeywordBufByCard(BattleUnitBuf,System.Int32,BattleUnitModel)">
      <summary></summary>
      <param name="buf"></param>
      <param name="stack"></param>
      <param name="target"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.OnHpZero">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.OnKill(BattleUnitModel)">
      <summary></summary>
      <param name="target"></param>
    </member>
    <member name="M:BattleUnitModel.OnLayerChanged(System.String)">
      <summary></summary>
      <param name="layerName"></param>
    </member>
    <member name="M:BattleUnitModel.OnLoseHp(System.Int32)">
      <summary></summary>
      <param name="dmg"></param>
    </member>
    <member name="M:BattleUnitModel.OnLoseParrying(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitModel.OnMakeBreakState(BattleUnitModel)">
      <summary></summary>
      <param name="target"></param>
    </member>
    <member name="M:BattleUnitModel.OnOtherUnitReservedCostChanged(BattleUnitModel,System.Int32)">
      <summary></summary>
      <param name="unit"></param>
      <param name="cur"></param>
    </member>
    <member name="M:BattleUnitModel.OnParryingStart(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="card"></param>
    </member>
    <member name="M:BattleUnitModel.OnRecoverHp(System.Int32)">
      <summary></summary>
      <param name="recoverAmount"></param>
    </member>
    <member name="M:BattleUnitModel.OnReleaseBreak">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.OnRollDice(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitModel.OnRollDiceInRecounter">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.OnRoundEnd">
      <summary>幕の終了時に呼び出されます。</summary>
    </member>
    <member name="M:BattleUnitModel.OnRoundEnd_after">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.OnRoundEnd_before">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.OnRoundEndTheLast">
      <summary>幕の終了時、 <see cref="M:BattleUnitModel.OnRoundEnd" /> の後に呼び出されます。</summary>
    </member>
    <member name="M:BattleUnitModel.OnRoundEndTheLast_ignoreDead">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.OnRoundStart_after">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.OnRoundStart_before">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.OnRoundStart_ignoreDead">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.OnRoundStart_speedDice">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.OnRoundStartOnlyUI">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.OnSelectCardAuto(BattleDiceCardModel,System.Int32)">
      <summary></summary>
      <param name="origin"></param>
      <param name="currentDiceSlotIdx"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.OnStartBattle">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.OnStartCardAction(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="curCard"></param>
    </member>
    <member name="M:BattleUnitModel.OnStartOneSideAction(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="curCard"></param>
    </member>
    <member name="M:BattleUnitModel.OnStartTargetedByAreaAtk(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="attackerCard"></param>
    </member>
    <member name="M:BattleUnitModel.OnStartTargetedOneSide(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="attackerCard"></param>
    </member>
    <member name="M:BattleUnitModel.OnSucceedAreaAttack(BattleDiceBehavior,BattleUnitModel)">
      <summary></summary>
      <param name="behavior"></param>
      <param name="target"></param>
    </member>
    <member name="M:BattleUnitModel.OnSucceedAttack(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitModel.OnTakeBreakDamageByAttack(BattleDiceBehavior,System.Int32)">
      <summary>攻撃により混乱ダメージを受け、このキャラクターが死亡しなかった場合に呼び出されます。</summary>
      <param name="atkDice">攻撃に使用されたバトル ダイスに対するビヘイビア (振る舞いを操作するオブジェクト)。</param>
      <param name="breakdmg">被混乱ダメージ量。</param>
    </member>
    <member name="M:BattleUnitModel.OnTakeDamageByAttack(BattleDiceBehavior,System.Int32)">
      <summary>攻撃によりダメージを受け、このキャラクターが死亡しなかった場合に呼び出されます。</summary>
      <param name="atkDice">攻撃に使用されたバトル ダイスに対するビヘイビア (振る舞いを操作するオブジェクト)。</param>
      <param name="dmg">被ダメージ量。</param>
    </member>
    <member name="M:BattleUnitModel.OnUseCard(BattlePlayingCardDataInUnitModel)">
      <summary>バトル ページが使用される時に呼び出されます。</summary>
      <param name="card">使用されるバトル ページ。</param>
    </member>
    <member name="M:BattleUnitModel.OnUseChargeStack">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.OnWaveStart">
      <summary>舞台の開始時に呼び出されます。</summary>
    </member>
    <member name="M:BattleUnitModel.OnWinParrying(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitModel.RecoverBreakLife(System.Int32,System.Boolean)">
      <summary></summary>
      <param name="v"></param>
      <param name="ignore"></param>
    </member>
    <member name="M:BattleUnitModel.RecoverHP(System.Int32)">
      <summary>指定した値だけキャラクターの体力を回復します。</summary>
      <param name="v">回復する体力の数値。</param>
    </member>
    <member name="M:BattleUnitModel.ResetBreakGauge">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.ResetTurn">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.ReturnToOriginalDeck">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.Revive(System.Int32)">
      <summary></summary>
      <param name="recoverHp"></param>
    </member>
    <member name="M:BattleUnitModel.RollSpeedDice">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.SetActionable(System.Boolean)">
      <summary></summary>
      <param name="b"></param>
    </member>
    <member name="M:BattleUnitModel.SetAllSpeedDiceValueAdder(System.Int32)">
      <summary></summary>
      <param name="adder"></param>
    </member>
    <member name="M:BattleUnitModel.SetCurrentOrder(System.Int32)">
      <summary></summary>
      <param name="idx"></param>
    </member>
    <member name="M:BattleUnitModel.SetDeadSceneBlock(System.Boolean)">
      <summary></summary>
      <param name="b"></param>
    </member>
    <member name="M:BattleUnitModel.SetHp(System.Int32)">
      <summary>現在の体力を設定します。キャラクターの最大体力や最小体力に関係なく、指定した値そのままに設定します。</summary>
      <param name="newHp">設定する体力。</param>
    </member>
    <member name="M:BattleUnitModel.SetRole">
      <summary></summary>
    </member>
    <member name="M:BattleUnitModel.SetSpeedDiceValueAdder(System.Int32,System.Int32)">
      <summary></summary>
      <param name="index"></param>
      <param name="adder"></param>
    </member>
    <member name="M:BattleUnitModel.SetTimeScale(System.Single)">
      <summary></summary>
      <param name="timeScale"></param>
    </member>
    <member name="M:BattleUnitModel.SetUnitData(UnitBattleDataModel)">
      <summary></summary>
      <param name="unitBattleData"></param>
    </member>
    <member name="M:BattleUnitModel.ShowPassiveTypo(PassiveAbilityBase)">
      <summary></summary>
      <param name="passive"></param>
    </member>
    <member name="M:BattleUnitModel.ShowTypoTemporary(BattleEmotionCardModel,System.Int32,ResultOption,System.Int32[])">
      <summary></summary>
      <param name="emotionPassive"></param>
      <param name="index"></param>
      <param name="option"></param>
      <param name="param"></param>
    </member>
    <member name="M:BattleUnitModel.SpendCardAndCost(BattleDiceCardModel)">
      <summary></summary>
      <param name="card"></param>
    </member>
    <member name="M:BattleUnitModel.TakeBreakDamage(System.Int32,DamageType,BattleUnitModel,AtkResist,KeywordBuf)">
      <summary></summary>
      <param name="damage"></param>
      <param name="type"></param>
      <param name="attacker"></param>
      <param name="atkResist"></param>
      <param name="keyword"></param>
    </member>
    <member name="M:BattleUnitModel.TakeDamage(System.Int32,DamageType,BattleUnitModel,KeywordBuf)">
      <summary></summary>
      <param name="v"></param>
      <param name="type"></param>
      <param name="attacker"></param>
      <param name="keyword"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.TeamKill">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitModel.UpdateDirection(UnityEngine.Vector3)">
      <summary></summary>
      <param name="targetPos"></param>
    </member>
    <member name="M:BattleUnitModel.UpdateUnitData">
      <summary></summary>
    </member>
    <member name="P:BattleUnitModel.Book">
      <summary>装着しているコア ページを取得します。</summary>
    </member>
    <member name="P:BattleUnitModel.customBook">
      <summary></summary>
    </member>
    <member name="P:BattleUnitModel.emotionDetail">
      <summary></summary>
    </member>
    <member name="P:BattleUnitModel.formationCellPos">
      <summary></summary>
    </member>
    <member name="P:BattleUnitModel.hp">
      <summary>現在の体力を取得します。</summary>
    </member>
    <member name="P:BattleUnitModel.id">
      <summary>キャラクター ID を取得します。</summary>
    </member>
    <member name="P:BattleUnitModel.IsDeadSceneBlock">
      <summary></summary>
    </member>
    <member name="P:BattleUnitModel.MaxBreakLife">
      <summary>最大混乱耐性を取得します。</summary>
    </member>
    <member name="P:BattleUnitModel.MaxHp">
      <summary>最大体力を取得します。</summary>
    </member>
    <member name="P:BattleUnitModel.MaxPlayPoint">
      <summary></summary>
    </member>
    <member name="P:BattleUnitModel.PlayPoint">
      <summary></summary>
    </member>
    <member name="P:BattleUnitModel.speedDiceCount">
      <summary></summary>
    </member>
    <member name="P:BattleUnitModel.Team">
      <summary></summary>
    </member>
    <member name="P:BattleUnitModel.UnitData">
      <summary></summary>
    </member>
    <member name="T:BattleUnitPassiveDetail">
      <summary>キャラクターが所有するパッシブの詳細を表します。</summary>
    </member>
    <member name="M:BattleUnitPassiveDetail.#ctor(BattleUnitModel)">
      <summary></summary>
      <param name="self"></param>
    </member>
    <member name="M:BattleUnitPassiveDetail.AddPassive(PassiveAbilityBase)">
      <summary>指定したパッシブを待機状態で追加し、 <see cref="M:PassiveAbilityBase.Init(BattleUnitModel)" /> を呼び出します。</summary>
      <param name="passive">追加するパッシブ。</param>
      <returns>追加したパッシブ。</returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.AddPassive(LorId)">
      <summary></summary>
      <param name="id"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.AfterGiveDamage(System.Int32)">
      <summary></summary>
      <param name="dmg"></param>
    </member>
    <member name="M:BattleUnitPassiveDetail.AfterTakeDamage(BattleUnitModel,System.Int32)">
      <summary></summary>
      <param name="attacker"></param>
      <param name="dmg"></param>
    </member>
    <member name="M:BattleUnitPassiveDetail.AllowTargetChanging(BattleUnitModel,System.Int32)">
      <summary></summary>
      <param name="attacker"></param>
      <param name="myIdx"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.BeforeGiveDamage(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitPassiveDetail.BeforeRollDice(BattleDiceBehavior)">
      <summary>ダイス ロールの直前に呼び出されます。</summary>
      <param name="behavior">ロールに使用されているバトル ダイスに対するビヘイビア (振る舞いを操作するオブジェクト)。</param>
    </member>
    <member name="M:BattleUnitPassiveDetail.BeforeTakeBreakDamage(BattleUnitModel,System.Int32)">
      <summary></summary>
      <param name="attacker"></param>
      <param name="dmg"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.BeforeTakeDamage(BattleUnitModel,System.Int32)">
      <summary>ダメージを受ける直前に呼び出されます。</summary>
      <param name="attacker">攻撃キャラクター。攻撃キャラクター以外からのダメージの場合は null。</param>
      <param name="dmg">被ダメージ量。</param>
      <returns>被ダメージを無効化する場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.BreakDmgFactor(System.Int32,DamageType,KeywordBuf)">
      <summary></summary>
      <param name="dmg"></param>
      <param name="type"></param>
      <param name="keyword"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.CanAddBuf(BattleUnitBuf)">
      <summary></summary>
      <param name="buf"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.CanRecoverBreak(System.Int32)">
      <summary></summary>
      <param name="amount"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.CanRecoverHp(System.Int32)">
      <summary></summary>
      <param name="amount"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.ChangeAttackTarget(BattleDiceCardModel,System.Int32)">
      <summary></summary>
      <param name="card"></param>
      <param name="idx"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.ChangeDamage(BattleUnitModel,System.Double)">
      <summary></summary>
      <param name="attacker"></param>
      <param name="dmg"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.ChangeDiceResult(BattleDiceBehavior,System.Int32@)">
      <summary></summary>
      <param name="behavior"></param>
      <param name="diceResult"></param>
    </member>
    <member name="M:BattleUnitPassiveDetail.ChangeSubTargets(BattleDiceCardModel,BattleUnitModel)">
      <summary></summary>
      <param name="card"></param>
      <param name="mainTarget"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.ChangeTargetSlot(BattleDiceCardModel,BattleUnitModel,System.Int32,System.Int32,System.Boolean)">
      <summary></summary>
      <param name="card"></param>
      <param name="target"></param>
      <param name="currentSlot"></param>
      <param name="targetSlot"></param>
      <param name="teamkill"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.DestroyPassive(PassiveAbilityBase)">
      <summary></summary>
      <param name="passive"></param>
    </member>
    <member name="M:BattleUnitPassiveDetail.DestroyPassiveAll">
      <summary></summary>
    </member>
    <member name="M:BattleUnitPassiveDetail.DmgFactor(System.Int32,DamageType,KeywordBuf)">
      <summary></summary>
      <param name="dmg"></param>
      <param name="type"></param>
      <param name="keyword"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.DontChangeResistByBreak">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.GetBreakDamageReduction(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.GetBreakDamageReductionAll(System.Int32,DamageType,BattleUnitModel)">
      <summary></summary>
      <param name="dmg"></param>
      <param name="dmgType"></param>
      <param name="attacker"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.GetDamageReduction(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.GetDamageReductionAll">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.GetEmotionCoinAdder(System.Int32)">
      <summary></summary>
      <param name="defaultCount"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.GetMaxBpBonus">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.GetMaxHpBonus">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.GetMinHp">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.GetMultiplierOnGiveKeywordBufByCard(BattleUnitBuf,BattleUnitModel)">
      <summary></summary>
      <param name="buf"></param>
      <param name="target"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.GetPriorityAdder(BattleDiceCardModel,System.Int32)">
      <summary></summary>
      <param name="card"></param>
      <param name="speed"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.GetResistBP(AtkResist,LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="origin"></param>
      <param name="detail"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.GetResistHP(AtkResist,LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="origin"></param>
      <param name="detail"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.GetSpeedDiceAdder(System.Int32)">
      <summary></summary>
      <param name="speedDiceResult"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.GetStartHp(System.Single)">
      <summary></summary>
      <param name="hp"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.GetTakenGuardBreakDamageAdder(System.Int32)">
      <summary></summary>
      <param name="dmg"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.HasPassive``1">
      <summary>指定した型のパッシブがアクティブ状態で保有している事を判断します。</summary>
      <typeparam name="T">保有している事を確認するパッシブの型。</typeparam>
      <returns>指定した型のパッシブがアクティブ状態で保有している場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.HasPassiveInReady``1">
      <summary>指定した型のパッシブが待機状態で保有している事を判断します。</summary>
      <typeparam name="T">保有している事を確認するパッシブの型。</typeparam>
      <returns>指定した型のパッシブが待機状態で保有している場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.Init">
      <summary></summary>
    </member>
    <member name="M:BattleUnitPassiveDetail.IsActionable">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.IsDamageReductionForEvent">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.IsImmortal">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.IsImmune(KeywordBuf)">
      <summary>指定した状態に対して耐性を持っていて、キャラクターに付与されている場合は効果を発揮しない事を判定します。このメソッドは各パッシブの実装で呼び出されます。</summary>
      <param name="buf">耐性情報を取得する状態。</param>
      <returns>指定した状態に対して耐性である場合は true、そうでない場合は false を返します。</returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.IsImmuneBreakDmg(DamageType)">
      <summary></summary>
      <param name="type"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.IsImmuneByFarAtk">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.IsImmuneDmg(DamageType,KeywordBuf)">
      <summary></summary>
      <param name="type"></param>
      <param name="keyword"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.IsImmuneDmg">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.IsInvincible">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.IsInvincibleBp">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.IsInvincibleHp">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.IsKnockoutInsteadOfDeath">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.IsNegativeHalfExceptBurn">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.IsStraighten">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.IsTargetable">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.IsTargetable(BattleUnitModel)">
      <summary></summary>
      <param name="attacker"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.IsTargetable_theLast">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.MaxPlayPointAdder">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnAddKeywordBufByCard(BattleUnitBuf,System.Int32)">
      <summary></summary>
      <param name="buf"></param>
      <param name="stack"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnAddKeywordBufByCardForEvent(KeywordBuf,System.Int32,BufReadyType)">
      <summary></summary>
      <param name="keywordBuf"></param>
      <param name="stack"></param>
      <param name="readyType"></param>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnAfterRollSpeedDice">
      <summary></summary>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnBattleEnd">
      <summary></summary>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnBattleEnd_alive">
      <summary></summary>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnBreakGageZero">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnBreakState">
      <summary></summary>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnCheckEndBattle(System.Boolean@,System.Boolean@)">
      <summary></summary>
      <param name="librarianExists"></param>
      <param name="enemyExists"></param>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnCreated">
      <summary>待機状態のパッシブ全てに対して、アクティブ状態に変更し、 <see cref="M:PassiveAbilityBase.OnCreated()" /> を呼び出します。</summary>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnDestroyCard(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="card"></param>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnDestroyed">
      <summary></summary>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnDie">
      <summary></summary>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnDieOtherUnit(BattleUnitModel)">
      <summary></summary>
      <param name="unit"></param>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnDiscardByAbility(System.Collections.Generic.List{BattleDiceCardModel})">
      <summary></summary>
      <param name="cards"></param>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnDrawCard">
      <summary></summary>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnDrawParrying(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnEndBattle(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="curCard"></param>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnEndOneSide">
      <summary></summary>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnEndOneSideVictim(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="attackerCard"></param>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnEndParrying(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="curCard"></param>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnExhaustBullet">
      <summary></summary>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnFixedUpdateInWaitPhase(System.Single)">
      <summary></summary>
      <param name="deltaTime"></param>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnGainChargeStack">
      <summary></summary>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnGiveKeywordBufByCard(BattleUnitBuf,System.Int32,BattleUnitModel)">
      <summary></summary>
      <param name="buf"></param>
      <param name="stack"></param>
      <param name="target"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnKill(BattleUnitModel)">
      <summary></summary>
      <param name="target"></param>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnLevelUpEmotion">
      <summary></summary>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnLoseHp(System.Int32)">
      <summary></summary>
      <param name="dmg"></param>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnLoseParrying(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnMakeBreakState(BattleUnitModel)">
      <summary></summary>
      <param name="target"></param>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnOtherUnitReservedCostChanged(BattleUnitModel,System.Int32)">
      <summary></summary>
      <param name="unit"></param>
      <param name="cur"></param>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnRecoverHp(System.Int32)">
      <summary></summary>
      <param name="amount"></param>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnReleaseBreak">
      <summary></summary>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnRollDice(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnRollDiceInRencounter">
      <summary></summary>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnRollSpeedDice">
      <summary></summary>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnRoundEnd">
      <summary></summary>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnRoundEnd_before">
      <summary></summary>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnRoundEndTheLast">
      <summary></summary>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnRoundEndTheLast_ignoreDead">
      <summary></summary>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnRoundStart">
      <summary></summary>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnRoundStartAfter">
      <summary></summary>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnSelectCardAuto(BattleDiceCardModel,System.Int32)">
      <summary></summary>
      <param name="origin"></param>
      <param name="currentDiceSlotIdx"></param>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnStartBattle">
      <summary></summary>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnStartOneSideAction(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="card"></param>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnStartParrying(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="card"></param>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnStartTargetedByAreaAtk(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="attackerCard"></param>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnStartTargetedOneSide(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="attackerCard"></param>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnSucceedAreaAttack(BattleDiceBehavior,BattleUnitModel)">
      <summary></summary>
      <param name="behavior"></param>
      <param name="target"></param>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnSucceedAttack(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnSucceedAttackEvent(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnTakeBreakDamageByAttack(BattleDiceBehavior,System.Int32)">
      <summary></summary>
      <param name="atkDice"></param>
      <param name="breakdmg"></param>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnTakeDamageByAttack(BattleDiceBehavior,System.Int32)">
      <summary></summary>
      <param name="atkDice"></param>
      <param name="dmg"></param>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnUnitCreated">
      <summary></summary>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnUseCard(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="curCard"></param>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnUseChargeStack">
      <summary></summary>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnWaveStart">
      <summary>舞台の開始時に呼び出されます。</summary>
    </member>
    <member name="M:BattleUnitPassiveDetail.OnWinParrying(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:BattleUnitPassiveDetail.RemovePassive">
      <summary></summary>
    </member>
    <member name="M:BattleUnitPassiveDetail.SpeedDiceBreakAdder">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.SpeedDiceNumAdder">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BattleUnitPassiveDetail.TeamKill">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="P:BattleUnitPassiveDetail.PassiveList">
      <summary></summary>
    </member>
    <member name="P:BattleUnitPassiveDetail.ReadyPassiveList">
      <summary></summary>
    </member>
    <member name="T:BookEquipEffect">
      <summary>コア ページ装着時にキャラクターへ適応するステータス等の効果を格納します。このオブジェクトは StaticInfo/EquipPage の EquipEffect 要素 をモデル化したものです。</summary>
    </member>
    <member name="F:BookEquipEffect._PassiveList">
      <summary>所有するパッシブのリスト (Passive 要素とマッピング)</summary>
    </member>
    <member name="F:BookEquipEffect.AddedStartDraw">
      <summary>初期手札の追加ドロー数 (AddedStartDraw 要素とマッピング)</summary>
    </member>
    <member name="F:BookEquipEffect.Break">
      <summary>最大混乱抵抗値 (Break 要素とマッピング)</summary>
    </member>
    <member name="F:BookEquipEffect.CardList">
      <summary></summary>
    </member>
    <member name="F:BookEquipEffect.DeadLine">
      <summary>死亡扱いとなる体力。現在体力がこの数値以下となった場合、死亡扱い (DeadLine 要素とマッピング)</summary>
    </member>
    <member name="F:BookEquipEffect.HBResist">
      <summary>打撃混乱耐性 (HBResist 要素とマッピング)</summary>
    </member>
    <member name="F:BookEquipEffect.Hp">
      <summary>最大体力 (HP 要素とマッピング)</summary>
    </member>
    <member name="F:BookEquipEffect.HpReduction">
      <summary>開始体力の減少量 (HpReduction 要素とマッピング)</summary>
    </member>
    <member name="F:BookEquipEffect.HResist">
      <summary>打撃耐性 (HResist 要素とマッピング)</summary>
    </member>
    <member name="F:BookEquipEffect.MaxPlayPoint">
      <summary>光の初期最大値 (MaxPlayPoint 要素とマッピング)</summary>
    </member>
    <member name="F:BookEquipEffect.OnlyCard">
      <summary>このコア ページの専用バトル ページの数値 ID を格納したリスト (OnlyCard 要素とマッピング)</summary>
    </member>
    <member name="F:BookEquipEffect.PassiveCost">
      <summary>(マッピングなし)</summary>
    </member>
    <member name="F:BookEquipEffect.PassiveList">
      <summary>所有するパッシブ LorID のリスト (マッピングなし)</summary>
    </member>
    <member name="F:BookEquipEffect.PBResist">
      <summary>貫通混乱耐性 (PBResist 要素とマッピング)</summary>
    </member>
    <member name="F:BookEquipEffect.PResist">
      <summary>貫通耐性 (PResist 要素とマッピング)</summary>
    </member>
    <member name="F:BookEquipEffect.SBResist">
      <summary>斬撃混乱耐性 (SBResist 要素とマッピング)</summary>
    </member>
    <member name="F:BookEquipEffect.Speed">
      <summary>速度ダイスの最大値 (Speed 要素とマッピング)</summary>
    </member>
    <member name="F:BookEquipEffect.SpeedDiceNum">
      <summary>未使用フィールド。初期速度ダイス数は <see cref="F:BookXmlInfo.speedDiceNumber" /> を使用しています (SpeedDiceNum 要素とマッピング)</summary>
    </member>
    <member name="F:BookEquipEffect.SpeedMin">
      <summary>速度ダイスの最小値 (SpeedMin 要素とマッピング)</summary>
    </member>
    <member name="F:BookEquipEffect.SResist">
      <summary>斬撃耐性 (SResist 要素とマッピング)</summary>
    </member>
    <member name="F:BookEquipEffect.StartPlayPoint">
      <summary>光の初期現在値 (StartPlayPoint 要素とマッピング)</summary>
    </member>
    <member name="M:BookEquipEffect.#ctor">
      <summary></summary>
    </member>
    <member name="T:BookModel">
      <summary>キャラクターが装着するコア ページを表します。</summary>
    </member>
    <member name="F:BookModel.basicBookOwner">
      <summary></summary>
    </member>
    <member name="F:BookModel.hBpResist">
      <summary></summary>
    </member>
    <member name="F:BookModel.hHpResist">
      <summary></summary>
    </member>
    <member name="F:BookModel.instanceId">
      <summary>ページ ID</summary>
    </member>
    <member name="F:BookModel.originData">
      <summary></summary>
    </member>
    <member name="F:BookModel.owner">
      <summary></summary>
    </member>
    <member name="F:BookModel.pBpResist">
      <summary></summary>
    </member>
    <member name="F:BookModel.pHpResist">
      <summary></summary>
    </member>
    <member name="F:BookModel.reservedData">
      <summary></summary>
    </member>
    <member name="F:BookModel.save_bookmark">
      <summary></summary>
    </member>
    <member name="F:BookModel.save_deck">
      <summary></summary>
    </member>
    <member name="F:BookModel.save_deck2">
      <summary></summary>
    </member>
    <member name="F:BookModel.save_deck3">
      <summary></summary>
    </member>
    <member name="F:BookModel.save_deck4">
      <summary></summary>
    </member>
    <member name="F:BookModel.save_equipedbookList">
      <summary></summary>
    </member>
    <member name="F:BookModel.save_equipedpassivebookInstanceId">
      <summary></summary>
    </member>
    <member name="F:BookModel.save_exp">
      <summary></summary>
    </member>
    <member name="F:BookModel.save_id">
      <summary></summary>
    </member>
    <member name="F:BookModel.save_instanceId">
      <summary></summary>
    </member>
    <member name="F:BookModel.save_invenlock">
      <summary></summary>
    </member>
    <member name="F:BookModel.save_level">
      <summary></summary>
    </member>
    <member name="F:BookModel.save_passiveList">
      <summary></summary>
    </member>
    <member name="F:BookModel.save_ver2level">
      <summary></summary>
    </member>
    <member name="F:BookModel.sBpResist">
      <summary></summary>
    </member>
    <member name="F:BookModel.sHpResist">
      <summary></summary>
    </member>
    <member name="M:BookModel.#ctor">
      <summary></summary>
    </member>
    <member name="M:BookModel.#ctor(BookXmlInfo)">
      <summary></summary>
      <param name="classInfo"></param>
    </member>
    <member name="M:BookModel.AddCardFromInventoryToCurrentDeck(LorId)">
      <summary></summary>
      <param name="cardId"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.ApplyPassiveSuccession">
      <summary></summary>
    </member>
    <member name="M:BookModel.CanEquipBookByGivePassive">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.CanSuccessionPassive(PassiveModel,GivePassiveState@)">
      <summary></summary>
      <param name="targetpassive"></param>
      <param name="haspassiveState"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.CanSuccessionPassiveByCost(PassiveModel,PassiveModel,System.Boolean)">
      <summary></summary>
      <param name="prevpassive"></param>
      <param name="nextpassive"></param>
      <param name="origin"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.CanToGivePassiveBook(System.Boolean)">
      <summary></summary>
      <param name="origin"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.ChangeDeck(System.Int32)">
      <summary></summary>
      <param name="index"></param>
    </member>
    <member name="M:BookModel.ChangePassive(PassiveModel,PassiveModel)">
      <summary></summary>
      <param name="currentBookPassive"></param>
      <param name="changeBookPassive"></param>
    </member>
    <member name="M:BookModel.CheckCustomCoreBook">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.CheckDeletePassiveOtherBook">
      <summary></summary>
    </member>
    <member name="M:BookModel.CheckExistCurrentPassive">
      <summary></summary>
    </member>
    <member name="M:BookModel.CheckExistPassiveBook">
      <summary></summary>
    </member>
    <member name="M:BookModel.CheckOverlapPassive">
      <summary></summary>
    </member>
    <member name="M:BookModel.CheckOverPassiveCost(System.Boolean)">
      <summary></summary>
      <param name="origin"></param>
    </member>
    <member name="M:BookModel.ContainsCategory(BookCategory)">
      <summary></summary>
      <param name="category"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.CopyCurrentDeck">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.CreateBookForWorkshop">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.CreateDeckByDeckInfo">
      <summary></summary>
    </member>
    <member name="M:BookModel.CreatePassiveList">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.CreateSoulCard(System.Int32)">
      <summary></summary>
      <param name="emotionLevel"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.EmptyDeckToInventory">
      <summary></summary>
    </member>
    <member name="M:BookModel.EmptyDeckToInventoryAll">
      <summary></summary>
    </member>
    <member name="M:BookModel.EquipGivePassiveBook(BookModel)">
      <summary></summary>
      <param name="book"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.ExistReceivedPassive">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetBookCategories">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetBookClassInfoId">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetBookMarkState">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetCardCount(LorId)">
      <summary></summary>
      <param name="cardId"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetCardListByIndex(System.Int32)">
      <summary></summary>
      <param name="index"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetCardListFromAllDeck">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetCardListFromCurrentDeck">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetCharacterName">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetCurrentDeckIndex">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetCurrentPassiveCost(System.Boolean)">
      <summary></summary>
      <param name="origin"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetDeckAll_nocopy">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetDeckCardModelAll">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetDeckSize">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetEquipedBookList(System.Boolean)">
      <summary></summary>
      <param name="origin"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetGiveBookModel">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetLimit">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetLockInventoryState">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetMaxLevel">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetMaxPassiveCost">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetMaxPlayPoint">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetName">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetOnlyCards">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetOriginalCharcterName">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetPassiveBookState">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetPassiveInfoList(System.Boolean)">
      <summary>装備中のパッシブ情報のリストを取得します。</summary>
      <param name="onlyActivated">未使用引数</param>
      <returns>パッシブ情報のリスト。</returns>
    </member>
    <member name="M:BookModel.GetPassiveModelList">
      <summary>装備中のパッシブ モデル (ローカライズに影響しないパッシブ情報をモデル化したオブジェクト) のリストを取得します。</summary>
      <returns>装備中のパッシブ モデルのリスト。</returns>
    </member>
    <member name="M:BookModel.GetPossibleRemainCost(PassiveModel,System.Boolean)">
      <summary></summary>
      <param name="ownequipedPassive"></param>
      <param name="origin"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetRarity">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetRarityText">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetResistBP(LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="detail"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetResistBP_Text(LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="detail"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetResistBP_Text(LOR_DiceSystem.BehaviourDetail,AtkResist)">
      <summary></summary>
      <param name="detail"></param>
      <param name="atkResist"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetResistHP(LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="detail"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetResistHP_Text(LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="detail"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetResistHP_Text(LOR_DiceSystem.BehaviourDetail,AtkResist)">
      <summary></summary>
      <param name="detail"></param>
      <param name="atkResist"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetResistRate(AtkResist)">
      <summary></summary>
      <param name="atkResist"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetSaveData">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetSoulCards">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetSpeedDiceRule(BattleUnitModel)">
      <summary></summary>
      <param name="unit"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetSpeedDiceText">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetStartDraw">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetStartPlayPoint">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetSuccessionPassivesByBook(BookModel,System.Boolean)">
      <summary></summary>
      <param name="book"></param>
      <param name="origin"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.GetThumbSprite">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.InitReservedDataForPassiveSuccession">
      <summary></summary>
    </member>
    <member name="M:BookModel.IsBasicBook">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.IsCanUsingEquipPageWhenBlueReverberation">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.IsDeckLocked">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.IsEmptyDeck(System.Int32)">
      <summary></summary>
      <param name="idx"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.IsEmptyDeckAll">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.IsEquipedPassiveBook">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.isExistGivePassive">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.IsFixedDeck">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.IsLockByBluePrimary">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.IsMaxCost">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.IsMultiDeck">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.IsNotFullEquipPassiveBook">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.LoadFromSaveData(GameSave.SaveData)">
      <summary>指定したページのセーブ データを読み込みます。</summary>
      <param name="data">ページの情報が格納されたセーブ データ。</param>
    </member>
    <member name="M:BookModel.LoadFromSaveDataExceptId(GameSave.SaveData)">
      <summary></summary>
      <param name="data"></param>
    </member>
    <member name="M:BookModel.MoveCardFromCurrentDeckToInventory(LorId)">
      <summary></summary>
      <param name="cardId"></param>
      <returns></returns>
    </member>
    <member name="M:BookModel.ReleaseAllEquipedPassiveBooks(System.Boolean)">
      <summary></summary>
      <param name="origin"></param>
    </member>
    <member name="M:BookModel.ReleasePassive(PassiveModel,System.Boolean)">
      <summary></summary>
      <param name="passive"></param>
      <param name="origin"></param>
    </member>
    <member name="M:BookModel.ReleasePassiveAll">
      <summary></summary>
    </member>
    <member name="M:BookModel.ResisterBookMark(System.Boolean)">
      <summary></summary>
      <param name="on"></param>
    </member>
    <member name="M:BookModel.SetBasicBookOwner(UnitDataModel)">
      <summary></summary>
      <param name="owner"></param>
    </member>
    <member name="M:BookModel.SetBp(System.Int32)">
      <summary></summary>
      <param name="maxBp"></param>
    </member>
    <member name="M:BookModel.SetCharacterName(System.String)">
      <summary></summary>
      <param name="s"></param>
    </member>
    <member name="M:BookModel.SetHp(System.Int32)">
      <summary></summary>
      <param name="maxHp"></param>
    </member>
    <member name="M:BookModel.SetLockInventory(System.Boolean)">
      <summary></summary>
      <param name="on"></param>
    </member>
    <member name="M:BookModel.SetMaxPlayPoint(System.Int32)">
      <summary></summary>
      <param name="maxPoint"></param>
    </member>
    <member name="M:BookModel.SetOriginalCharacterName">
      <summary></summary>
    </member>
    <member name="M:BookModel.SetOriginalPlayPoint">
      <summary></summary>
    </member>
    <member name="M:BookModel.SetOriginalResists">
      <summary></summary>
    </member>
    <member name="M:BookModel.SetOriginalSpeed">
      <summary></summary>
    </member>
    <member name="M:BookModel.SetOriginalSpeedNum">
      <summary></summary>
    </member>
    <member name="M:BookModel.SetOriginalStat">
      <summary></summary>
    </member>
    <member name="M:BookModel.SetOwner(UnitDataModel)">
      <summary></summary>
      <param name="newOwner"></param>
    </member>
    <member name="M:BookModel.SetResistBP(LOR_DiceSystem.BehaviourDetail,AtkResist)">
      <summary></summary>
      <param name="detail"></param>
      <param name="resist"></param>
    </member>
    <member name="M:BookModel.SetResistHP(LOR_DiceSystem.BehaviourDetail,AtkResist)">
      <summary></summary>
      <param name="detail"></param>
      <param name="resist"></param>
    </member>
    <member name="M:BookModel.SetSpeedDiceMax(System.Int32)">
      <summary></summary>
      <param name="maxValue"></param>
    </member>
    <member name="M:BookModel.SetSpeedDiceMin(System.Int32)">
      <summary></summary>
      <param name="minValue"></param>
    </member>
    <member name="M:BookModel.SetSpeedDiceNum(System.Int32)">
      <summary></summary>
      <param name="num"></param>
    </member>
    <member name="M:BookModel.SetStartPlayPoint(System.Int32)">
      <summary></summary>
      <param name="playPoint"></param>
    </member>
    <member name="M:BookModel.SortPassive(System.Collections.Generic.List{PassiveModel})">
      <summary></summary>
      <param name="passivelist"></param>
    </member>
    <member name="M:BookModel.Test2">
      <summary></summary>
    </member>
    <member name="M:BookModel.TryGainPassive">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.TryGainUniquePassive">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookModel.UnEquipGivePassiveBook(BookModel,System.Boolean)">
      <summary></summary>
      <param name="unequipbook"></param>
      <param name="origin"></param>
    </member>
    <member name="P:BookModel.AddedStartDraw">
      <summary></summary>
    </member>
    <member name="P:BookModel.bookIcon">
      <summary></summary>
    </member>
    <member name="P:BookModel.bookIconGlow">
      <summary></summary>
    </member>
    <member name="P:BookModel.BookId">
      <summary></summary>
    </member>
    <member name="P:BookModel.Break">
      <summary></summary>
    </member>
    <member name="P:BookModel.ClassInfo">
      <summary>StaticInfo (EquipPage.txt) に定義されたページ情報を取得します。</summary>
    </member>
    <member name="P:BookModel.DeadLine">
      <summary>死亡扱いとなる体力を取得します。現在体力がこの数値以下となった場合、死亡扱いとなります。</summary>
    </member>
    <member name="P:BookModel.EmotionLevel">
      <summary></summary>
    </member>
    <member name="P:BookModel.equipeffect">
      <summary></summary>
    </member>
    <member name="P:BookModel.HP">
      <summary></summary>
    </member>
    <member name="P:BookModel.HpReduction">
      <summary></summary>
    </member>
    <member name="P:BookModel.IsRandomFace">
      <summary></summary>
    </member>
    <member name="P:BookModel.IsWorkshop">
      <summary></summary>
    </member>
    <member name="P:BookModel.Name">
      <summary>ページ名を取得します。</summary>
    </member>
    <member name="P:BookModel.Rarity">
      <summary></summary>
    </member>
    <member name="P:BookModel.SpeedDiceNum">
      <summary></summary>
    </member>
    <member name="P:BookModel.SpeedMax">
      <summary></summary>
    </member>
    <member name="P:BookModel.SpeedMin">
      <summary></summary>
    </member>
    <member name="T:BookXmlInfo">
      <summary>コア ページの XML データを格納します。このオブジェクトは StaticInfo/EquipPage の Book 要素 をモデル化したものです。</summary>
    </member>
    <member name="F:BookXmlInfo._bookIcon">
      <summary>アイコン名 (BookIcon 要素とマッピング)</summary>
    </member>
    <member name="F:BookXmlInfo._id">
      <summary>コア ページ数値 ID (ID 属性とマッピング)</summary>
    </member>
    <member name="F:BookXmlInfo.canNotEquip">
      <summary>キャラクターに装着できないことを示すフラグ (NotEquip 要素とマッピング)</summary>
    </member>
    <member name="F:BookXmlInfo.categoryList">
      <summary>(Category 要素とマッピング)</summary>
    </member>
    <member name="F:BookXmlInfo.Chapter">
      <summary>所属するチャプター (Chapter 要素とマッピング)</summary>
    </member>
    <member name="F:BookXmlInfo.CharacterSkin">
      <summary>装着時に適応するキャラクター スキン名のリスト (CharacterSkin 要素とマッピング)</summary>
    </member>
    <member name="F:BookXmlInfo.episode">
      <summary>シナリオのエピソード番号 (Episode 要素とマッピング)</summary>
    </member>
    <member name="F:BookXmlInfo.EquipEffect">
      <summary>装着時に適応するステータス効果 (EquipEffect 要素とマッピング)</summary>
    </member>
    <member name="F:BookXmlInfo.gender">
      <summary>使用するキャラクター スキンの性別 (SkinGender 要素とマッピング)</summary>
    </member>
    <member name="F:BookXmlInfo.InnerName">
      <summary>内部名 (Name とマッピング)</summary>
    </member>
    <member name="F:BookXmlInfo.isError">
      <summary>(マッピングなし)</summary>
    </member>
    <member name="F:BookXmlInfo.motionSoundList">
      <summary></summary>
    </member>
    <member name="F:BookXmlInfo.optionList">
      <summary></summary>
    </member>
    <member name="F:BookXmlInfo.RandomFace">
      <summary></summary>
    </member>
    <member name="F:BookXmlInfo.RangeType">
      <summary>使用できるバトル ページの攻撃距離 (RangeType 要素とマッピング)</summary>
    </member>
    <member name="F:BookXmlInfo.Rarity">
      <summary>レアリティ (Rarity 要素とマッピング)</summary>
    </member>
    <member name="F:BookXmlInfo.remainRewardValue">
      <summary>(マッピングなし)</summary>
    </member>
    <member name="F:BookXmlInfo.skinType">
      <summary></summary>
    </member>
    <member name="F:BookXmlInfo.speedDiceNumber">
      <summary>初期速度ダイス数 (SpeedDiceNum 要素とマッピング)</summary>
    </member>
    <member name="F:BookXmlInfo.SuccessionPossibleNumber">
      <summary></summary>
    </member>
    <member name="F:BookXmlInfo.TextId">
      <summary>テキスト ID。ローカライズされたコア ページ名を取得するために使用します (TextId 要素とマッピング)</summary>
    </member>
    <member name="F:BookXmlInfo.workshopID">
      <summary>ワークショップ ID (マッピングなし)</summary>
    </member>
    <member name="M:BookXmlInfo.#ctor">
      <summary></summary>
    </member>
    <member name="M:BookXmlInfo.Copy">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookXmlInfo.GetCharacterSkin">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:BookXmlInfo.GetThumbSprite">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="P:BookXmlInfo.BookIcon">
      <summary>アイコン名を取得します。</summary>
    </member>
    <member name="P:BookXmlInfo.DeckId">
      <summary>デッキ LOR ID を取得します。本家または BaseMod で、コア ページ数値 ID が 20 以下の場合は LorId(:1) を返します。それ以外は コア ページ LOR ID を返します。</summary>
    </member>
    <member name="P:BookXmlInfo.Desc">
      <summary></summary>
    </member>
    <member name="P:BookXmlInfo.id">
      <summary>コア ページ LOR ID を取得します。</summary>
    </member>
    <member name="P:BookXmlInfo.Limit">
      <summary>コア ページの入手可能上限を取得します。普及の場合は 5、恒久の場合は 4、限定の場合は 3、それ以外の場合は 1 を返します。</summary>
    </member>
    <member name="P:BookXmlInfo.Name">
      <summary>ローカライズされたコア ページ名を取得します。</summary>
    </member>
    <member name="T:BufPositiveType">
      <summary>状態のポジティブ タイプを表します。</summary>
    </member>
    <member name="F:BufPositiveType.Negative">
      <summary>ネガティブ (状態異常)</summary>
    </member>
    <member name="F:BufPositiveType.None">
      <summary>なし</summary>
    </member>
    <member name="F:BufPositiveType.Positive">
      <summary>ポジティブ</summary>
    </member>
    <member name="T:DiceCardAbilityBase">
      <summary>バトル ページのバトル ダイスに付与された効果を表す基底クラスです。全てのバトル ダイス効果はこのクラスを派生して実装されます。</summary>
    </member>
    <member name="F:DiceCardAbilityBase.behavior">
      <summary></summary>
    </member>
    <member name="M:DiceCardAbilityBase.#ctor">
      <summary></summary>
    </member>
    <member name="M:DiceCardAbilityBase.ActivateBonusAttackDice">
      <summary></summary>
    </member>
    <member name="M:DiceCardAbilityBase.AfterAction">
      <summary></summary>
    </member>
    <member name="M:DiceCardAbilityBase.BeforeGiveDamage">
      <summary>ダメージを与える直前に呼び出されます。</summary>
    </member>
    <member name="M:DiceCardAbilityBase.BeforeGiveDamage(BattleUnitModel)">
      <summary>ダメージを与える直前に呼び出されます。</summary>
      <param name="target">ダメージを与える対象キャラクター。</param>
    </member>
    <member name="M:DiceCardAbilityBase.BeforeRollDice">
      <summary></summary>
    </member>
    <member name="M:DiceCardAbilityBase.BeforeRollDice_Target(BattleDiceBehavior)">
      <summary></summary>
      <param name="targetDice"></param>
    </member>
    <member name="M:DiceCardAbilityBase.GetKeywords">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:DiceCardAbilityBase.GetMaximumPercentDmg">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:DiceCardAbilityBase.IsAttackDice(LOR_DiceSystem.BehaviourDetail)">
      <summary>指定したバトル ダイスが攻撃ダイスである事を判定します。</summary>
      <param name="diceDetail">判定するバトル ダイスの振る舞いの詳細。</param>
      <returns>指定したバトル ダイスが攻撃ダイスである場合は true、そうでない場合は false を返します。</returns>
    </member>
    <member name="M:DiceCardAbilityBase.IsDefenseDice(LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="diceDetail"></param>
      <returns></returns>
    </member>
    <member name="M:DiceCardAbilityBase.IsDoublePower">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:DiceCardAbilityBase.OnAfterAreaAtk(System.Collections.Generic.List{BattleUnitModel},System.Collections.Generic.List{BattleUnitModel})">
      <summary></summary>
      <param name="damagedList"></param>
      <param name="defensedList"></param>
    </member>
    <member name="M:DiceCardAbilityBase.OnDrawParrying">
      <summary></summary>
    </member>
    <member name="M:DiceCardAbilityBase.OnLoseParrying">
      <summary></summary>
    </member>
    <member name="M:DiceCardAbilityBase.OnRollDice">
      <summary>バトル ダイスを振る時に呼び出されます。</summary>
    </member>
    <member name="M:DiceCardAbilityBase.OnSucceedAreaAttack(BattleUnitModel)">
      <summary></summary>
      <param name="target"></param>
    </member>
    <member name="M:DiceCardAbilityBase.OnSucceedAttack">
      <summary>攻撃の的中時に呼び出されます。</summary>
    </member>
    <member name="M:DiceCardAbilityBase.OnSucceedAttack(BattleUnitModel)">
      <summary>攻撃の的中時に呼び出されます。</summary>
      <param name="target">攻撃対象のキャラクター。</param>
    </member>
    <member name="M:DiceCardAbilityBase.OnWinParrying">
      <summary></summary>
    </member>
    <member name="M:DiceCardAbilityBase.OnWinParryingDefense">
      <summary></summary>
    </member>
    <member name="P:DiceCardAbilityBase.card">
      <summary></summary>
    </member>
    <member name="P:DiceCardAbilityBase.Invalidity">
      <summary></summary>
    </member>
    <member name="P:DiceCardAbilityBase.IsImmuneDestory">
      <summary></summary>
    </member>
    <member name="P:DiceCardAbilityBase.IsPercentDmg">
      <summary></summary>
    </member>
    <member name="P:DiceCardAbilityBase.Keywords">
      <summary>ヘルプ メッセージ用のキーワードを取得します。</summary>
    </member>
    <member name="P:DiceCardAbilityBase.owner">
      <summary>バトル ダイス効果の所有キャラクターを取得します。</summary>
    </member>
    <member name="T:DiceCardSelfAbilityBase">
      <summary>バトル ページそのものに付与された効果を表す基底クラスです。全てのバトル ページ効果はこのクラスを派生して実装されます。</summary>
    </member>
    <member name="F:DiceCardSelfAbilityBase.card">
      <summary></summary>
    </member>
    <member name="M:DiceCardSelfAbilityBase.#ctor">
      <summary></summary>
    </member>
    <member name="M:DiceCardSelfAbilityBase.AfterAction">
      <summary></summary>
    </member>
    <member name="M:DiceCardSelfAbilityBase.AfterGiveDamage(System.Int32,BattleUnitModel)">
      <summary></summary>
      <param name="damage"></param>
      <param name="target"></param>
    </member>
    <member name="M:DiceCardSelfAbilityBase.BeforeAddToHand(BattleUnitModel,BattleDiceCardModel)">
      <summary></summary>
      <param name="unit"></param>
      <param name="self"></param>
      <returns></returns>
    </member>
    <member name="M:DiceCardSelfAbilityBase.BeforeGiveDamage(BattleDiceBehavior)">
      <summary>ダメージを与える直前に呼び出されます。</summary>
      <param name="behavior">ダメージを与えようとしているバトル ダイスに対するビヘイビア (振る舞いを操作するオブジェクト)。</param>
    </member>
    <member name="M:DiceCardSelfAbilityBase.BeforeRollDice(BattleDiceBehavior)">
      <summary>ダイス ロールの直前に呼び出されます。バトル ダイスに対するボーナス値の指定などはこのメソッドで行います。</summary>
      <param name="behavior">ロールに使用されているバトル ダイスに対するビヘイビア (振る舞いを操作するオブジェクト)。</param>
    </member>
    <member name="M:DiceCardSelfAbilityBase.GetCostAdder(BattleUnitModel,BattleDiceCardModel)">
      <summary></summary>
      <param name="unit"></param>
      <param name="self"></param>
      <returns></returns>
    </member>
    <member name="M:DiceCardSelfAbilityBase.GetCostLast(BattleUnitModel,BattleDiceCardModel,System.Int32)">
      <summary></summary>
      <param name="unit"></param>
      <param name="self"></param>
      <param name="oldCost"></param>
      <returns></returns>
    </member>
    <member name="M:DiceCardSelfAbilityBase.IsAttackDice(LOR_DiceSystem.BehaviourDetail)">
      <summary>指定したバトル ダイスが攻撃ダイスである事を判定します。</summary>
      <param name="diceDetail">判定するバトル ダイスの振る舞いの詳細。</param>
      <returns>指定したバトル ダイスが攻撃ダイスである場合は true、そうでない場合は false を返します。</returns>
    </member>
    <member name="M:DiceCardSelfAbilityBase.IsDefenseDice(LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="diceDetail"></param>
      <returns></returns>
    </member>
    <member name="M:DiceCardSelfAbilityBase.IsFixedCost">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:DiceCardSelfAbilityBase.IsOnlyAllyUnit">
      <summary>味方キャラクターのみターゲット可能なバトル ページである事を判定します。自分自身も含まれるかどうかは <see cref="M:DiceCardSelfAbilityBase.IsTargetableSelf" /> に依存します。</summary>
      <returns>ターゲット可能な場合は true、そうでない場合は false を返します。</returns>
    </member>
    <member name="M:DiceCardSelfAbilityBase.IsTargetableAllUnit">
      <summary>全てのキャラクターをターゲット可能なバトル ページである事を判定します。自分自身も含まれるかどうかは <see cref="M:DiceCardSelfAbilityBase.IsTargetableSelf" /> に依存します。</summary>
      <returns>ターゲット可能な場合は true、そうでない場合は false を返します。</returns>
    </member>
    <member name="M:DiceCardSelfAbilityBase.IsTargetableSelf">
      <summary>自分自身もターゲット可能なバトル ページである事を判定します。</summary>
      <returns>ターゲット可能な場合は true、そうでない場合は false を返します。</returns>
    </member>
    <member name="M:DiceCardSelfAbilityBase.IsTargetChangable(BattleUnitModel)">
      <summary></summary>
      <param name="attacker"></param>
      <returns></returns>
    </member>
    <member name="M:DiceCardSelfAbilityBase.IsTrueDamage">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:DiceCardSelfAbilityBase.IsValidTarget(BattleUnitModel,BattleDiceCardModel,BattleUnitModel)">
      <summary>指定したキャラクターをターゲット可能なバトル ページである事を判定します。<see cref="M:DiceCardSelfAbilityBase.IsTargetableSelf" />, <see cref="M:DiceCardSelfAbilityBase.IsOnlyAllyUnit" />, <see cref="M:DiceCardSelfAbilityBase.IsTargetableAllUnit" /> の条件を全て満たした場合に判定を行います。</summary>
      <param name="unit">バトル ページの所有キャラクター。</param>
      <param name="self">選択中のバトル ページ。</param>
      <param name="targetUnit">ターゲットとして選択したキャラクター。</param>
      <returns>ターゲット可能な場合は true、そうでない場合は false を返します。</returns>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnActivateResonance">
      <summary></summary>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnAddToHand(BattleUnitModel)">
      <summary></summary>
      <param name="owner"></param>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnApplyCard">
      <summary>装着時に呼び出されます。</summary>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnBreakState_inHand(BattleUnitModel,BattleDiceCardModel)">
      <summary></summary>
      <param name="unit"></param>
      <param name="self"></param>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnChooseCard(BattleUnitModel)">
      <summary>手札からこのバトル ページを選択しようとした時に呼び出されます。</summary>
      <param name="owner">バトル ページを選択しようとしたキャラクター。</param>
      <returns>このバトル ページを選択できる場合は true、選択できない場合は false を返します。</returns>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnDiscard(BattleUnitModel,BattleDiceCardModel)">
      <summary></summary>
      <param name="unit"></param>
      <param name="self"></param>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnDrawParrying">
      <summary></summary>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnEndAreaAttack">
      <summary></summary>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnEndBattle">
      <summary></summary>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnEnterCardPhase(BattleUnitModel,BattleDiceCardModel)">
      <summary></summary>
      <param name="unit"></param>
      <param name="self"></param>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnLoseParrying">
      <summary></summary>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnLoseParrying_inHand(BattleUnitModel,BattleDiceCardModel,BattleDiceBehavior)">
      <summary></summary>
      <param name="unit"></param>
      <param name="self"></param>
      <param name="behavior"></param>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnReleaseCard">
      <summary></summary>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnRollAreaAttack">
      <summary></summary>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnRollDice(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnRoundEnd(BattleUnitModel,BattleDiceCardModel)">
      <summary></summary>
      <param name="unit"></param>
      <param name="self"></param>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnRoundEnd_inHand(BattleUnitModel,BattleDiceCardModel)">
      <summary></summary>
      <param name="unit"></param>
      <param name="self"></param>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnRoundStart_inHand(BattleUnitModel,BattleDiceCardModel)">
      <summary>幕の開始時、バトル ページが手札にある場合に呼び出されます。</summary>
      <param name="unit">バトル ページを所有するキャラクター。</param>
      <param name="self">このバトル ページ効果が付与されたバトル ページ。</param>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnStartBattle">
      <summary>戦闘開始時に呼び出されます。</summary>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnStartBattleAfterCreateBehaviour">
      <summary>戦闘開始時、使用するバトル ページからバトル ダイスの振る舞いが生成された時に呼び出されます。</summary>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnStartOneSideAction">
      <summary>自分のバトル ページによる一方攻撃を開始する時に呼び出されます。</summary>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnStartParrying">
      <summary>バトル ページによるマッチが発生する直前に呼び出されます。</summary>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnSucceedAreaAttack(BattleUnitModel)">
      <summary></summary>
      <param name="target"></param>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnSucceedAtkEvent">
      <summary></summary>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnSucceedAttack">
      <summary>攻撃の的中時に呼び出されます。</summary>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnSucceedAttack(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnSucceedDefense">
      <summary></summary>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnSucceedDefEvent">
      <summary></summary>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnUseCard">
      <summary>バトル ページが使用される時に呼び出されます。</summary>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnUseCardEvent">
      <summary></summary>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnUseInstance(BattleUnitModel,BattleDiceCardModel,BattleUnitModel)">
      <summary>バトル ページが装着された時に呼び出されます。</summary>
      <param name="unit">バトル ページの所有キャラクター。</param>
      <param name="self">装着したバトル ページ。</param>
      <param name="targetUnit">バトル ページの対象キャラクター。</param>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnUseOtherCard_inHand(BattleUnitModel,BattleDiceCardModel,BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="unit"></param>
      <param name="self"></param>
      <param name="curCard"></param>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnWinParrying_inHand(BattleUnitModel,BattleDiceCardModel,BattleDiceBehavior)">
      <summary></summary>
      <param name="unit"></param>
      <param name="self"></param>
      <param name="behavior"></param>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnWinParryingAtk">
      <summary></summary>
    </member>
    <member name="M:DiceCardSelfAbilityBase.OnWinParryingDef">
      <summary></summary>
    </member>
    <member name="P:DiceCardSelfAbilityBase.IsUniteCard">
      <summary></summary>
    </member>
    <member name="P:DiceCardSelfAbilityBase.Keywords">
      <summary>ヘルプ メッセージ用のキーワードを取得します。</summary>
    </member>
    <member name="P:DiceCardSelfAbilityBase.owner">
      <summary>バトル ページ効果の所有キャラクターを取得します。</summary>
    </member>
    <member name="T:DiceStatBonus">
      <summary>バトル ダイスに付与するボーナス値を表します。</summary>
    </member>
    <member name="F:DiceStatBonus.breakDmg">
      <summary>混乱ダメージの増減量</summary>
    </member>
    <member name="F:DiceStatBonus.breakRate">
      <summary>混乱ダメージの増減量 (% 単位)</summary>
    </member>
    <member name="F:DiceStatBonus.dmg">
      <summary>ダメージの増減量</summary>
    </member>
    <member name="F:DiceStatBonus.dmgRate">
      <summary>ダメージの増減量 (% 単位)</summary>
    </member>
    <member name="F:DiceStatBonus.face">
      <summary></summary>
    </member>
    <member name="F:DiceStatBonus.guardBreakAdder">
      <summary></summary>
    </member>
    <member name="F:DiceStatBonus.guardBreakMultiplier">
      <summary></summary>
    </member>
    <member name="F:DiceStatBonus.ignorePower">
      <summary></summary>
    </member>
    <member name="F:DiceStatBonus.max">
      <summary>ダイス最大値の増減量</summary>
    </member>
    <member name="F:DiceStatBonus.min">
      <summary>ダイス最小値の増減量</summary>
    </member>
    <member name="F:DiceStatBonus.power">
      <summary>ダイス威力の増減量</summary>
    </member>
    <member name="M:DiceStatBonus.#ctor">
      <summary>
        <see cref="T:DiceStatBonus" /> の新しいインスタンスを生成します。</summary>
    </member>
    <member name="M:DiceStatBonus.Copy">
      <summary>このインスタンスのディープ コピーを作成して返します。</summary>
      <returns></returns>
    </member>
    <member name="T:Direction">
      <summary>キャラクターが向いている方向を表します。</summary>
    </member>
    <member name="F:Direction.LEFT">
      <summary>左向き</summary>
    </member>
    <member name="F:Direction.RIGHT">
      <summary>右向き</summary>
    </member>
    <member name="T:DropBookInventoryModel">
      <summary>獲得した本のインベントリです。このオブジェクトは保存可能です。</summary>
    </member>
    <member name="F:DropBookInventoryModel.save_bookList">
      <summary></summary>
    </member>
    <member name="F:DropBookInventoryModel.save_id">
      <summary></summary>
    </member>
    <member name="F:DropBookInventoryModel.save_num">
      <summary></summary>
    </member>
    <member name="M:DropBookInventoryModel.#ctor">
      <summary></summary>
    </member>
    <member name="M:DropBookInventoryModel.AddBook(System.Int32,System.Int32)">
      <summary>指定した数値 ID に一致する本を指定した数だけこのインベントリに追加して、追加された本の所持情報を返します。本の XML データが定義されていない数値 ID を指定していても追加します。</summary>
      <param name="bookId">追加する本の数値 ID。</param>
      <param name="num">追加する本の数。</param>
      <returns>追加された本の所持情報。本の XML データに存在しない数値 ID を指定した場合、指定した数値 ID のままエラー状態が有効に設定された本の所持情報。</returns>
    </member>
    <member name="M:DropBookInventoryModel.AddBook(LorId,System.Int32)">
      <summary>指定した LOR ID に一致する本を指定した数だけこのインベントリに追加して、追加された本の所持情報を返します。本の XML データが定義されていない LOR ID を指定していても追加します。</summary>
      <param name="bookId">追加する本の LOR ID。</param>
      <param name="num">追加する本の数。</param>
      <returns>追加された本の所持情報。本の XML データに存在しない LOR ID を指定した場合、指定した LOR ID のままエラー状態が有効に設定された本の所持情報。</returns>
    </member>
    <member name="M:DropBookInventoryModel.GetBook(LorId)">
      <summary></summary>
      <param name="bookId"></param>
      <returns></returns>
    </member>
    <member name="M:DropBookInventoryModel.GetBookCount(System.Int32)">
      <summary>指定した数値 ID に一致する本の所持数をこのインベントリから取得します。</summary>
      <param name="bookId">所持数を取得する本の数値 ID。</param>
      <returns>指定した数値 ID に一致する本の所持数。何かの本 LorId(:31) を指定した場合は 1。未所持または数値 ID に一致する本がない場合は 0。</returns>
    </member>
    <member name="M:DropBookInventoryModel.GetBookCount(LorId)">
      <summary>指定した LOR ID に一致する本の所持数をこのインベントリから取得します。</summary>
      <param name="bookId">所持数を取得する本の LOR ID。</param>
      <returns>指定した LOR ID に一致する本の所持数。何かの本 LorId(:31) を指定した場合は 1。未所持または LOR ID に一致する本がない場合は 0。</returns>
    </member>
    <member name="M:DropBookInventoryModel.GetBookIdList_usable">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:DropBookInventoryModel.GetBookList">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:DropBookInventoryModel.GetBookList_invitationBookList">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:DropBookInventoryModel.GetBookList_usable">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:DropBookInventoryModel.GetSaveData">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:DropBookInventoryModel.Init">
      <summary></summary>
    </member>
    <member name="M:DropBookInventoryModel.LoadFromSaveData(GameSave.SaveData)">
      <summary></summary>
      <param name="data"></param>
    </member>
    <member name="M:DropBookInventoryModel.RemoveAllErrorBookBook">
      <summary></summary>
    </member>
    <member name="M:DropBookInventoryModel.RemoveBook(LorId,System.Int32)">
      <summary></summary>
      <param name="bookId"></param>
      <param name="num"></param>
    </member>
    <member name="T:DropBookXmlList">
      <summary>本の XML データを格納するリストです。</summary>
    </member>
    <member name="M:DropBookXmlList.#ctor">
      <summary></summary>
    </member>
    <member name="M:DropBookXmlList.AddBookByMod(System.String,System.Collections.Generic.List{DropBookXmlInfo})">
      <summary></summary>
      <param name="workshopId"></param>
      <param name="list"></param>
    </member>
    <member name="M:DropBookXmlList.GetAllWorkshopData">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:DropBookXmlList.GetData(System.Int32,System.Boolean)">
      <summary>指定した数値 ID に一致する本 XML データをこのリストから取得します。</summary>
      <param name="id">取得する本 XML データの数値 ID。</param>
      <param name="errNull">未使用引数。</param>
      <returns>数値 ID に一致した本 XML データ。リストに存在しない場合、指定した数値 ID のままエラー状態が有効に設定された本 XML データ。</returns>
    </member>
    <member name="M:DropBookXmlList.GetData(LorId,System.Boolean)">
      <summary>指定した LOR ID に一致する本 XML データをこのリストから取得します。</summary>
      <param name="id">取得する本 XML データの LOR ID。</param>
      <param name="errNull">未使用引数。</param>
      <returns>LOR ID に一致した本 XML データ。リストに存在しない場合、指定した LOR ID のままエラー状態が有効に設定された本 XML データ。</returns>
    </member>
    <member name="M:DropBookXmlList.GetList">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:DropBookXmlList.Init(System.Collections.Generic.List{DropBookXmlInfo})">
      <summary></summary>
      <param name="list"></param>
    </member>
    <member name="M:DropBookXmlList.SetDropTable">
      <summary></summary>
    </member>
    <member name="M:DropBookXmlList.SetDropTableByMod(System.Collections.Generic.List{DropBookXmlInfo})">
      <summary></summary>
      <param name="list"></param>
    </member>
    <member name="M:DropBookXmlList.SetDropTableByMod">
      <summary></summary>
    </member>
    <member name="T:EnemyUnitClassInfo">
      <summary>敵キャラクターの XML データを格納します。このオブジェクトは StaticInfo/EnemyUnitInfo の Enemy 要素 をモデル化したものです。</summary>
    </member>
    <member name="F:EnemyUnitClassInfo._id">
      <summary>敵キャラクター数値 ID (ID 属性とマッピング)</summary>
    </member>
    <member name="F:EnemyUnitClassInfo.AiScript">
      <summary></summary>
    </member>
    <member name="F:EnemyUnitClassInfo.bodyId">
      <summary></summary>
    </member>
    <member name="F:EnemyUnitClassInfo.bookId">
      <summary>装備するコア ページ ID のリスト。要素が複数定義されている場合はランダムに 1 つの要素を選択して装備します (BookId 要素とマッピング)</summary>
    </member>
    <member name="F:EnemyUnitClassInfo.dropBonus">
      <summary></summary>
    </member>
    <member name="F:EnemyUnitClassInfo.dropTableList">
      <summary></summary>
    </member>
    <member name="F:EnemyUnitClassInfo.emotionCardList">
      <summary></summary>
    </member>
    <member name="F:EnemyUnitClassInfo.exp">
      <summary></summary>
    </member>
    <member name="F:EnemyUnitClassInfo.faceType">
      <summary>(FaceType 要素とマッピング)</summary>
    </member>
    <member name="F:EnemyUnitClassInfo.gender">
      <summary>(Gender 要素とマッピング)</summary>
    </member>
    <member name="F:EnemyUnitClassInfo.height">
      <summary>(マッピングなし)</summary>
    </member>
    <member name="F:EnemyUnitClassInfo.isUnknown">
      <summary>(Unknown 要素とマッピング)</summary>
    </member>
    <member name="F:EnemyUnitClassInfo.maxHeight">
      <summary>(MaxHeight 要素とマッピング)</summary>
    </member>
    <member name="F:EnemyUnitClassInfo.minHeight">
      <summary>(MinHeight 要素とマッピング)</summary>
    </member>
    <member name="F:EnemyUnitClassInfo.name">
      <summary></summary>
    </member>
    <member name="F:EnemyUnitClassInfo.nameId">
      <summary>(NameID 要素とマッピング)</summary>
    </member>
    <member name="F:EnemyUnitClassInfo.retreat">
      <summary></summary>
    </member>
    <member name="F:EnemyUnitClassInfo.workshopID">
      <summary>ワークショップ ID (マッピングなし)</summary>
    </member>
    <member name="M:EnemyUnitClassInfo.#ctor">
      <summary></summary>
    </member>
    <member name="P:EnemyUnitClassInfo.id">
      <summary>敵キャラクター LOR ID を取得します。</summary>
    </member>
    <member name="T:EquipRangeType">
      <summary>使用できるバトル ページの攻撃範囲を表します。</summary>
    </member>
    <member name="F:EquipRangeType.Hybrid">
      <summary>近距離バトル ページ・遠距離バトル ページ両方可能</summary>
    </member>
    <member name="F:EquipRangeType.Melee">
      <summary>近距離バトル ページのみ</summary>
    </member>
    <member name="F:EquipRangeType.Range">
      <summary>遠距離バトル ページのみ</summary>
    </member>
    <member name="T:Faction">
      <summary>敵または味方の派閥を表します。</summary>
    </member>
    <member name="F:Faction.Enemy">
      <summary>敵 (NPC)</summary>
    </member>
    <member name="F:Faction.Player">
      <summary>味方 (プレイヤー)</summary>
    </member>
    <member name="T:GiftInventory">
      <summary>戦闘表象のインベントリです。このオブジェクトは保存可能です。</summary>
    </member>
    <member name="F:GiftInventory.save_equipList">
      <summary></summary>
    </member>
    <member name="F:GiftInventory.save_offList">
      <summary></summary>
    </member>
    <member name="F:GiftInventory.save_unequipList">
      <summary></summary>
    </member>
    <member name="M:GiftInventory.#ctor(UnitDataModel)">
      <summary></summary>
      <param name="owner"></param>
    </member>
    <member name="M:GiftInventory.AddGift(System.Int32)">
      <summary>指定した ID の戦闘表象をインベントリに追加します。</summary>
      <param name="id">追加する戦闘表象の ID。</param>
      <returns>追加に成功した場合はその戦闘表象オブジェクト、既に追加済みまたは追加できなかった場合は null を返します。</returns>
    </member>
    <member name="M:GiftInventory.AddGift(GiftModel)">
      <summary>指定した戦闘表象をインベントリに追加します。</summary>
      <param name="gift">追加する戦闘表象。</param>
      <returns>追加に成功した場合はその戦闘表象オブジェクト、既に追加済みまたは追加できなかった場合は null を返します。</returns>
    </member>
    <member name="M:GiftInventory.AlreadyGained(GiftModel)">
      <summary>指定した戦闘表象が既に入手済みである事を示す値を返します。</summary>
      <param name="gift">戦闘表象。</param>
      <returns>入手済みの場合は true、未入手の場合は false を返します。</returns>
    </member>
    <member name="M:GiftInventory.AlreadyGained(System.Int32)">
      <summary>指定した ID の戦闘表象が既に入手済みである事を示す値を返します。</summary>
      <param name="id">戦闘表象の ID。</param>
      <returns>入手済みの場合は true、未入手の場合は false を返します。</returns>
    </member>
    <member name="M:GiftInventory.AlreadyGained(GiftXmlInfo)">
      <summary></summary>
      <param name="gift"></param>
      <returns></returns>
    </member>
    <member name="M:GiftInventory.Equip(GiftModel)">
      <summary>指定した戦闘表象を装備します。</summary>
      <param name="gift">装備する戦闘表象。</param>
      <returns>装備した場合は true、既に装備済みまたは装備できなかった場合は false を返します。</returns>
    </member>
    <member name="M:GiftInventory.GetAllGiftsListForTitle">
      <summary>所持している全ての戦闘表象のリストを取得します。このメソッドにより取得したリストでは戦闘表象インベントリを変更できません。</summary>
      <returns>所持している全ての戦闘表象のリスト。</returns>
    </member>
    <member name="M:GiftInventory.GetEquippedList">
      <summary>装備中の戦闘表象のリストを取得します。このメソッドにより取得したリストでは戦闘表象インベントリを変更できます。</summary>
      <returns>装備中の戦闘表象のリスト。</returns>
    </member>
    <member name="M:GiftInventory.GetGifts">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:GiftInventory.GetSaveData">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:GiftInventory.GetStatBonus_Amp">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:GiftInventory.GetStatBonus_Break">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:GiftInventory.GetStatBonus_BreakRecover">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:GiftInventory.GetStatBonus_Dmg(LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="type"></param>
      <returns></returns>
    </member>
    <member name="M:GiftInventory.GetStatBonus_Hp">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:GiftInventory.GetStatBonus_Tune">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:GiftInventory.GetUnequippedList">
      <summary>装備から外している戦闘表象のリストを取得します。このメソッドにより取得したリストでは戦闘表象インベントリを変更できます。</summary>
      <returns>装備から外している戦闘表象のリスト。</returns>
    </member>
    <member name="M:GiftInventory.LoadFromSaveData(GameSave.SaveData)">
      <summary></summary>
      <param name="data"></param>
    </member>
    <member name="M:GiftInventory.UnEquip(GiftModel)">
      <summary>指定した戦闘表象を装備から外します。</summary>
      <param name="gift">装備から外す戦闘表象。</param>
      <returns>装備から外した場合は true、既に外していたまたは外せなかった場合は false を返します。</returns>
    </member>
    <member name="M:GiftInventory.UnEquipAll">
      <summary></summary>
    </member>
    <member name="T:GiftModel">
      <summary>戦闘表象を表します。</summary>
    </member>
    <member name="F:GiftModel.isShowEquipGift">
      <summary></summary>
    </member>
    <member name="M:GiftModel.#ctor(GiftXmlInfo)">
      <summary></summary>
      <param name="classInfo"></param>
    </member>
    <member name="M:GiftModel.CreateScripts">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:GiftModel.GetGiftClassInfoId">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:GiftModel.GetName">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:GiftModel.GetResourcePath">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="P:GiftModel.ClassInfo">
      <summary></summary>
    </member>
    <member name="P:GiftModel.GiftAcquireCondition">
      <summary></summary>
    </member>
    <member name="P:GiftModel.GiftDesc">
      <summary></summary>
    </member>
    <member name="P:GiftModel.GiftName">
      <summary></summary>
    </member>
    <member name="P:GiftModel.GiftPostfix">
      <summary></summary>
    </member>
    <member name="P:GiftModel.GiftPrefix">
      <summary></summary>
    </member>
    <member name="T:GiftXmlList">
      <summary>戦闘表象 XML データを格納するリストです。</summary>
    </member>
    <member name="M:GiftXmlList.#ctor">
      <summary></summary>
    </member>
    <member name="M:GiftXmlList.CreateTemporaryGift(System.String,GiftPosition)">
      <summary></summary>
      <param name="res"></param>
      <param name="pos"></param>
      <returns></returns>
    </member>
    <member name="M:GiftXmlList.GetAvailableList">
      <summary>利用可能な戦闘表象 XML データのリストを返します。</summary>
      <returns>利用可能な戦闘表象 XML データのリスト。</returns>
    </member>
    <member name="M:GiftXmlList.GetData(System.Int32)">
      <summary>指定した数値 ID に一致する戦闘表象 XML データをこのリストから取得します。</summary>
      <param name="id">取得する戦闘表象 XML データの数値 ID。</param>
      <returns>数値 ID に一致した戦闘表象 XML データ。存在しない場合は null。</returns>
    </member>
    <member name="M:GiftXmlList.GetPostfix(System.Int32)">
      <summary></summary>
      <param name="id"></param>
      <returns></returns>
    </member>
    <member name="M:GiftXmlList.GetPrefix(System.Int32)">
      <summary></summary>
      <param name="id"></param>
      <returns></returns>
    </member>
    <member name="M:GiftXmlList.Init(System.Collections.Generic.List{GiftXmlInfo})">
      <summary>指定した戦闘表象 XML データのリストでインスタンスを初期化します。</summary>
      <param name="list">このインスタンスで利用できるようにする戦闘表象 XML データのリスト。</param>
    </member>
    <member name="T:ItemXmlDataList">
      <summary>読み込んだバトル ページの XML データのリストです。</summary>
    </member>
    <member name="M:ItemXmlDataList.#ctor">
      <summary></summary>
    </member>
    <member name="M:ItemXmlDataList.AddCardInfoByMod(System.String,System.Collections.Generic.List{LOR_DiceSystem.DiceCardXmlInfo})">
      <summary></summary>
      <param name="workshopId"></param>
      <param name="list"></param>
    </member>
    <member name="M:ItemXmlDataList.GetAllWorkshopData">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:ItemXmlDataList.GetBasicCardList">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:ItemXmlDataList.GetCardItem(System.Int32,System.Boolean)">
      <summary></summary>
      <param name="id"></param>
      <param name="errNull"></param>
      <returns></returns>
    </member>
    <member name="M:ItemXmlDataList.GetCardItem(LorId,System.Boolean)">
      <summary>指定したバトル ページ LOR IDに一致するバトル ページの XML データを取得します。</summary>
      <param name="id">バトル ページ LOR ID。</param>
      <param name="errNull">バトル ページの XML データが見つからない場合に null を返す事を示す値。</param>
      <returns>バトル ページ LOR IDに一致するバトル ページの XML データ。</returns>
    </member>
    <member name="M:ItemXmlDataList.GetCardList">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:ItemXmlDataList.InitCardInfo(System.Collections.Generic.List{LOR_DiceSystem.DiceCardXmlInfo})">
      <summary></summary>
      <param name="list"></param>
    </member>
    <member name="P:ItemXmlDataList.instance">
      <summary>このオブジェクトの既定のインスタンスを取得します。</summary>
    </member>
    <member name="T:KeywordBuf">
      <summary>キーワード定義された状態を表します。</summary>
    </member>
    <member name="F:KeywordBuf.AllPowerUp">
      <summary>威力増加 (全てのダイスの威力を X 増加)</summary>
    </member>
    <member name="F:KeywordBuf.Alriune_Debuf">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.Arrest">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.Binding">
      <summary>束縛 (今回の幕において、速度の値が X 減少。)</summary>
    </member>
    <member name="F:KeywordBuf.Bleeding">
      <summary>出血 (今回の幕の間、攻撃ダイスを振るたびに X ダメージを受けて出血値が 2/3 に減少する)</summary>
    </member>
    <member name="F:KeywordBuf.BloodStackBlock">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.Blurry">
      <summary>朦朧 (朦朧ではない他の対象がいる場合、このキャラクターを相手に選べない。幕の終了時に解除される)</summary>
    </member>
    <member name="F:KeywordBuf.BreakProtection">
      <summary>混乱保護 (1幕の間、攻撃で受ける混乱ダメージ量を X 減少)</summary>
    </member>
    <member name="F:KeywordBuf.Burn">
      <summary>火傷 (幕の終了時、X ダメージを受け、火傷の数値が 2/3 に減少する。(小数点切り捨て))</summary>
    </member>
    <member name="F:KeywordBuf.BurnBreak">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.BurnSpread">
      <summary>燎原之火 (このキャラクターが X 幕以内に混乱状態になった場合、他の味方にこのキャラクターの持つ火傷の数値の半分だけ火傷を付与する)</summary>
    </member>
    <member name="F:KeywordBuf.CB_BigBadWolf_Scar">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.CB_BigBadWolf_Stealth">
      <summary>影 (狼が使用するバトル ページの対象でない司書は行動不能)</summary>
    </member>
    <member name="F:KeywordBuf.CB_BlackSwanDeadBro">
      <summary>消えた家族 (幕の開始時、この値が4以上なら特殊バトル ページを使用)</summary>
    </member>
    <member name="F:KeywordBuf.CB_CopiousBleeding">
      <summary>深い傷 (数値が5以上になれば25%のダメージを受ける)</summary>
    </member>
    <member name="F:KeywordBuf.CB_NothingMimic">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.CB_NothingSkin">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.CB_RedHoodTarget">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.CB_UniverseDecreaseMaxBp">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.ClawCounter">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.Decay">
      <summary>腐食 (幕の終了時、X ダメージを受けて数値が1減少する。(被ダメージ時、腐食の数だけ物理・混乱追加ダメージを受ける))</summary>
    </member>
    <member name="F:KeywordBuf.DecreaseSpeedTo1">
      <summary>速度固定1 (今回の幕の間、速度ダイスの値を1に固定)</summary>
    </member>
    <member name="F:KeywordBuf.DefensePowerUp">
      <summary>守備威力増加 (今回の幕の間、守備威力 +X)</summary>
    </member>
    <member name="F:KeywordBuf.Disarm">
      <summary>武装解除 (今回の幕の間、守備ダイスの威力 -X)</summary>
    </member>
    <member name="F:KeywordBuf.DmgUp">
      <summary>ダメージ量増加 (今回の幕の間、攻撃ダイスのダメージ量 +X)</summary>
    </member>
    <member name="F:KeywordBuf.Emotion_Sin">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.Endurance">
      <summary>忍耐 (今回の幕の間、守備ダイスの威力 +X)</summary>
    </member>
    <member name="F:KeywordBuf.Fairy">
      <summary>妖精 (ダイスを振るたびにXダメージを受ける。幕の終了時にXダメージを受け、妖精の数値が半分に減少する。(小数点以下切り捨て))</summary>
    </member>
    <member name="F:KeywordBuf.FairyCare">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.ForbidRecovery">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.FreischutzChange">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.HalfPower">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.HeavySmoke">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.HitPowerUp">
      <summary>打撃威力増加 (今回の幕の間、打撃威力 +X)</summary>
    </member>
    <member name="F:KeywordBuf.IndexRelease">
      <summary>解禁 (全てのダイス威力 +1)</summary>
    </member>
    <member name="F:KeywordBuf.JaeheonMark">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.JaeheonPuppetThread">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.KeterFinal_angela_ego">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.KeterFinal_ChangeCostAll">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.KeterFinal_ChangeLibrarianHands">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.KeterFinal_DoubleEmotion">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.KeterFinal_Eager">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.KeterFinal_FailLying">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.KeterFinal_Light">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.KeterFinal_SuccessLying">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.KnightOfDespairBlessing">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.Maxim">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.MyoBerserk">
      <summary>凶暴化 (全ダイスの威力 +1)</summary>
    </member>
    <member name="F:KeywordBuf.Nail">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.NicolaiTarget">
      <summary>標的 (攻撃で受けるダメージ・混乱ダメージ量が 50% 増加)</summary>
    </member>
    <member name="F:KeywordBuf.None">
      <summary>キーワード指定なしの状態 (カスタム状態等)</summary>
    </member>
    <member name="F:KeywordBuf.NullifyPower">
      <summary>威力無効化 (今回の幕の間、威力の影響を受けない)</summary>
    </member>
    <member name="F:KeywordBuf.OswaldDaze">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.Paralysis">
      <summary>麻痺 (今回の幕の間、カード使用時のダイスを最大 X 個まで弱体化する)</summary>
    </member>
    <member name="F:KeywordBuf.PenetratePowerUp">
      <summary>貫通威力増加 (今回の幕の間、貫通威力 +X)</summary>
    </member>
    <member name="F:KeywordBuf.Protection">
      <summary>保護 (今回の幕の間、攻撃によって受けるダメージ量が X 減少)</summary>
    </member>
    <member name="F:KeywordBuf.PurpleCoolTime">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.PurpleDefense">
      <summary>防御体勢 (守備威力 +2。全ての状態異常を解除)</summary>
    </member>
    <member name="F:KeywordBuf.PurpleHit">
      <summary>打撃体勢 (打撃威力 +2。攻撃で与える混乱ダメージ量が 50% 増加)</summary>
    </member>
    <member name="F:KeywordBuf.PurplePenetrate">
      <summary>貫通体勢 (貫通威力 +2。バトル ページで付与する状態異常の数値が 2 倍になる)</summary>
    </member>
    <member name="F:KeywordBuf.PurpleSlash">
      <summary>斬撃体勢 (斬撃威力 +2。攻撃で与えるダメージ量が 50% 増加)</summary>
    </member>
    <member name="F:KeywordBuf.QueenOfHatredHatred">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.QueenOfHatredSign">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.Quickness">
      <summary>クイック (今回の幕において、速度の値が X 増加)</summary>
    </member>
    <member name="F:KeywordBuf.RedHoodChange">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.RedMist">
      <summary>赤い霧 (全てのダイス威力 +X。最大で 5 まで得られる)</summary>
    </member>
    <member name="F:KeywordBuf.RedMistEgo">
      <summary>E.G.O発現 (「大切断-縦」が使用可能に。全てのダイス威力が 2 増加。毎幕ごとに 40 ダメージ以上与えられない場合、混乱ダメージを受ける。混乱状態になると「E.G.O発現」状態が解除される)</summary>
    </member>
    <member name="F:KeywordBuf.RedShoes">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.Regeneration">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.Resistance">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.Roland2PhaseTakeDamaged">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.Seal">
      <summary>封印 (速度ダイス X つが使用不可に。前方の速度ダイスから判定)</summary>
    </member>
    <member name="F:KeywordBuf.SealKeyword">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.Shock">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.SingingMachineRecital">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.SlashPowerUp">
      <summary>斬撃威力増加 (今回の幕の間、斬撃威力 +X)</summary>
    </member>
    <member name="F:KeywordBuf.Smoke">
      <summary>煙 (受けるダメージ量 X% 増加。最大 10 まで得ることができる。煙の数値が 9 以上ならすべてのダイス威力 +1。幕の終了時に煙の数値が 1 減少)</summary>
    </member>
    <member name="F:KeywordBuf.SnowQueenPower">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.SpiderBudCocoon">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.Strength">
      <summary>パワー (今回の幕の間、攻撃ダイスの威力 +X)</summary>
    </member>
    <member name="F:KeywordBuf.Stun">
      <summary>行動不能 (今回の幕の間、行動できない)</summary>
    </member>
    <member name="F:KeywordBuf.SweeperDup">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.SweeperRevival">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.TakeBpDmg">
      <summary>混乱耐性減少 (今回の幕の間、全ての混乱耐性が脆弱に変更)</summary>
    </member>
    <member name="F:KeywordBuf.TeddyLove">
      <summary>愛情 (この対象を攻撃するとき、現在の値だけ攻撃者の威力を増加)</summary>
    </member>
    <member name="F:KeywordBuf.UniverseCardBuf">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.UniverseEnlightenment">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.UpSurge">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.Vibrate">
      <summary>振動 (???)</summary>
    </member>
    <member name="F:KeywordBuf.Vulnerable">
      <summary>脆弱 (今回の幕の間、攻撃によって受けるダメージ量が X 増加)</summary>
    </member>
    <member name="F:KeywordBuf.Vulnerable_break">
      <summary></summary>
    </member>
    <member name="F:KeywordBuf.WarpCharge">
      <summary>充電 (充電の数値によって特定バトル ページの能力が上昇。最大 10 まで獲得可能)</summary>
    </member>
    <member name="F:KeywordBuf.Weak">
      <summary>虚弱 (今回の幕の間、攻撃ダイスの威力 -X)</summary>
    </member>
    <member name="F:KeywordBuf.WhiteNightChange">
      <summary></summary>
    </member>
    <member name="T:LOR_DiceSystem.BehaviourDetail">
      <summary>バトル ダイスの振る舞いの詳細を表します。</summary>
    </member>
    <member name="F:LOR_DiceSystem.BehaviourDetail.Evasion">
      <summary>回避</summary>
    </member>
    <member name="F:LOR_DiceSystem.BehaviourDetail.Guard">
      <summary>防御</summary>
    </member>
    <member name="F:LOR_DiceSystem.BehaviourDetail.Hit">
      <summary>打撃</summary>
    </member>
    <member name="F:LOR_DiceSystem.BehaviourDetail.None">
      <summary>なし</summary>
    </member>
    <member name="F:LOR_DiceSystem.BehaviourDetail.Penetrate">
      <summary>貫通</summary>
    </member>
    <member name="F:LOR_DiceSystem.BehaviourDetail.Slash">
      <summary>斬撃</summary>
    </member>
    <member name="T:LOR_DiceSystem.BehaviourType">
      <summary>バトル ダイスの振る舞いの種類を表します。</summary>
    </member>
    <member name="F:LOR_DiceSystem.BehaviourType.Atk">
      <summary>攻撃</summary>
    </member>
    <member name="F:LOR_DiceSystem.BehaviourType.Def">
      <summary>守備</summary>
    </member>
    <member name="F:LOR_DiceSystem.BehaviourType.Standby">
      <summary>待機 (反撃)</summary>
    </member>
    <member name="T:LOR_DiceSystem.CardAffection">
      <summary>バトル ページの使用対象を表します。</summary>
    </member>
    <member name="F:LOR_DiceSystem.CardAffection.All">
      <summary>敵味方全員</summary>
    </member>
    <member name="F:LOR_DiceSystem.CardAffection.One">
      <summary>一人</summary>
    </member>
    <member name="F:LOR_DiceSystem.CardAffection.Passive">
      <summary>パッシブ依存? (帰り道の「みんな！家に帰ろう～！」など)</summary>
    </member>
    <member name="F:LOR_DiceSystem.CardAffection.Team">
      <summary>敵全員</summary>
    </member>
    <member name="F:LOR_DiceSystem.CardAffection.TeamNear">
      <summary>敵全員に1回ずつ? (ターニャの「殴打」ページ)</summary>
    </member>
    <member name="T:LOR_DiceSystem.CardRange">
      <summary>バトル ページの攻撃範囲を表します。</summary>
    </member>
    <member name="F:LOR_DiceSystem.CardRange.Far">
      <summary>遠距離攻撃</summary>
    </member>
    <member name="F:LOR_DiceSystem.CardRange.FarArea">
      <summary>広域攻撃</summary>
    </member>
    <member name="F:LOR_DiceSystem.CardRange.FarAreaEach">
      <summary>個別広域攻撃</summary>
    </member>
    <member name="F:LOR_DiceSystem.CardRange.Instance">
      <summary>装着時発動</summary>
    </member>
    <member name="F:LOR_DiceSystem.CardRange.Near">
      <summary>近接攻撃</summary>
    </member>
    <member name="F:LOR_DiceSystem.CardRange.Special">
      <summary>特殊攻撃</summary>
    </member>
    <member name="T:LOR_DiceSystem.DiceBehaviour">
      <summary>バトル ダイスの XML データを格納します。このオブジェクトは StaticInfo/Card の Behaviour 要素 をモデル化したものです。</summary>
    </member>
    <member name="F:LOR_DiceSystem.DiceBehaviour.ActionScript">
      <summary>バトル ダイス使用時のキャラクターおよびエフェクトの動作スクリプト名 (BehaviourAction_xxx の xxx 部分)</summary>
    </member>
    <member name="F:LOR_DiceSystem.DiceBehaviour.Desc">
      <summary></summary>
    </member>
    <member name="F:LOR_DiceSystem.DiceBehaviour.Detail">
      <summary>振る舞いの詳細</summary>
    </member>
    <member name="F:LOR_DiceSystem.DiceBehaviour.Dice">
      <summary>バトル ダイスの最大値</summary>
    </member>
    <member name="F:LOR_DiceSystem.DiceBehaviour.EffectRes">
      <summary>バトル ダイス使用時のエフェクト名</summary>
    </member>
    <member name="F:LOR_DiceSystem.DiceBehaviour.KnockbackPower">
      <summary></summary>
    </member>
    <member name="F:LOR_DiceSystem.DiceBehaviour.Min">
      <summary>バトル ダイスの最小値</summary>
    </member>
    <member name="F:LOR_DiceSystem.DiceBehaviour.MotionDetail">
      <summary>バトル ダイス使用時のキャラクターのモーション</summary>
    </member>
    <member name="F:LOR_DiceSystem.DiceBehaviour.MotionDetailDefault">
      <summary></summary>
    </member>
    <member name="F:LOR_DiceSystem.DiceBehaviour.Script">
      <summary>バトル ダイス効果の名前 (DiceCardAbility_xxx の xxx 部分)</summary>
    </member>
    <member name="F:LOR_DiceSystem.DiceBehaviour.Type">
      <summary>振る舞いの種類</summary>
    </member>
    <member name="M:LOR_DiceSystem.DiceBehaviour.#ctor">
      <summary></summary>
    </member>
    <member name="M:LOR_DiceSystem.DiceBehaviour.Copy">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:LOR_DiceSystem.DiceBehaviour.GetMaxText">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:LOR_DiceSystem.DiceBehaviour.GetMinText">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="P:LOR_DiceSystem.DiceBehaviour.Rwbp">
      <summary></summary>
    </member>
    <member name="T:LOR_DiceSystem.DiceCardSpec">
      <summary>バトル ページの性能の XML データを格納します。このオブジェクトは StaticInfo/Card の Spec 要素 をモデル化したものです。</summary>
    </member>
    <member name="F:LOR_DiceSystem.DiceCardSpec.affection">
      <summary>使用対象</summary>
    </member>
    <member name="F:LOR_DiceSystem.DiceCardSpec.Cost">
      <summary>コスト</summary>
    </member>
    <member name="F:LOR_DiceSystem.DiceCardSpec.emotionLimit">
      <summary></summary>
    </member>
    <member name="F:LOR_DiceSystem.DiceCardSpec.Ranged">
      <summary>攻撃範囲</summary>
    </member>
    <member name="M:LOR_DiceSystem.DiceCardSpec.#ctor">
      <summary></summary>
    </member>
    <member name="M:LOR_DiceSystem.DiceCardSpec.Copy">
      <summary>インスタンスのコピーを作成します。</summary>
      <returns></returns>
    </member>
    <member name="T:LOR_DiceSystem.DiceCardXmlInfo">
      <summary>バトル ページの XML データを格納します。このオブジェクトは StaticInfo/Card の Card 要素 をモデル化したものです。</summary>
    </member>
    <member name="F:LOR_DiceSystem.DiceCardXmlInfo._id">
      <summary>バトル ページ数値 ID (ID 属性とマッピング)</summary>
    </member>
    <member name="F:LOR_DiceSystem.DiceCardXmlInfo._textId">
      <summary>テキスト ID (TextId 要素とマッピング)</summary>
    </member>
    <member name="F:LOR_DiceSystem.DiceCardXmlInfo.Artwork">
      <summary>アートワーク名 (Artwork 要素とマッピング)</summary>
    </member>
    <member name="F:LOR_DiceSystem.DiceCardXmlInfo.category">
      <summary></summary>
    </member>
    <member name="F:LOR_DiceSystem.DiceCardXmlInfo.Chapter">
      <summary>所属するチャプター (Chapter 要素とマッピング)</summary>
    </member>
    <member name="F:LOR_DiceSystem.DiceCardXmlInfo.DiceBehaviourList">
      <summary>バトル ダイスの振る舞いのリスト (BehaviourList 要素内の Behaviour 要素とマッピング)</summary>
    </member>
    <member name="F:LOR_DiceSystem.DiceCardXmlInfo.EgoMaxCooltimeValue">
      <summary>使用した E.G.O ページが再使用できるようになるまでの最大クールタイム値 (MaxCooltimeForEgo 要素とマッピング)</summary>
    </member>
    <member name="F:LOR_DiceSystem.DiceCardXmlInfo.isError">
      <summary>(マッピングなし)</summary>
    </member>
    <member name="F:LOR_DiceSystem.DiceCardXmlInfo.Keywords">
      <summary>ヘルプ メッセージ用のキーワードのリスト (Keyword 要素とマッピング)</summary>
    </member>
    <member name="F:LOR_DiceSystem.DiceCardXmlInfo.MapChange">
      <summary>バトル ページ使用中、一時的に変更する背景マップの名前 (MapChange 要素とマッピング)</summary>
    </member>
    <member name="F:LOR_DiceSystem.DiceCardXmlInfo.MaxNum">
      <summary></summary>
    </member>
    <member name="F:LOR_DiceSystem.DiceCardXmlInfo.optionList">
      <summary>バトルページのオプションのリスト (Option 要素とマッピング)</summary>
    </member>
    <member name="F:LOR_DiceSystem.DiceCardXmlInfo.Priority">
      <summary>バトル ページの使用優先度。数値が高いほど優先的に使用する (Priority 要素とマッピング)</summary>
    </member>
    <member name="F:LOR_DiceSystem.DiceCardXmlInfo.PriorityScript">
      <summary>バトル ページの使用優先度を動的に決定するスクリプトの名前。DiceCardPriority_xxx の xxx 部分 (PriorityScript 要素とマッピング)</summary>
    </member>
    <member name="F:LOR_DiceSystem.DiceCardXmlInfo.Rarity">
      <summary>レアリティ (Rarity 要素とマッピング)</summary>
    </member>
    <member name="F:LOR_DiceSystem.DiceCardXmlInfo.Script">
      <summary>バトル ページ効果の名前。DiceCardSelfAbility_xxx の xxx 部分 (Script 要素とマッピング)</summary>
    </member>
    <member name="F:LOR_DiceSystem.DiceCardXmlInfo.ScriptDesc">
      <summary>バトル ページ効果の説明 (ScriptDesc 要素とマッピング)</summary>
    </member>
    <member name="F:LOR_DiceSystem.DiceCardXmlInfo.SkinChange">
      <summary>バトル ページ使用中、一時的に変更するバトル ページ使用キャラクターのスキン名 (SkinChange 要素とマッピング)</summary>
    </member>
    <member name="F:LOR_DiceSystem.DiceCardXmlInfo.SkinChangeType">
      <summary></summary>
    </member>
    <member name="F:LOR_DiceSystem.DiceCardXmlInfo.SkinHeight">
      <summary></summary>
    </member>
    <member name="F:LOR_DiceSystem.DiceCardXmlInfo.Spec">
      <summary>バトル ページの性能 (Spec 要素とマッピング)</summary>
    </member>
    <member name="F:LOR_DiceSystem.DiceCardXmlInfo.SpecialEffect">
      <summary></summary>
    </member>
    <member name="F:LOR_DiceSystem.DiceCardXmlInfo.workshopID">
      <summary>ワークショップ ID (マッピングなし)</summary>
    </member>
    <member name="F:LOR_DiceSystem.DiceCardXmlInfo.workshopName">
      <summary>バトル ページ名。接待 MOD で作成された場合に使用され、本家や BaseMod では使用されない (マッピングなし)</summary>
    </member>
    <member name="M:LOR_DiceSystem.DiceCardXmlInfo.#ctor">
      <summary></summary>
    </member>
    <member name="M:LOR_DiceSystem.DiceCardXmlInfo.#ctor(LorId)">
      <summary></summary>
      <param name="id"></param>
    </member>
    <member name="M:LOR_DiceSystem.DiceCardXmlInfo.Copy(System.Boolean)">
      <summary></summary>
      <param name="deepCopy"></param>
      <returns></returns>
    </member>
    <member name="M:LOR_DiceSystem.DiceCardXmlInfo.GetCardLimit(Rarity)">
      <summary>指定したレアリティに対する、デッキの使用枚数上限を取得します。</summary>
      <param name="rarity">デッキの使用枚数上限を取得するレアリティ。</param>
      <returns>指定したレアリティが芸術の場合 1、それ以外の場合 3 を返します。</returns>
    </member>
    <member name="M:LOR_DiceSystem.DiceCardXmlInfo.GetFloorLimit(Rarity)">
      <summary></summary>
      <param name="rarity"></param>
      <returns></returns>
    </member>
    <member name="M:LOR_DiceSystem.DiceCardXmlInfo.IsAssimilation">
      <summary>同化ページである事を判定します。</summary>
      <returns>同化ページである場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:LOR_DiceSystem.DiceCardXmlInfo.IsEgo">
      <summary>E.G.O ページである事を判定します。</summary>
      <returns>E.G.O ページである場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:LOR_DiceSystem.DiceCardXmlInfo.IsExhaustOnUse">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:LOR_DiceSystem.DiceCardXmlInfo.IsFloorEgo">
      <summary>階層共通の E.G.O ページである事を判定します。</summary>
      <returns>階層共通の E.G.O ページである場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:LOR_DiceSystem.DiceCardXmlInfo.isLockInBattle">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:LOR_DiceSystem.DiceCardXmlInfo.IsOnlyPage">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:LOR_DiceSystem.DiceCardXmlInfo.IsPersonal">
      <summary>特殊バトル ページである事を判定します。</summary>
      <returns>特殊バトル ページである場合は true、そうでない場合は false。</returns>
    </member>
    <member name="P:LOR_DiceSystem.DiceCardXmlInfo.FloorLimit">
      <summary></summary>
    </member>
    <member name="P:LOR_DiceSystem.DiceCardXmlInfo.id">
      <summary>バトル ページ LOR ID を取得します。</summary>
    </member>
    <member name="P:LOR_DiceSystem.DiceCardXmlInfo.Limit">
      <summary>デッキの使用枚数上限を取得します。</summary>
    </member>
    <member name="P:LOR_DiceSystem.DiceCardXmlInfo.Name">
      <summary>バトル ページ名を取得します。</summary>
    </member>
    <member name="P:LOR_DiceSystem.DiceCardXmlInfo.TextId">
      <summary>テキスト ID を取得します。内部のテキスト ID が -1 の場合、バトル ページ ID を返します。</summary>
    </member>
    <member name="T:LorId">
      <summary>Library Of Ruina のオブジェクトを一意に特定する LOR ID を表します。</summary>
    </member>
    <member name="F:LorId.id">
      <summary>数値 ID</summary>
    </member>
    <member name="F:LorId.None">
      <summary>未定義の LOR ID</summary>
    </member>
    <member name="F:LorId.packageId">
      <summary>パッケージ ID</summary>
    </member>
    <member name="M:LorId.#ctor(System.Int32)">
      <summary></summary>
      <param name="id"></param>
    </member>
    <member name="M:LorId.#ctor(System.String,System.Int32)">
      <summary></summary>
      <param name="packageId"></param>
      <param name="id"></param>
    </member>
    <member name="M:LorId.CompareTo(LorId)">
      <summary></summary>
      <param name="other"></param>
      <returns></returns>
    </member>
    <member name="M:LorId.Equals(System.Object)">
      <summary></summary>
      <param name="obj"></param>
      <returns></returns>
    </member>
    <member name="M:LorId.Equals(LorId)">
      <summary></summary>
      <param name="other"></param>
      <returns></returns>
    </member>
    <member name="M:LorId.Equals(System.Int32)">
      <summary></summary>
      <param name="other"></param>
      <returns></returns>
    </member>
    <member name="M:LorId.GetHashCode">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:LorId.GetSaveData">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:LorId.InitializeLorIds``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{LorId},System.String)">
      <summary></summary>
      <typeparam name="T"></typeparam>
      <param name="src"></param>
      <param name="dst"></param>
      <param name="defaultPid"></param>
    </member>
    <member name="M:LorId.IsBasic">
      <summary>本家または BaseMod のものである事を判定します。</summary>
      <returns>本家または BaseMod のものである場合は true、そうでない (接待 MOD の) 場合は false。</returns>
    </member>
    <member name="M:LorId.IsBasicId(System.String)">
      <summary>指定したパッケージ ID が本家または BaseMod である事を判定します。</summary>
      <param name="packageId">パッケージ ID。</param>
      <returns>本家または BaseMod のパッケージ ID である場合は true、そうでない (接待 MOD の) 場合は false。</returns>
    </member>
    <member name="M:LorId.IsModId(System.String)">
      <summary>指定したパッケージ ID が接待 MOD である事を判定します。</summary>
      <param name="packageId">パッケージ ID。</param>
      <returns>接待 MOD のパッケージ ID である場合は true、そうでない (本家または BaseMod の) 場合は false。</returns>
    </member>
    <member name="M:LorId.IsNone">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:LorId.IsWorkshop">
      <summary>接待 MOD (ワークショップ) のものである事を判定します。</summary>
      <returns>接待 MOD のものである場合は true、そうでない (本家または BaseMod の) 場合は false。</returns>
    </member>
    <member name="M:LorId.LoadFromSaveData(GameSave.SaveData)">
      <summary></summary>
      <param name="data"></param>
      <returns></returns>
    </member>
    <member name="M:LorId.MakeLorId(ILorIdXml,System.String)">
      <summary></summary>
      <param name="src"></param>
      <param name="defaultPid"></param>
      <returns></returns>
    </member>
    <member name="M:LorId.ToString">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="T:ModInitializer">
      <summary>カスタム招待 MOD を初期化する機能を提供します。</summary>
    </member>
    <member name="M:ModInitializer.#ctor">
      <summary></summary>
    </member>
    <member name="M:ModInitializer.OnInitializeMod">
      <summary>ゲーム起動時、このカスタム招待 MOD がロードされた時に呼び出されます。</summary>
    </member>
    <member name="T:PassiveAbilityBase">
      <summary>パッシブの基底クラスです。全てのパッシブと戦闘表象パッシブはこのクラスを派生して実装されます。</summary>
    </member>
    <member name="F:PassiveAbilityBase._bHide">
      <summary></summary>
    </member>
    <member name="F:PassiveAbilityBase.desc">
      <summary></summary>
    </member>
    <member name="F:PassiveAbilityBase.destroyed">
      <summary></summary>
    </member>
    <member name="F:PassiveAbilityBase.disabled">
      <summary></summary>
    </member>
    <member name="F:PassiveAbilityBase.id">
      <summary></summary>
    </member>
    <member name="F:PassiveAbilityBase.InnerTypeId">
      <summary></summary>
    </member>
    <member name="F:PassiveAbilityBase.isNegative">
      <summary></summary>
    </member>
    <member name="F:PassiveAbilityBase.name">
      <summary></summary>
    </member>
    <member name="F:PassiveAbilityBase.owner">
      <summary>パッシブの所有キャラクター</summary>
    </member>
    <member name="F:PassiveAbilityBase.rare">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.#ctor">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.AfterGiveDamage(System.Int32)">
      <summary></summary>
      <param name="damage"></param>
    </member>
    <member name="M:PassiveAbilityBase.AfterTakeDamage(BattleUnitModel,System.Int32)">
      <summary></summary>
      <param name="attacker"></param>
      <param name="dmg"></param>
    </member>
    <member name="M:PassiveAbilityBase.AllowTargetChanging(BattleUnitModel,System.Int32)">
      <summary></summary>
      <param name="attacker"></param>
      <param name="myCardSlotIdx"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.BeforeGiveDamage(BattleDiceBehavior)">
      <summary>ダメージを与える直前に呼び出されます。</summary>
      <param name="behavior">ダメージを与えようとしているバトル ダイスに対するビヘイビア (振る舞いを操作するオブジェクト)。</param>
    </member>
    <member name="M:PassiveAbilityBase.BeforeRollDice(BattleDiceBehavior)">
      <summary>ダイス ロールの直前に呼び出されます。バトル ダイスに対するボーナス値の指定などはこのメソッドで行います。</summary>
      <param name="behavior">ロールに使用されているバトル ダイスに対するビヘイビア (振る舞いを操作するオブジェクト)。</param>
    </member>
    <member name="M:PassiveAbilityBase.BeforeTakeBreakDamage(BattleUnitModel,System.Int32)">
      <summary></summary>
      <param name="attacker"></param>
      <param name="dmg"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.BeforeTakeDamage(BattleUnitModel,System.Int32)">
      <summary>ダメージを受ける直前に呼び出されます。</summary>
      <param name="attacker">攻撃キャラクター。攻撃キャラクター以外からのダメージの場合は null。</param>
      <param name="dmg">被ダメージ量。</param>
      <returns>被ダメージを無効化する場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:PassiveAbilityBase.BreakDmgFactor(System.Int32,DamageType,KeywordBuf)">
      <summary></summary>
      <param name="dmg"></param>
      <param name="type"></param>
      <param name="keyword"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.CanAddBuf(BattleUnitBuf)">
      <summary>指定した状態を付与できる事を判定します。</summary>
      <param name="buf">付与できる事を判定する対象の状態。</param>
      <returns>付与できる場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:PassiveAbilityBase.CanTakeTargeting">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.ChangeAttackTarget(BattleDiceCardModel,System.Int32)">
      <summary>指定したバトル ページの対象キャラクターを変更します。</summary>
      <param name="card">対象キャラクターを変更するバトル ページ。</param>
      <param name="idx">バトル ページの速度ダイス スロット番号。</param>
      <returns>変更後の対象キャラクター。対象キャラクターの変更が無い場合は null。</returns>
    </member>
    <member name="M:PassiveAbilityBase.ChangeDamage(BattleUnitModel,System.Double)">
      <summary></summary>
      <param name="attacker"></param>
      <param name="dmg"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.ChangeDiceResult(BattleDiceBehavior,System.Int32@)">
      <summary></summary>
      <param name="behavior"></param>
      <param name="diceResult"></param>
    </member>
    <member name="M:PassiveAbilityBase.ChangeSubTargets(BattleDiceCardModel,BattleUnitModel)">
      <summary></summary>
      <param name="card"></param>
      <param name="mainTarget"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.ChangeTargetSlot(BattleDiceCardModel,BattleUnitModel,System.Int32,System.Int32,System.Boolean)">
      <summary></summary>
      <param name="card"></param>
      <param name="target"></param>
      <param name="currentSlot"></param>
      <param name="targetSlot"></param>
      <param name="teamkill"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.DmgFactor(System.Int32,DamageType,KeywordBuf)">
      <summary></summary>
      <param name="dmg"></param>
      <param name="type"></param>
      <param name="keyword"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.DontChangeResistByBreak">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.GetBreakDamageReduction(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.GetBreakDamageReductionAll(System.Int32,DamageType,BattleUnitModel)">
      <summary>被混乱ダメージの総軽減量を取得します。</summary>
      <param name="dmg">軽減前の被混乱ダメージ量。</param>
      <param name="dmgType">ダメージ元の種類。</param>
      <param name="attacker">攻撃キャラクター。</param>
      <returns>被混乱ダメージの総軽減量。</returns>
    </member>
    <member name="M:PassiveAbilityBase.GetDamageReduction(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.GetDamageReductionAll">
      <summary>被ダメージの総軽減量を取得します。</summary>
      <returns>被ダメージの総軽減量。</returns>
    </member>
    <member name="M:PassiveAbilityBase.GetEmotionCoinAdder(System.Int32)">
      <summary></summary>
      <param name="defaultCount"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.GetMaxBpBonus">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.GetMaxHpBonus">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.GetMinHp">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.GetMultiplierOnGiveKeywordBufByCard(BattleUnitBuf,BattleUnitModel)">
      <summary></summary>
      <param name="buf"></param>
      <param name="target"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.GetPriorityAdder(BattleDiceCardModel,System.Int32)">
      <summary></summary>
      <param name="card"></param>
      <param name="speed"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.GetResistBP(AtkResist,LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="origin"></param>
      <param name="detail"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.GetResistHP(AtkResist,LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="origin"></param>
      <param name="detail"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.GetSpeedDiceAdder(System.Int32)">
      <summary></summary>
      <param name="speedDiceResult"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.GetStartHp(System.Single)">
      <summary></summary>
      <param name="hp"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.GetTakenGuardBreakDamageAdder(System.Int32)">
      <summary></summary>
      <param name="dmg"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.Hide">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.Init(BattleUnitModel)">
      <summary>このパッシブを初期化します。このメソッドは待機状態やアクティブ状態に関係なくパッシブ リストに追加された時に呼び出されます。</summary>
      <param name="owner">パッシブの所有キャラクター。</param>
    </member>
    <member name="M:PassiveAbilityBase.IsAttackDice(LOR_DiceSystem.BehaviourDetail)">
      <summary>指定したバトル ダイスが攻撃ダイスである事を判定します。</summary>
      <param name="diceDetail">判定するバトル ダイスの振る舞いの詳細。</param>
      <returns>指定したバトル ダイスが攻撃ダイスである場合は true、そうでない場合は false を返します。</returns>
    </member>
    <member name="M:PassiveAbilityBase.IsDefenseDice(LOR_DiceSystem.BehaviourDetail)">
      <summary></summary>
      <param name="diceDetail"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.IsImmune(KeywordBuf)">
      <summary>指定した状態に対して耐性を持っている事を判定します。このメソッドは各パッシブの実装で呼び出します。</summary>
      <param name="buf">耐性情報を取得する状態。</param>
      <returns>指定した状態に対して耐性である場合は true、そうでない場合は false を返します。</returns>
    </member>
    <member name="M:PassiveAbilityBase.IsImmuneBreakDmg(DamageType)">
      <summary></summary>
      <param name="type"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.IsImmuneDmg(DamageType,KeywordBuf)">
      <summary></summary>
      <param name="type"></param>
      <param name="keyword"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.IsImmuneDmg">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.IsNearOrFar(BattleDiceCardModel)">
      <summary>指定したバトル ページが近距離または遠距離バトル ページである事を判定します。</summary>
      <param name="card">判定対象のバトル ページ。</param>
      <returns>指定したバトル ページが近距離または遠距離バトル ページである場合は true、そうでない場合は false を返します。</returns>
    </member>
    <member name="M:PassiveAbilityBase.IsTargetable(BattleUnitModel)">
      <summary></summary>
      <param name="attacker"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.IsTargetable_theLast">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.MaxPlayPointAdder">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.OnAddKeywordBufByCard(BattleUnitBuf,System.Int32)">
      <summary>このパッシブの所有キャラクターにバトル ページによって状態が付与された場合に呼び出されます。</summary>
      <param name="buf">付与された状態。</param>
      <param name="stack">付与された状態のスタック数。</param>
      <returns>付与された状態に追加するスタック数の増分。</returns>
    </member>
    <member name="M:PassiveAbilityBase.OnAddKeywordBufByCardForEvent(KeywordBuf,System.Int32,BufReadyType)">
      <summary></summary>
      <param name="keywordBuf"></param>
      <param name="stack"></param>
      <param name="readyType"></param>
    </member>
    <member name="M:PassiveAbilityBase.OnAfterRollSpeedDice">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.OnBattleEnd">
      <summary>接待の終了時に呼び出されます。</summary>
    </member>
    <member name="M:PassiveAbilityBase.OnBattleEnd_alive">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.OnBreakGageZero">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.OnBreakState">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.OnChangeLayer(System.String)">
      <summary></summary>
      <param name="layerName"></param>
    </member>
    <member name="M:PassiveAbilityBase.OnCheckEndBattle(System.Boolean@,System.Boolean@)">
      <summary></summary>
      <param name="librarianExists"></param>
      <param name="enemyExists"></param>
    </member>
    <member name="M:PassiveAbilityBase.OnCreated">
      <summary>このパッシブが待機状態からアクティブ状態に変更された場合に呼び出されます。このメソッドは <see cref="M:BattleUnitPassiveDetail.AddPassive(PassiveAbilityBase)" /> または <see cref="M:BattleUnitPassiveDetail.AddPassive(LorId)" /> メソッドにより動的に追加された時、次の幕の開始直前に呼び出されます。コアページや戦闘表象で最初から所有しているパッシブは最初からアクティブ状態なので呼び出されません。</summary>
    </member>
    <member name="M:PassiveAbilityBase.OnDestroyCard(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="card"></param>
    </member>
    <member name="M:PassiveAbilityBase.OnDestroyed">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.OnDie">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.OnDieOtherUnit(BattleUnitModel)">
      <summary>このパッシブの所有キャラクター以外のキャラクターが敵味方を問わず死亡した場合に呼び出されます。</summary>
      <param name="unit">死亡したキャラクター。</param>
    </member>
    <member name="M:PassiveAbilityBase.OnDiscardByAbility(System.Collections.Generic.List{BattleDiceCardModel})">
      <summary></summary>
      <param name="cards"></param>
    </member>
    <member name="M:PassiveAbilityBase.OnDrawCard">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.OnDrawParrying(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:PassiveAbilityBase.OnEndBattle(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="curCard"></param>
    </member>
    <member name="M:PassiveAbilityBase.OnEndBattlePhase">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.OnEndOneSide">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.OnEndOneSideVictim(BattlePlayingCardDataInUnitModel)">
      <summary>相手からのバトル ページによる一方攻撃が終了した時に呼び出されます。</summary>
      <param name="attackerCard">攻撃キャラクターが使用したバトル ページ。</param>
    </member>
    <member name="M:PassiveAbilityBase.OnEndParrying">
      <summary>バトル ページによるマッチが終了した時に呼び出されます。</summary>
    </member>
    <member name="M:PassiveAbilityBase.OnEndParrying(BattlePlayingCardDataInUnitModel)">
      <summary>バトル ページによるマッチが終了した時に呼び出されます。</summary>
      <param name="curCard"></param>
    </member>
    <member name="M:PassiveAbilityBase.OnExhaustBullet">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.OnFixedUpdateInWaitPhase(System.Single)">
      <summary></summary>
      <param name="delta"></param>
    </member>
    <member name="M:PassiveAbilityBase.OnGainChargeStack">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.OnGiveKeywordBufByCard(BattleUnitBuf,System.Int32,BattleUnitModel)">
      <summary></summary>
      <param name="buf"></param>
      <param name="stack"></param>
      <param name="target"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.OnKill(BattleUnitModel)">
      <summary></summary>
      <param name="target"></param>
    </member>
    <member name="M:PassiveAbilityBase.OnLevelUpEmotion">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.OnLoseHp(System.Int32)">
      <summary></summary>
      <param name="dmg"></param>
    </member>
    <member name="M:PassiveAbilityBase.OnLoseParrying(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:PassiveAbilityBase.OnMakeBreakState(BattleUnitModel)">
      <summary></summary>
      <param name="target"></param>
    </member>
    <member name="M:PassiveAbilityBase.OnOtherUnitReservedCostChanged(BattleUnitModel,System.Int32)">
      <summary></summary>
      <param name="unit"></param>
      <param name="cur"></param>
    </member>
    <member name="M:PassiveAbilityBase.OnRecoverHp(System.Int32)">
      <summary></summary>
      <param name="amount"></param>
    </member>
    <member name="M:PassiveAbilityBase.OnReleaseBreak">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.OnRollDice(BattleDiceBehavior)">
      <summary>バトル ダイスを振る時に呼び出されます。</summary>
      <param name="behavior">振るバトル ダイスに対するビヘイビア (振る舞いを操作するオブジェクト)。</param>
    </member>
    <member name="M:PassiveAbilityBase.OnRollDiceInRencounter">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.OnRollSpeedDice">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.OnRoundEnd">
      <summary>幕の終了時に呼び出されます。</summary>
    </member>
    <member name="M:PassiveAbilityBase.OnRoundEnd_before">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.OnRoundEndTheLast">
      <summary>幕の終了時、 <see cref="M:PassiveAbilityBase.OnRoundEnd" /> の後に呼び出されます。</summary>
    </member>
    <member name="M:PassiveAbilityBase.OnRoundEndTheLast_ignoreDead">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.OnRoundStart">
      <summary>幕の開始時に呼び出されます。</summary>
    </member>
    <member name="M:PassiveAbilityBase.OnRoundStartAfter">
      <summary>幕の開始時、 <see cref="M:PassiveAbilityBase.OnRoundStart" /> の後に呼び出されます。</summary>
    </member>
    <member name="M:PassiveAbilityBase.OnSelectCardAuto(BattleDiceCardModel,System.Int32)">
      <summary></summary>
      <param name="origin"></param>
      <param name="currentDiceSlotIdx"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveAbilityBase.OnStartBattle">
      <summary>戦闘開始時に呼び出されます。</summary>
    </member>
    <member name="M:PassiveAbilityBase.OnStartOneSidePlay(BattlePlayingCardDataInUnitModel)">
      <summary>自分のバトル ページによる一方攻撃を開始する時に呼び出されます。</summary>
      <param name="card">このパッシブの所有キャラクターが一方攻撃に使用するバトル ページ。</param>
    </member>
    <member name="M:PassiveAbilityBase.OnStartParrying(BattlePlayingCardDataInUnitModel)">
      <summary>バトル ページによるマッチが発生する直前に呼び出されます。</summary>
      <param name="card">このパッシブの所有キャラクターがマッチに使用するバトル ページ。</param>
    </member>
    <member name="M:PassiveAbilityBase.OnStartTargetedByAreaAtk(BattlePlayingCardDataInUnitModel)">
      <summary></summary>
      <param name="attackerCard"></param>
    </member>
    <member name="M:PassiveAbilityBase.OnStartTargetedOneSide(BattlePlayingCardDataInUnitModel)">
      <summary>相手からのバトル ページによる一方攻撃が開始される時に呼び出されます。</summary>
      <param name="attackerCard">攻撃キャラクターが使用するバトル ページ。</param>
    </member>
    <member name="M:PassiveAbilityBase.OnSucceedAreaAttack(BattleDiceBehavior,BattleUnitModel)">
      <summary></summary>
      <param name="behavior"></param>
      <param name="target"></param>
    </member>
    <member name="M:PassiveAbilityBase.OnSucceedAttack(BattleDiceBehavior)">
      <summary>攻撃の的中時に呼び出されます。</summary>
      <param name="behavior">攻撃に使用されているバトル ダイスに対するビヘイビア (振る舞いを操作するオブジェクト)。</param>
    </member>
    <member name="M:PassiveAbilityBase.OnSucceedAttackEvent(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:PassiveAbilityBase.OnTakeBreakDamageByAttack(BattleDiceBehavior,System.Int32)">
      <summary>攻撃により混乱ダメージを受け、このパッシブの所有キャラクターが死亡しなかった場合に呼び出されます。</summary>
      <param name="atkDice">攻撃に使用されたバトル ダイスに対するビヘイビア (振る舞いを操作するオブジェクト)。</param>
      <param name="breakdmg">被混乱ダメージ量。</param>
    </member>
    <member name="M:PassiveAbilityBase.OnTakeDamageByAttack(BattleDiceBehavior,System.Int32)">
      <summary>攻撃によりダメージを受け、このパッシブの所有キャラクターが死亡しなかった場合に呼び出されます。</summary>
      <param name="atkDice">攻撃に使用されたバトル ダイスに対するビヘイビア (振る舞いを操作するオブジェクト)。</param>
      <param name="dmg">被ダメージ量。</param>
    </member>
    <member name="M:PassiveAbilityBase.OnUnitCreated">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.OnUseCard(BattlePlayingCardDataInUnitModel)">
      <summary>バトル ページが使用される時に呼び出されます。</summary>
      <param name="curCard">使用されるバトル ページ。</param>
    </member>
    <member name="M:PassiveAbilityBase.OnUseChargeStack">
      <summary></summary>
    </member>
    <member name="M:PassiveAbilityBase.OnWaveStart">
      <summary>舞台の開始時に呼び出されます。</summary>
    </member>
    <member name="M:PassiveAbilityBase.OnWinParrying(BattleDiceBehavior)">
      <summary></summary>
      <param name="behavior"></param>
    </member>
    <member name="M:PassiveAbilityBase.SpeedDiceBreakedAdder">
      <summary>使用不可にする速度ダイスの加算数を返します。</summary>
      <returns>使用不可にする速度ダイスの加算数。</returns>
    </member>
    <member name="M:PassiveAbilityBase.SpeedDiceNumAdder">
      <summary>速度ダイスの加算数を返します。</summary>
      <returns>速度ダイスの加算数。</returns>
    </member>
    <member name="M:PassiveAbilityBase.TeamKill">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="P:PassiveAbilityBase.debugDesc">
      <summary></summary>
    </member>
    <member name="P:PassiveAbilityBase.isActiavted">
      <summary></summary>
    </member>
    <member name="P:PassiveAbilityBase.isActionable">
      <summary></summary>
    </member>
    <member name="P:PassiveAbilityBase.isDamageReductionForEvent">
      <summary></summary>
    </member>
    <member name="P:PassiveAbilityBase.isHide">
      <summary></summary>
    </member>
    <member name="P:PassiveAbilityBase.isImmortal">
      <summary></summary>
    </member>
    <member name="P:PassiveAbilityBase.isImmuneByFarAtk">
      <summary></summary>
    </member>
    <member name="P:PassiveAbilityBase.isInvincible">
      <summary></summary>
    </member>
    <member name="P:PassiveAbilityBase.isInvincibleBp">
      <summary></summary>
    </member>
    <member name="P:PassiveAbilityBase.isInvincibleHp">
      <summary></summary>
    </member>
    <member name="P:PassiveAbilityBase.isKnockoutInsteadOfDeath">
      <summary></summary>
    </member>
    <member name="P:PassiveAbilityBase.isNegativeHalfExceptBurn">
      <summary></summary>
    </member>
    <member name="P:PassiveAbilityBase.isStraighten">
      <summary></summary>
    </member>
    <member name="P:PassiveAbilityBase.isTargetable">
      <summary>このパッシブの所有キャラクターにターゲット可能である事を示す値を取得します。</summary>
    </member>
    <member name="P:PassiveAbilityBase.Owner">
      <summary>パッシブの所有キャラクターを取得します。</summary>
    </member>
    <member name="T:PassiveModel">
      <summary>パッシブのモデル情報を表します。</summary>
    </member>
    <member name="F:PassiveModel.originData">
      <summary>セーブ データとして保存されていたオリジナル データ</summary>
    </member>
    <member name="F:PassiveModel.originpassive">
      <summary>StaticInfo (PassiveList.txt) に定義された、変更が加えられていないオリジナルのパッシブ情報</summary>
    </member>
    <member name="F:PassiveModel.reservedData">
      <summary></summary>
    </member>
    <member name="F:PassiveModel.save_bookxmlid">
      <summary></summary>
    </member>
    <member name="F:PassiveModel.save_currentpassiveid">
      <summary></summary>
    </member>
    <member name="F:PassiveModel.save_givebookInstanceId">
      <summary></summary>
    </member>
    <member name="F:PassiveModel.save_isAddedPassiveId">
      <summary></summary>
    </member>
    <member name="F:PassiveModel.save_originpassiveidid">
      <summary></summary>
    </member>
    <member name="F:PassiveModel.save_receivebookInstanceId">
      <summary></summary>
    </member>
    <member name="M:PassiveModel.#ctor">
      <summary>
        <see cref="T:PassiveModel" /> の新しいインスタンスを生成します。</summary>
    </member>
    <member name="M:PassiveModel.#ctor(LorId,System.Int32,System.Int32)">
      <summary></summary>
      <param name="id"></param>
      <param name="bookinstanceid"></param>
      <param name="isaddedpassive"></param>
    </member>
    <member name="M:PassiveModel.#ctor(System.Int32)">
      <summary>
        <see cref="T:PassiveModel" /> の新しいインスタンスを生成します。</summary>
      <param name="bookinstanceid">このパッシブを保有するページ ID。</param>
    </member>
    <member name="M:PassiveModel.ApplyReserved">
      <summary></summary>
    </member>
    <member name="M:PassiveModel.DeepCopy(PassiveXmlInfo)">
      <summary></summary>
      <param name="passive"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveModel.GetSaveData">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:PassiveModel.InitReservedData">
      <summary></summary>
    </member>
    <member name="M:PassiveModel.IsChangedReserved">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:PassiveModel.IsGiveFromPassiveModel(PassiveModel)">
      <summary></summary>
      <param name="targetpassive"></param>
      <returns></returns>
    </member>
    <member name="M:PassiveModel.LoadFromSaveData(GameSave.SaveData)">
      <summary></summary>
      <param name="data"></param>
    </member>
    <member name="M:PassiveModel.ReleaseSuccesionGivePassive(System.Boolean)">
      <summary></summary>
      <param name="origin"></param>
    </member>
    <member name="M:PassiveModel.ReleaseSuccesionReceivePassive(System.Boolean)">
      <summary></summary>
      <param name="origin"></param>
    </member>
    <member name="M:PassiveModel.ResetReservedPassive">
      <summary></summary>
    </member>
    <member name="M:PassiveModel.SetGiveBookId(System.Int32)">
      <summary></summary>
      <param name="instanceid"></param>
    </member>
    <member name="M:PassiveModel.SuccessionPassiveForReserved(PassiveModel)">
      <summary></summary>
      <param name="passivemodel"></param>
    </member>
    <member name="P:PassiveModel.BookInstanceId">
      <summary>このパッシブを保有するページ ID を取得します。</summary>
    </member>
    <member name="P:PassiveModel.CanToGivePassive">
      <summary></summary>
    </member>
    <member name="P:PassiveModel.IsReceivedSuccessionPassive">
      <summary>継承されたパッシブである事を示す値を取得します。</summary>
    </member>
    <member name="T:RandomUtil">
      <summary>乱数操作を行うユーティリティ クラスです。</summary>
    </member>
    <member name="F:RandomUtil.randomValue">
      <summary>.NET Framework に内包された乱数生成オブジェクト</summary>
    </member>
    <member name="M:RandomUtil.#ctor">
      <summary></summary>
    </member>
    <member name="M:RandomUtil.Range(System.Int32,System.Int32)">
      <summary>指定した範囲内のランダムな整数 (32 ビット符号付整数) を返します。</summary>
      <param name="min">返される乱数の下限値。この数値は乱数に含まれます。</param>
      <param name="max">返される乱数の上限値。この数値は乱数に含まれます。</param>
      <returns>min 以上 max 以下の 32 ビット符号付整数。</returns>
    </member>
    <member name="M:RandomUtil.RangeFloat(System.Single,System.Single)">
      <summary>指定した範囲内のランダムな実数 (単精度浮動小数点数) を返します。</summary>
      <param name="min">返される乱数の下限値。この数値は乱数に含まれます。</param>
      <param name="max">返される乱数の上限値。この数値は乱数に含まれます。</param>
      <returns>min 以上 max 以下の単精度浮動小数点数。</returns>
    </member>
    <member name="M:RandomUtil.SelectOne``1(T[])">
      <summary></summary>
      <typeparam name="T"></typeparam>
      <param name="list"></param>
      <returns></returns>
    </member>
    <member name="M:RandomUtil.SelectOne``1(System.Collections.Generic.List{``0})">
      <summary>指定したリストからランダムに要素を一つ選択して返します。</summary>
      <typeparam name="T">リストの要素の型。</typeparam>
      <param name="list">選択対象となるリスト。</param>
      <returns>list に含まれている要素。</returns>
    </member>
    <member name="M:RandomUtil.SelectOne``1(T[],System.Single[])">
      <summary></summary>
      <typeparam name="T"></typeparam>
      <param name="list"></param>
      <param name="probs"></param>
      <returns></returns>
    </member>
    <member name="M:RandomUtil.SystemRange(System.Int32)">
      <summary></summary>
      <param name="max"></param>
      <returns></returns>
    </member>
    <member name="P:RandomUtil.valueForProb">
      <summary>0 以上 1 未満のランダムな実数 (単精度浮動小数点数) を取得します。</summary>
    </member>
    <member name="P:RandomUtil.valueForRange">
      <summary></summary>
    </member>
    <member name="T:Rarity">
      <summary>レアリティを表します。</summary>
    </member>
    <member name="F:Rarity.Common">
      <summary>普及</summary>
    </member>
    <member name="F:Rarity.Rare">
      <summary>限定</summary>
    </member>
    <member name="F:Rarity.Special">
      <summary></summary>
    </member>
    <member name="F:Rarity.Uncommon">
      <summary>高級</summary>
    </member>
    <member name="F:Rarity.Unique">
      <summary>芸術</summary>
    </member>
    <member name="T:Singleton`1">
      <summary>クラスに Singleton パターンを実装します。</summary>
      <typeparam name="T">Singleton パターンを適用する型。クラス型であり、引数なしのデフォルト コンストラクタを持つ必要があります。</typeparam>
    </member>
    <member name="P:Singleton`1.Instance">
      <summary>このクラスの唯一のインスタンスを取得します。</summary>
    </member>
    <member name="T:StageClassInfoList">
      <summary>接待 XML データを格納するリストです。</summary>
    </member>
    <member name="M:StageClassInfoList.#ctor">
      <summary></summary>
    </member>
    <member name="M:StageClassInfoList.AddStageByMod(System.String,System.Collections.Generic.List{StageClassInfo})">
      <summary></summary>
      <param name="workshopId"></param>
      <param name="list"></param>
    </member>
    <member name="M:StageClassInfoList.GetAllDataList">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:StageClassInfoList.GetAllWorkshopData">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:StageClassInfoList.GetData(System.Int32)">
      <summary>指定した数値 ID に一致する接待 XML データをこのリストから取得します。</summary>
      <param name="id">取得する接待 XML データの数値 ID。</param>
      <returns>指定した数値 ID に最初に一致する接待 XML データ。リストに存在しない場合は null。</returns>
    </member>
    <member name="M:StageClassInfoList.GetData(LorId)">
      <summary>指定した LOR ID に一致する接待 XML データをこのリストから取得します。</summary>
      <param name="id">取得する接待 XML データの LOR ID。</param>
      <returns>指定した LOR ID に最初に一致する接待 XML データ。リストに存在しない場合は null。</returns>
    </member>
    <member name="M:StageClassInfoList.GetDataFromBooks(System.Collections.Generic.List{DropBookXmlInfo})">
      <summary></summary>
      <param name="books"></param>
      <returns></returns>
    </member>
    <member name="M:StageClassInfoList.GetDataListByChapter(System.Int32)">
      <summary></summary>
      <param name="chapter"></param>
      <returns></returns>
    </member>
    <member name="M:StageClassInfoList.GetWorkshopDataFromBooks(System.Collections.Generic.List{DropBookXmlInfo})">
      <summary></summary>
      <param name="books"></param>
      <returns></returns>
    </member>
    <member name="M:StageClassInfoList.Init(System.Collections.Generic.List{StageClassInfo})">
      <summary></summary>
      <param name="list"></param>
    </member>
    <member name="M:StageClassInfoList.IsSubscribeWorkshopInv">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="P:StageClassInfoList.recipeCondList">
      <summary></summary>
    </member>
    <member name="T:StageClearInfoListModel">
      <summary>舞台のクリア情報を格納したリストです。このオブジェクトは保存可能です。</summary>
    </member>
    <member name="F:StageClearInfoListModel.save_clearCount">
      <summary></summary>
    </member>
    <member name="F:StageClearInfoListModel.save_stageId">
      <summary></summary>
    </member>
    <member name="F:StageClearInfoListModel.save_stageInfoList">
      <summary></summary>
    </member>
    <member name="F:StageClearInfoListModel.save_stageUnlockedList">
      <summary></summary>
    </member>
    <member name="M:StageClearInfoListModel.#ctor">
      <summary></summary>
    </member>
    <member name="M:StageClearInfoListModel.AddClearCount(System.Int32)">
      <summary></summary>
      <param name="stageId"></param>
      <returns></returns>
    </member>
    <member name="M:StageClearInfoListModel.AddClearCount(LorId)">
      <summary></summary>
      <param name="stageId"></param>
      <returns></returns>
    </member>
    <member name="M:StageClearInfoListModel.GetClearCount(System.Int32)">
      <summary>指定した接待の数値 ID に一致する接待のクリア回数をこのリストから取得します。</summary>
      <param name="stageId">クリア回数を取得する接待の数値 ID。</param>
      <returns>指定した数値 ID に一致する接待のクリア回数。未クリアまたは数値 ID に一致する接待がない場合は 0。</returns>
    </member>
    <member name="M:StageClearInfoListModel.GetClearCount(LorId)">
      <summary>指定した接待の LOR ID に一致する接待のクリア回数をこのリストから取得します。</summary>
      <param name="stageId">クリア回数を取得する接待の LOR ID。</param>
      <returns>指定した LOR ID に一致する接待のクリア回数。未クリアまたは LOR ID に一致する接待がない場合は 0。</returns>
    </member>
    <member name="M:StageClearInfoListModel.GetSaveData">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:StageClearInfoListModel.Init">
      <summary></summary>
    </member>
    <member name="M:StageClearInfoListModel.IsUnlockedStage(LorId)">
      <summary></summary>
      <param name="stageId"></param>
      <returns></returns>
    </member>
    <member name="M:StageClearInfoListModel.LoadFromSaveData(GameSave.SaveData)">
      <summary></summary>
      <param name="data"></param>
    </member>
    <member name="M:StageClearInfoListModel.RemoveAllUnloadedModClearInfos">
      <summary></summary>
    </member>
    <member name="M:StageClearInfoListModel.ResetClearCount(System.Int32)">
      <summary></summary>
      <param name="stageId"></param>
    </member>
    <member name="M:StageClearInfoListModel.ResetClearCount(LorId)">
      <summary></summary>
      <param name="stageId"></param>
    </member>
    <member name="M:StageClearInfoListModel.SetClearCountForEndContents(System.Int32)">
      <summary></summary>
      <param name="stageid"></param>
    </member>
    <member name="M:StageClearInfoListModel.SetClearCountForEndContents(LorId)">
      <summary></summary>
      <param name="stageid"></param>
    </member>
    <member name="M:StageClearInfoListModel.UnlockStage(LorId)">
      <summary></summary>
      <param name="stageId"></param>
    </member>
    <member name="T:StatBonus">
      <summary>能力値に付与するボーナス値を表します。</summary>
    </member>
    <member name="F:StatBonus.breakAdder">
      <summary>被混乱ダメージの増加量。</summary>
    </member>
    <member name="F:StatBonus.breakGageAdder">
      <summary>混乱抵抗値の増加量</summary>
    </member>
    <member name="F:StatBonus.breakRate">
      <summary>パーセンテージ単位の混乱抵抗値の増加率</summary>
    </member>
    <member name="F:StatBonus.dmgAdder">
      <summary>被ダメージの増加量</summary>
    </member>
    <member name="F:StatBonus.guardTakenBreakRate">
      <summary></summary>
    </member>
    <member name="F:StatBonus.hpAdder">
      <summary>体力の増加量</summary>
    </member>
    <member name="F:StatBonus.hpRate">
      <summary>パーセンテージ単位の体力の増加率</summary>
    </member>
    <member name="M:StatBonus.#ctor">
      <summary></summary>
    </member>
    <member name="M:StatBonus.AddStatBonus(StatBonus)">
      <summary></summary>
      <param name="b"></param>
    </member>
    <member name="T:UnitDataModel">
      <summary>指定司書または司書補キャラクターのデータを表します。</summary>
    </member>
    <member name="F:UnitDataModel.aiScript">
      <summary></summary>
    </member>
    <member name="F:UnitDataModel.appearanceType">
      <summary></summary>
    </member>
    <member name="F:UnitDataModel.battleDialogModel">
      <summary></summary>
    </member>
    <member name="F:UnitDataModel.bonusBreak">
      <summary></summary>
    </member>
    <member name="F:UnitDataModel.bonusHp">
      <summary></summary>
    </member>
    <member name="F:UnitDataModel.forceItemChangeLock">
      <summary></summary>
    </member>
    <member name="F:UnitDataModel.gender">
      <summary></summary>
    </member>
    <member name="F:UnitDataModel.giftInventory">
      <summary>保有している戦闘表象を格納しているインベントリ</summary>
    </member>
    <member name="F:UnitDataModel.grade">
      <summary></summary>
    </member>
    <member name="F:UnitDataModel.isSephirah">
      <summary>指定司書キャラクターであることを示す値</summary>
    </member>
    <member name="F:UnitDataModel.isUnknownBattleSetting">
      <summary></summary>
    </member>
    <member name="F:UnitDataModel.postfixID">
      <summary></summary>
    </member>
    <member name="F:UnitDataModel.prefixID">
      <summary></summary>
    </member>
    <member name="F:UnitDataModel.save_appearance">
      <summary></summary>
    </member>
    <member name="F:UnitDataModel.save_AppearanceType">
      <summary></summary>
    </member>
    <member name="F:UnitDataModel.save_bookInstanceId">
      <summary></summary>
    </member>
    <member name="F:UnitDataModel.save_customcorebookInstanceId">
      <summary></summary>
    </member>
    <member name="F:UnitDataModel.save_deck">
      <summary></summary>
    </member>
    <member name="F:UnitDataModel.save_defaultBook">
      <summary></summary>
    </member>
    <member name="F:UnitDataModel.save_giftInventory">
      <summary></summary>
    </member>
    <member name="F:UnitDataModel.save_history">
      <summary></summary>
    </member>
    <member name="F:UnitDataModel.save_name">
      <summary></summary>
    </member>
    <member name="F:UnitDataModel.save_nameID">
      <summary></summary>
    </member>
    <member name="F:UnitDataModel.save_postfixID">
      <summary></summary>
    </member>
    <member name="F:UnitDataModel.save_prefixID">
      <summary></summary>
    </member>
    <member name="F:UnitDataModel.save_script">
      <summary></summary>
    </member>
    <member name="F:UnitDataModel.save_workshopSkin">
      <summary></summary>
    </member>
    <member name="F:UnitDataModel.size">
      <summary></summary>
    </member>
    <member name="F:UnitDataModel.textureIndex">
      <summary></summary>
    </member>
    <member name="F:UnitDataModel.workshopSkin">
      <summary></summary>
    </member>
    <member name="M:UnitDataModel.#ctor(System.Int32,SephirahType,System.Boolean)">
      <summary></summary>
      <param name="defaultBook"></param>
      <param name="sephirah"></param>
      <param name="isSephirahChar"></param>
    </member>
    <member name="M:UnitDataModel.#ctor(LorId,SephirahType,System.Boolean)">
      <summary></summary>
      <param name="defaultBook"></param>
      <param name="sephirah"></param>
      <param name="isSephirahChar"></param>
    </member>
    <member name="M:UnitDataModel.AddCardFromInventory(LorId)">
      <summary></summary>
      <param name="cardId"></param>
      <returns></returns>
    </member>
    <member name="M:UnitDataModel.AddCardInDeckFromInventory(LOR_DiceSystem.DiceCardXmlInfo)">
      <summary></summary>
      <param name="card"></param>
      <returns></returns>
    </member>
    <member name="M:UnitDataModel.CreateDeckByDeckInfo">
      <summary></summary>
    </member>
    <member name="M:UnitDataModel.EmptyDeckToInventory">
      <summary></summary>
    </member>
    <member name="M:UnitDataModel.EmptyDeckToInventoryAll">
      <summary></summary>
    </member>
    <member name="M:UnitDataModel.EquipBook(BookModel,System.Boolean,System.Boolean)">
      <summary></summary>
      <param name="newBook"></param>
      <param name="isEnemySetting"></param>
      <param name="force"></param>
      <returns></returns>
    </member>
    <member name="M:UnitDataModel.EquipBookForUI(BookModel,System.Boolean,System.Boolean)">
      <summary></summary>
      <param name="newBook"></param>
      <param name="isEnemySetting"></param>
      <param name="force"></param>
      <returns></returns>
    </member>
    <member name="M:UnitDataModel.EquipCustomCoreBook(BookModel)">
      <summary></summary>
      <param name="custombook"></param>
    </member>
    <member name="M:UnitDataModel.GetCustomBookItemData">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:UnitDataModel.GetDeck">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:UnitDataModel.GetDeckAll">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:UnitDataModel.GetDeckAllList">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:UnitDataModel.GetDeckCardModelAll">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:UnitDataModel.GetDeckForBattle(System.Int32)">
      <summary></summary>
      <param name="index"></param>
      <returns></returns>
    </member>
    <member name="M:UnitDataModel.GetDeckList">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:UnitDataModel.GetDeckSize">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:UnitDataModel.GetEmotionCardInfo(MentalState,System.Int32)">
      <summary></summary>
      <param name="state"></param>
      <param name="level"></param>
      <returns></returns>
    </member>
    <member name="M:UnitDataModel.GetEquippedGiftList">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:UnitDataModel.GetSaveData">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:UnitDataModel.GetStartDraw">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:UnitDataModel.InitBattleDialogByDefaultBook(LorId)">
      <summary></summary>
      <param name="lorId"></param>
    </member>
    <member name="M:UnitDataModel.IsBasicBook">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:UnitDataModel.IsBinahChangeItemLock">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:UnitDataModel.IsBlackSilenceChangeItemLock">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:UnitDataModel.IsChangeItemLock">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:UnitDataModel.IsGebura">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:UnitDataModel.IsLockUnit">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:UnitDataModel.isLockUnitForBluePrimary">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:UnitDataModel.LoadFromSaveData(GameSave.SaveData)">
      <summary></summary>
      <param name="data"></param>
    </member>
    <member name="M:UnitDataModel.MoveCardToInventory(LorId)">
      <summary></summary>
      <param name="cardId"></param>
      <returns></returns>
    </member>
    <member name="M:UnitDataModel.ReEquipDeck">
      <summary></summary>
    </member>
    <member name="M:UnitDataModel.RemoveCardInDeck(LOR_DiceSystem.DiceCardXmlInfo)">
      <summary></summary>
      <param name="card"></param>
      <returns></returns>
    </member>
    <member name="M:UnitDataModel.ResetForBlackSilence">
      <summary></summary>
    </member>
    <member name="M:UnitDataModel.ResetTempName">
      <summary></summary>
    </member>
    <member name="M:UnitDataModel.SetByEnemyUnitClassInfo(EnemyUnitClassInfo)">
      <summary></summary>
      <param name="classInfo"></param>
    </member>
    <member name="M:UnitDataModel.SetCustomizingData(UnitCustomizingData)">
      <summary></summary>
      <param name="data"></param>
    </member>
    <member name="M:UnitDataModel.SetCustomName(System.String)">
      <summary></summary>
      <param name="txt"></param>
    </member>
    <member name="M:UnitDataModel.SetEnemyDropTable(EnemyUnitClassInfo)">
      <summary></summary>
      <param name="classInfo"></param>
    </member>
    <member name="M:UnitDataModel.SetEnemyEmotionList(System.Collections.Generic.List{EmotionSetInfo})">
      <summary></summary>
      <param name="emotionList"></param>
    </member>
    <member name="M:UnitDataModel.SetNameId(System.Int32)">
      <summary></summary>
      <param name="id"></param>
    </member>
    <member name="M:UnitDataModel.SetTempName(System.String)">
      <summary></summary>
      <param name="txt"></param>
    </member>
    <member name="M:UnitDataModel.SetTemporaryPlayerUnitByBook(System.Int32)">
      <summary></summary>
      <param name="bookId"></param>
    </member>
    <member name="M:UnitDataModel.SetTemporaryPlayerUnitByBook(LorId)">
      <summary></summary>
      <param name="bookId"></param>
    </member>
    <member name="P:UnitDataModel.blackSilenceBook">
      <summary></summary>
    </member>
    <member name="P:UnitDataModel.bookItem">
      <summary></summary>
    </member>
    <member name="P:UnitDataModel.Break">
      <summary></summary>
    </member>
    <member name="P:UnitDataModel.CustomBookItem">
      <summary></summary>
    </member>
    <member name="P:UnitDataModel.customizeData">
      <summary></summary>
    </member>
    <member name="P:UnitDataModel.defaultBook">
      <summary></summary>
    </member>
    <member name="P:UnitDataModel.DropBonus">
      <summary></summary>
    </member>
    <member name="P:UnitDataModel.DropTable">
      <summary></summary>
    </member>
    <member name="P:UnitDataModel.EnemyUnitId">
      <summary></summary>
    </member>
    <member name="P:UnitDataModel.ExpDrop">
      <summary></summary>
    </member>
    <member name="P:UnitDataModel.history">
      <summary></summary>
    </member>
    <member name="P:UnitDataModel.MaxEmotionLevel">
      <summary></summary>
    </member>
    <member name="P:UnitDataModel.MaxHp">
      <summary></summary>
    </member>
    <member name="P:UnitDataModel.name">
      <summary></summary>
    </member>
    <member name="P:UnitDataModel.nameID">
      <summary></summary>
    </member>
    <member name="P:UnitDataModel.OwnerSephirah">
      <summary></summary>
    </member>
    <member name="P:UnitDataModel.StartHp">
      <summary></summary>
    </member>
  </members>
</doc>